package com.omfys.bsat.controller;

import java.awt.Color;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;
import javax.transaction.Transactional;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.omfys.bsat.repository.ReviewSchemeDao;
import com.omfys.bsat.repository.SchemeMasterDao;
import com.omfys.bsat.repository.SchemeRequestDao;
import com.omfys.bsat.controller.Main_code;
import com.omfys.bsat.model.MaxLife_RDC_AGENT;
import com.omfys.bsat.model.Maxlife_Adm;
import com.omfys.bsat.model.Maxlife_Agent;
import com.omfys.bsat.model.Maxlife_Transaction;
import com.omfys.bsat.model.Sales_Incentive;
import com.omfys.bsat.model.Vodafone_Rewards;
import com.omfys.bsat.TilesConfiguration;
import com.omfys.bsat.controller.BpilLoginController;
import com.omfys.bsat.model.Bpil_DealerOPAInput;
import com.omfys.bsat.model.Bpil_Dealer_Master;
import com.omfys.bsat.model.Bpil_Depot_Master;
import com.omfys.bsat.model.Bpil_Gift_Master;
import com.omfys.bsat.model.Bpil_Opa_Fin_Analysis_Rw;
import com.omfys.bsat.model.Bpil_Opa_Fin_Tsi_Analysis_Rw;
import com.omfys.bsat.model.Bpil_Opa_Rw_Analysis_Rw;
import com.omfys.bsat.model.Bpil_Opa_Rw_Tsi_Analysis_Rw;
import com.omfys.bsat.model.Bpil_Opa_Sch_Analysis_Rw;
import com.omfys.bsat.model.Bpil_Opa_Sch_Tsi_Analysis_Rw;
import com.omfys.bsat.model.Bpil_ProductOPAInput;
import com.omfys.bsat.model.Bpil_Qmis_Prd;
import com.omfys.bsat.model.Bpil_RewardOPAOutput;
import com.omfys.bsat.model.Bpil_Rule_Library;
import com.omfys.bsat.model.Bpil_Rule_LibraryDoc;
import com.omfys.bsat.model.Bpil_Scheme_Benefit;
import com.omfys.bsat.model.Bpil_Scheme_Depots_Details;
import com.omfys.bsat.model.Bpil_Scheme_Doc;
import com.omfys.bsat.model.Bpil_Scheme_Product;
import com.omfys.bsat.model.Bpil_User_ProfileId_List;
import com.omfys.bsat.model.Bpil_Users;
import com.omfys.bsat.model.Bpil_opa_scheme_analysis;
import com.omfys.bsat.model.BudgetVsActual;
import com.omfys.bsat.model.GiftCountReport;
import com.omfys.bsat.model.MISReport;
import com.omfys.bsat.model.MISReportDetails;
import com.omfys.bsat.model.New_Scheme_mstr;

import oracle.jdbc.internal.OracleTypes;

@Controller
@MultipartConfig
//@PropertySource(value = { "classpath:application.properties" })
public class RewardAnalysisController {

	@Autowired
	HibernateTemplate hibernateTemplate;

	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Autowired
	TilesConfiguration hibernateconfiguration;

	@Autowired
	SchemeMasterDao schememasterdao;

	@Autowired
	SchemeRequestDao schemerequestdao;

	@Autowired
	ReviewSchemeDao dao;

	@Autowired
	CallOPA_RewardsAnalysis callopa_rewardsanalysis;

	@Autowired
	private Environment environment;

	@Autowired
	private TilesConfiguration hibernateConfiguration;

//	@Autowired
//	RewardAnalysisDao rewardanalysisdao;

	/*----------------------------------- Reward Analysis ----------------------------------------------------------------*/

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		binder.setAutoGrowCollectionLimit(5000);
	}

	@RequestMapping("/rewardanalysis")
	public ModelAndView rewardanalysis(ModelMap map, Model model, HttpServletRequest request) {
		int user_id = (Integer) request.getSession().getAttribute("userid");

		int profile_id = (Integer) request.getSession().getAttribute("profileid");

		ArrayList<New_Scheme_mstr> Rewpro_Pending_list = dao.Rewpro_Pending_list(user_id, profile_id);

		model.addAttribute("Rewpro_Pending_list", Rewpro_Pending_list);

		return new ModelAndView("RewardAnalysis");
	}

	@RequestMapping("/chart")
	public ModelAndView chart(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("chart");
	}
	
	@RequestMapping("/MaxLifeRDCSchemeAnalysis")
	public ModelAndView MaxLifeRDCSchemeAnalysis(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("MaxLifeRDCSchemeAnalysis");
	}
	
	@RequestMapping("/VodafoneSchemeAnalysis")
	public ModelAndView VodafoneSchemeAnalysis(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("VodafoneSchemeAnalysis");
	}

	@RequestMapping("/schemerewardanalysis")
	public ModelAndView schemerewardanalysis(ModelMap map, Model model, HttpServletRequest request) {
		int user_id = (Integer) request.getSession().getAttribute("userid");

		int profile_id = (Integer) request.getSession().getAttribute("profileid");

		ArrayList<New_Scheme_mstr> Rewpro_Pending_list = dao.Rewpro_Pending_list(user_id, profile_id);

		model.addAttribute("Rewpro_Pending_list", Rewpro_Pending_list);

		return new ModelAndView("SchemeRewardAnalysis");
	}

	@RequestMapping("/schemerewardfreeze")
	public ModelAndView schemerewardfreeze(ModelMap map, Model model, HttpServletRequest request) {
		int user_id = (Integer) request.getSession().getAttribute("userid");

		int profile_id = (Integer) request.getSession().getAttribute("profileid");

		ArrayList<New_Scheme_mstr> Rew_Sch_Freeze_list = dao.Rew_Sch_Freeze_list(user_id, profile_id);

		model.addAttribute("Rew_Sch_Freeze_list", Rew_Sch_Freeze_list);

		return new ModelAndView("SchemeRewardFreeze");
	}

	@RequestMapping("/schemerewardclose")
	public ModelAndView schemerewardclose(ModelMap map, Model model, HttpServletRequest request) {
		int user_id = (Integer) request.getSession().getAttribute("userid");

		int profile_id = (Integer) request.getSession().getAttribute("profileid");

		ArrayList<New_Scheme_mstr> Rew_Sch_Close_list = dao.Rew_Sch_Close_list(user_id, profile_id);

		model.addAttribute("Rew_Sch_Close_list", Rew_Sch_Close_list);

		return new ModelAndView("SchemeRewardClose");
	}

	@RequestMapping(value = "/getschemedepot1", method = RequestMethod.GET)
	public void getschemedepot1(@RequestParam(value = "depot") String depot, HttpServletRequest request, Model model,
			HttpServletResponse response) {
		try {
			System.out.println(" :" + depot);
//int schemeid=Integer.parseInt(depot);
			String msg = null;
			int msg1;
			ArrayList<Main_code> al = new ArrayList<Main_code>();
			CallableStatement cStmt;
			try {
				cStmt = hibernateConfiguration.dataSource().getConnection().prepareCall("{call BPIL_GET_DEPOTS(?,?)}");

				Main_code m = new Main_code();

				cStmt.setString(1, depot);
				cStmt.registerOutParameter(2, Types.REF_CURSOR);
				ResultSet rs1 = cStmt.executeQuery();

				msg1 = cStmt.getInt(1);
				msg = cStmt.getString(2);

				// m.setDepot_code(msg1);
				// m.setDepot_name(msg);

				al.add(m);
				System.out.println("msg is=" + msg);

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			String json = null;
			json = new Gson().toJson(al);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemedepot", method = RequestMethod.GET)
	public void getschemedepot(@RequestParam(value = "schemeid") String schemeid, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			System.out.println("schemeid :" + schemeid);
			ArrayList<New_Scheme_mstr> dml = new ArrayList<New_Scheme_mstr>();
			ArrayList<Bpil_Depot_Master> al = new ArrayList<Bpil_Depot_Master>();
			if (schemeid != null && schemeid != "") {
				dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_id=" + schemeid);
				System.out.println(" depot :" + dml.get(0).getAppl_depot_code());
				String a[] = dml.get(0).getAppl_depot_code().split(",");

				for (int s = 0; s < a.length; s++) {
					System.out.println(a[s]);
					ArrayList<Bpil_Depot_Master> dml1 = (ArrayList<Bpil_Depot_Master>) hibernateTemplate
							.find("from Bpil_Depot_Master where depot_code='" + a[s] + "'");
					al.add(dml1.get(0));
//	    b[s]=dml1.get(0).getDepot_name();
				}
			}

			String json = null;

			json = new Gson().toJson(al);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getdepotdetails", method = RequestMethod.GET)
	public void getdepotdetails(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			/*
			 * ArrayList<New_Scheme_mstr> dml = new ArrayList<New_Scheme_mstr>();
			 * ArrayList<Bpil_Depot_Master> al=new ArrayList<Bpil_Depot_Master>();
			 * if(schemeid!=null && schemeid!= "") { dml= (ArrayList<New_Scheme_mstr>)
			 * hibernateTemplate.find("from New_Scheme_mstr where scheme_id="+schemeid);
			 * System.out.println(" depot :"+dml.get(0).getAppl_depot_code()); String
			 * a[]=dml.get(0).getAppl_depot_code().split(",");
			 * 
			 * 
			 * 
			 * for(int s=0;s<a.length;s++) { System.out.println(a[s]);
			 * ArrayList<Bpil_Depot_Master> dml1 = (ArrayList<Bpil_Depot_Master>)
			 * hibernateTemplate.find("from Bpil_Depot_Master where depot_code='"+a[s]+"'");
			 * al.add(dml1.get(0)); // b[s]=dml1.get(0).getDepot_name(); } }
			 */
			ArrayList<Bpil_Depot_Master> schdepos = (ArrayList<Bpil_Depot_Master>) hibernateTemplate
					.find("from Bpil_Depot_Master order by depot_code");

			String json = null;

//	         json = new Gson().toJson(al);
			json = new Gson().toJson(schdepos);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemedepotdetails", method = RequestMethod.GET)
	public void getschemedepotdetails(@RequestParam(value = "schemeid") String schemeid, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			System.out.println("schemeid :" + schemeid);
			int scheme_id = 0;
			if (schemeid.equals("")) {
				scheme_id = 0;
			} else {
				scheme_id = Integer.parseInt(schemeid);
			}
			Integer userid = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			/*
			 * ArrayList<New_Scheme_mstr> dml = new ArrayList<New_Scheme_mstr>();
			 * ArrayList<Bpil_Depot_Master> al=new ArrayList<Bpil_Depot_Master>();
			 * if(schemeid!=null && schemeid!= "") { dml= (ArrayList<New_Scheme_mstr>)
			 * hibernateTemplate.find("from New_Scheme_mstr where scheme_id="+schemeid);
			 * System.out.println(" depot :"+dml.get(0).getAppl_depot_code()); String
			 * a[]=dml.get(0).getAppl_depot_code().split(",");
			 * 
			 * 
			 * 
			 * for(int s=0;s<a.length;s++) { System.out.println(a[s]);
			 * ArrayList<Bpil_Depot_Master> dml1 = (ArrayList<Bpil_Depot_Master>)
			 * hibernateTemplate.find("from Bpil_Depot_Master where depot_code='"+a[s]+"'");
			 * al.add(dml1.get(0)); // b[s]=dml1.get(0).getDepot_name(); } }
			 */
			if (profile_id == 2) {

				ArrayList<Bpil_Scheme_Depots_Details> schdepos = (ArrayList<Bpil_Scheme_Depots_Details>) hibernateTemplate
						.find("select distinct dm from Bpil_Scheme_Depots_Details dm, Bpil_Users bu where scheme_id = "
								+ scheme_id + " and dm.sch_depot_code = bu.depot_code and bu.user_id = " + userid);

				String json = null;

//       		 json = new Gson().toJson(al);
				json = new Gson().toJson(schdepos);
				response.setContentType("application/json");
				response.getWriter().write(json);
			} else {

				ArrayList<Bpil_Scheme_Depots_Details> schdepos = (ArrayList<Bpil_Scheme_Depots_Details>) hibernateTemplate
						.find("from Bpil_Scheme_Depots_Details where scheme_id= "+scheme_id+" order by sch_depot_code");

				String json = null;

//    json = new Gson().toJson(al);
				json = new Gson().toJson(schdepos);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/showSchAnReportSoap")
	public ModelAndView showSchAnReportSoap(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			schopawebserviceUrl = dml.get(0).getSch_opa_url();
		}

		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

		for (String dealer_bill_to_id : dealer_name) {

			List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();
			List<Bpil_RewardOPAOutput> RewardOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {
					Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

					DealerOPAInput.add(bpil_DealerOPAInput);
				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Date Sd = new Date();
			System.out.println("Start call to webservice" + Sd);

			RewardOPAOutput = callopa_rewardsanalysis.callschopasoap_webservice(DealerOPAInput, ProductOPAInput, schnm,
					depot, dealer_bill_to_id, schopawebserviceUrl, request);

			Date Ed = new Date();
			System.out.println("End call to webservice" + Ed);

			System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

			RewardSchOPAOutput.addAll(RewardOPAOutput);

		}

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		String LastRefresh = "";

		if (sch_Analysis_Rws.size() > 0) {

			if (sch_Analysis_Rws.get(0).getReward_last_update() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(sch_Analysis_Rws.get(0).getReward_last_update());
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}

				LastRefresh = dateStr1;
			}

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", sch_Analysis_Rws);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("depo_code", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnSoap");
	}

	@RequestMapping(value = "/showSchAnReportRest")
	public ModelAndView showSchAnReportRest(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			String opa_sch_policy_name = dml.get(0).getOpa_sch_an_name();
			if (opa_sch_policy_name != null && !opa_sch_policy_name.equals("")) {
				schopawebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/12.2.7/policy-models/"
						+ opa_sch_policy_name + "/assessor";
			}

		}

		String OAuth2_token = "";
		if (dealer_name.size() > 0) {

			String schopaauthwebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/auth?grant_type=client_credentials&client_id=omfys&client_secret=omfysTest1@123";

			OAuth2_token = callopa_rewardsanalysis.callauthoparest_webservice(schopaauthwebserviceUrl, request);

		}
		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

		for (String dealer_bill_to_id : dealer_name) {

			List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();
			List<Bpil_RewardOPAOutput> RewardOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {
					Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

					DealerOPAInput.add(bpil_DealerOPAInput);
				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Date Sd = new Date();
			System.out.println("Start call to webservice" + Sd);

			RewardOPAOutput = callopa_rewardsanalysis.callschoparest_webservice(DealerOPAInput, ProductOPAInput, schnm,
					depot, dealer_bill_to_id, schopawebserviceUrl, OAuth2_token, request);

			Date Ed = new Date();
			System.out.println("End call to webservice" + Ed);

			System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

			RewardSchOPAOutput.addAll(RewardOPAOutput);

		}

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		String LastRefresh = "";

		if (sch_Analysis_Rws.size() > 0) {

			if (sch_Analysis_Rws.get(0).getReward_last_update() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(sch_Analysis_Rws.get(0).getReward_last_update());
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}

				LastRefresh = dateStr1;
			}

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", sch_Analysis_Rws);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("depo_code", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnRest");
	}

	@RequestMapping(value = "/downloadSchAnReportSoap")
	public ModelAndView downloadSchAnReportSoap(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			schopawebserviceUrl = dml.get(0).getSch_opa_url();
		}

		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

		for (String dealer_bill_to_id : dealer_name) {

			List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();
			List<Bpil_RewardOPAOutput> RewardOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {
					Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

					DealerOPAInput.add(bpil_DealerOPAInput);
				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Date Sd = new Date();
			System.out.println("Start call to webservice" + Sd);

			RewardOPAOutput = callopa_rewardsanalysis.callschopasoap_webservice(DealerOPAInput, ProductOPAInput, schnm,
					depot, dealer_bill_to_id, schopawebserviceUrl, request);

			Date Ed = new Date();
			System.out.println("End call to webservice" + Ed);

			System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

			RewardSchOPAOutput.addAll(RewardOPAOutput);

		}

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("REGION");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("STATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("SUP CODE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("SUP NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TERR NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("A/C No.");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("BILL TO");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR CAT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CUST TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("A/C NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 2000);

		cell = row.createCell(12);
		cell.setCellValue("REWARD SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 3000);

		cell = row.createCell(13);
		cell.setCellValue("REWARD TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("UNIT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("REWARD DATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 4000);

		cell = row.createCell(17);
		cell.setCellValue("LY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 2500);

		cell = row.createCell(18);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 6000);

		cell = row.createCell(19);
		cell.setCellValue("TY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 4000);

		cell = row.createCell(20);
		cell.setCellValue("TGT PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		cell = row.createCell(21);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(21, 4000);

		cell = row.createCell(22);
		cell.setCellValue("ADD PTS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(22, 4000);

		cell = row.createCell(23);
		cell.setCellValue("REWARD DESC");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(23, 4000);

		cell = row.createCell(24);
		cell.setCellValue("REWARD");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(24, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = sch_Analysis_Rws.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(1);
			cell.setCellValue(ex.getState());

			cell = row.createCell(2);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(3);
			cell.setCellValue(ex.getSup_code());

			cell = row.createCell(4);
			cell.setCellValue(ex.getSup_name());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTerr_name());

			cell = row.createCell(7);
			cell.setCellValue(ex.getDlr_ac_no());

			cell = row.createCell(8);
			cell.setCellValue(ex.getDlr_bill_to());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_cat());

			cell = row.createCell(10);
			cell.setCellValue(ex.getDlr_type());

			cell = row.createCell(11);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(12);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(13);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(14);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(15);
			cell.setCellValue(ex.getUnit());

			cell = row.createCell(16);
			cell.setCellValue(ex.getReward_date());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_ly());

			cell = row.createCell(18);
			cell.setCellValue(ex.getReward_target());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_ty());

			cell = row.createCell(20);
			cell.setCellValue(ex.getNext_tgt_pending());

			cell = row.createCell(21);
			cell.setCellValue(ex.getReward_status());

			cell = row.createCell(22);
			cell.setCellValue(ex.getAdditional());

			cell = row.createCell(23);
			cell.setCellValue(ex.getReward_description());

			cell = row.createCell(24);
			cell.setCellValue(ex.getReward_total());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Customer Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Customer Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnSoap");
	}

	@RequestMapping(value = "/downloadSchAnReportRest")
	public ModelAndView downloadSchAnReportRest(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			String opa_sch_policy_name = dml.get(0).getOpa_sch_an_name();
			if (opa_sch_policy_name != null && !opa_sch_policy_name.equals("")) {
				schopawebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/12.2.7/policy-models/"
						+ opa_sch_policy_name + "/assessor";
			}

		}

		String schopaauthwebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/auth?grant_type=client_credentials&client_id=omfys&client_secret=omfysTest1@123";

		String OAuth2_token = callopa_rewardsanalysis.callauthoparest_webservice(schopaauthwebserviceUrl, request);

		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

		for (String dealer_bill_to_id : dealer_name) {

			List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();
			List<Bpil_RewardOPAOutput> RewardOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {
					Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

					DealerOPAInput.add(bpil_DealerOPAInput);
				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Date Sd = new Date();
			System.out.println("Start call to webservice" + Sd);

			RewardOPAOutput = callopa_rewardsanalysis.callschoparest_webservice(DealerOPAInput, ProductOPAInput, schnm,
					depot, dealer_bill_to_id, schopawebserviceUrl, OAuth2_token, request);

			Date Ed = new Date();
			System.out.println("End call to webservice" + Ed);

			System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

			RewardSchOPAOutput.addAll(RewardOPAOutput);

		}

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("REGION");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("STATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("SUP CODE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("SUP NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TERR NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("A/C No.");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("BILL TO");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR CAT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CUST TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("A/C NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 2000);

		cell = row.createCell(12);
		cell.setCellValue("REWARD SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 3000);

		cell = row.createCell(13);
		cell.setCellValue("REWARD TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("UNIT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("REWARD DATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 4000);

		cell = row.createCell(17);
		cell.setCellValue("LY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 2500);

		cell = row.createCell(18);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 6000);

		cell = row.createCell(19);
		cell.setCellValue("TY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 4000);

		cell = row.createCell(20);
		cell.setCellValue("TGT PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		cell = row.createCell(21);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(21, 4000);

		cell = row.createCell(22);
		cell.setCellValue("ADD PTS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(22, 4000);

		cell = row.createCell(23);
		cell.setCellValue("REWARD DESC");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(23, 4000);

		cell = row.createCell(24);
		cell.setCellValue("REWARD");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(24, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = sch_Analysis_Rws.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(1);
			cell.setCellValue(ex.getState());

			cell = row.createCell(2);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(3);
			cell.setCellValue(ex.getSup_code());

			cell = row.createCell(4);
			cell.setCellValue(ex.getSup_name());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTerr_name());

			cell = row.createCell(7);
			cell.setCellValue(ex.getDlr_ac_no());

			cell = row.createCell(8);
			cell.setCellValue(ex.getDlr_bill_to());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_cat());

			cell = row.createCell(10);
			cell.setCellValue(ex.getDlr_type());

			cell = row.createCell(11);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(12);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(13);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(14);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(15);
			cell.setCellValue(ex.getUnit());

			cell = row.createCell(16);
			cell.setCellValue(ex.getReward_date());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_ly());

			cell = row.createCell(18);
			cell.setCellValue(ex.getReward_target());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_ty());

			cell = row.createCell(20);
			cell.setCellValue(ex.getNext_tgt_pending());

			cell = row.createCell(21);
			cell.setCellValue(ex.getReward_status());

			cell = row.createCell(22);
			cell.setCellValue(ex.getAdditional());

			cell = row.createCell(23);
			cell.setCellValue(ex.getReward_description());

			cell = row.createCell(24);
			cell.setCellValue(ex.getReward_total());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Customer Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Customer Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnRest");
	}

	@RequestMapping(value = "/showSchAnDepoReportSoap")
	public ModelAndView showSchAnDepoReportSoap(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			schopawebserviceUrl = dml.get(0).getSch_opa_url();
		}

		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();
		List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();

		for (String dealer_bill_to_id : dealer_name) {

			Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}

				bpil_DealerOPAInput.setProductOPAInput(ProductOPAInput);
				DealerOPAInput.add(bpil_DealerOPAInput);

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

		}

		Date Sd = new Date();
		System.out.println("Start call to webservice" + Sd);

		RewardSchOPAOutput = callopa_rewardsanalysis.callschdepoopasoap_webservice(DealerOPAInput, schnm, depot,
				dealer_name, schopawebserviceUrl, request);

		Date Ed = new Date();
		System.out.println("End call to webservice" + Ed);

		System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		String LastRefresh = "";

		if (sch_Analysis_Rws.size() > 0) {

			if (sch_Analysis_Rws.get(0).getReward_last_update() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(sch_Analysis_Rws.get(0).getReward_last_update());
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}

				LastRefresh = dateStr1;
			}

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", sch_Analysis_Rws);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("depo_code", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnDepoSoap");
	}

	@RequestMapping(value = "/showSchAnDepoReportRest")
	public ModelAndView showSchAnDepoReportRest(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			String opa_sch_policy_name = dml.get(0).getOpa_sch_an_name();
			if (opa_sch_policy_name != null && !opa_sch_policy_name.equals("")) {
				schopawebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/12.2.7/policy-models/"
						+ opa_sch_policy_name + "/assessor";
			}

		}

		List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

		for (String dealer_bill_to_id : dealer_name) {
			Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}
				bpil_DealerOPAInput.setProductOPAInput(ProductOPAInput);
				DealerOPAInput.add(bpil_DealerOPAInput);

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

		}

		String OAuth2_token = "";
		if (dealer_name.size() > 0) {

			String schopaauthwebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/auth?grant_type=client_credentials&client_id=omfys&client_secret=omfysTest1@123";

			OAuth2_token = callopa_rewardsanalysis.callauthoparest_webservice(schopaauthwebserviceUrl, request);

		}

		if (dealer_name.size() > 0) {

			Date Sd = new Date();
			System.out.println("Start call to webservice" + Sd);

			RewardSchOPAOutput = callopa_rewardsanalysis.callschdepooparest_webservice(DealerOPAInput, schnm, depot,
					dealer_name, schopawebserviceUrl, OAuth2_token, request);

			Date Ed = new Date();
			System.out.println("End call to webservice" + Ed);

			System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

		}

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		String LastRefresh = "";

		if (sch_Analysis_Rws.size() > 0) {

			if (sch_Analysis_Rws.get(0).getReward_last_update() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(sch_Analysis_Rws.get(0).getReward_last_update());
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}

				LastRefresh = dateStr1;
			}

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", sch_Analysis_Rws);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("depo_code", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnDepoRest");
	}

	@RequestMapping(value = "/downloadSchAnDepoReportSoap")
	public ModelAndView downloadSchAnDepoReportSoap(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			schopawebserviceUrl = dml.get(0).getSch_opa_url();
		}

		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();
		List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();

		for (String dealer_bill_to_id : dealer_name) {

			Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}

				bpil_DealerOPAInput.setProductOPAInput(ProductOPAInput);
				DealerOPAInput.add(bpil_DealerOPAInput);

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

		}

		Date Sd = new Date();
		System.out.println("Start call to webservice" + Sd);

		RewardSchOPAOutput = callopa_rewardsanalysis.callschdepoopasoap_webservice(DealerOPAInput, schnm, depot,
				dealer_name, schopawebserviceUrl, request);

		Date Ed = new Date();
		System.out.println("End call to webservice" + Ed);

		System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("REGION");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("STATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("SUP CODE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("SUP NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TERR NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("A/C No.");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("BILL TO");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR CAT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CUST TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("A/C NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 2000);

		cell = row.createCell(12);
		cell.setCellValue("REWARD SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 3000);

		cell = row.createCell(13);
		cell.setCellValue("REWARD TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("UNIT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("REWARD DATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 4000);

		cell = row.createCell(17);
		cell.setCellValue("LY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 2500);

		cell = row.createCell(18);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 6000);

		cell = row.createCell(19);
		cell.setCellValue("TY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 4000);

		cell = row.createCell(20);
		cell.setCellValue("TGT PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		cell = row.createCell(21);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(21, 4000);

		cell = row.createCell(22);
		cell.setCellValue("ADD PTS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(22, 4000);

		cell = row.createCell(23);
		cell.setCellValue("REWARD DESC");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(23, 4000);

		cell = row.createCell(24);
		cell.setCellValue("REWARD");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(24, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = sch_Analysis_Rws.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(1);
			cell.setCellValue(ex.getState());

			cell = row.createCell(2);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(3);
			cell.setCellValue(ex.getSup_code());

			cell = row.createCell(4);
			cell.setCellValue(ex.getSup_name());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTerr_name());

			cell = row.createCell(7);
			cell.setCellValue(ex.getDlr_ac_no());

			cell = row.createCell(8);
			cell.setCellValue(ex.getDlr_bill_to());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_cat());

			cell = row.createCell(10);
			cell.setCellValue(ex.getDlr_type());

			cell = row.createCell(11);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(12);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(13);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(14);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(15);
			cell.setCellValue(ex.getUnit());

			cell = row.createCell(16);
			cell.setCellValue(ex.getReward_date());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_ly());

			cell = row.createCell(18);
			cell.setCellValue(ex.getReward_target());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_ty());

			cell = row.createCell(20);
			cell.setCellValue(ex.getNext_tgt_pending());

			cell = row.createCell(21);
			cell.setCellValue(ex.getReward_status());

			cell = row.createCell(22);
			cell.setCellValue(ex.getAdditional());

			cell = row.createCell(23);
			cell.setCellValue(ex.getReward_description());

			cell = row.createCell(24);
			cell.setCellValue(ex.getReward_total());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Customer Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Customer Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnDepoSoap");
	}

	@RequestMapping(value = "/downloadSchAnDepoReportRest")
	public ModelAndView downloadSchAnDepoReportRest(@RequestParam(value = "scheme_id") String schnm,
			@RequestParam(value = "depot") String depot, @RequestParam(value = "bill_to_id") String bill_to_id,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		System.out.println("scheme id " + schnm);
		System.out.println("depot " + depot);
		System.out.println("dlr " + bill_to_id);
		List<String> dealer_name = new ArrayList<>();
		if (bill_to_id == "") {
//		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//					+"        ,BDM.DEPOT_CODE "
//					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//					+" 		 ,BPIL_DEPOT_MASTER DPT "
//					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//					+"       ,BPIL_SCHEME_MASTER BSM "
//					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
//					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
//					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//					+" AND     BDM.PRIMARY_FLAG = 'Y' "
//					+" ORDER BY  DLR_AC_NAME ";
//				
//		
//		 
//		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//				@Override
//				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//		
//					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//					
//					return aContact;
//				}
//				
//			});

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmts;
			try {
				cStmts = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmts.setInt(1, Integer.parseInt(schnm));
				cStmts.setString(2, depot);
				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmts.executeQuery();
				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));

					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
			}

			System.out.println("list " + dealer_name.toString());
		} else {
			dealer_name = Arrays.asList(bill_to_id.split(","));
			System.out.println("list " + dealer_name.toString());
		}

		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");

		String schopawebserviceUrl = "";
		if (dml != null && dml.size() > 0) {
			String opa_sch_policy_name = dml.get(0).getOpa_sch_an_name();
			if (opa_sch_policy_name != null && !opa_sch_policy_name.equals("")) {
				schopawebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/12.2.7/policy-models/"
						+ opa_sch_policy_name + "/assessor";
			}

		}

		String schopaauthwebserviceUrl = "https://bergerindiaprod--tst1.custhelp.com/determinations-server/batch/auth?grant_type=client_credentials&client_id=omfys&client_secret=omfysTest1@123";

		String OAuth2_token = callopa_rewardsanalysis.callauthoparest_webservice(schopaauthwebserviceUrl, request);

		List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();

		for (String dealer_bill_to_id : dealer_name) {
			Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();
			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();

			CallableStatement cStmt;
			try {
				cStmt = hibernateconfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schnm));
				cStmt.setString(2, depot);
				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));

				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
				cStmt.registerOutParameter(5, OracleTypes.CURSOR);

				ResultSet result = cStmt.executeQuery();
				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);

				while (rsdealers.next()) {

					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));

				}

				while (rsproducts.next()) {
					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();

					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));

					ProductOPAInput.add(bpil_ProductOPAInput);
				}
				bpil_DealerOPAInput.setProductOPAInput(ProductOPAInput);
				DealerOPAInput.add(bpil_DealerOPAInput);

				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

		}

		Date Sd = new Date();
		System.out.println("Start call to webservice" + Sd);

		RewardSchOPAOutput = callopa_rewardsanalysis.callschdepooparest_webservice(DealerOPAInput, schnm, depot,
				dealer_name, schopawebserviceUrl, OAuth2_token, request);

		Date Ed = new Date();
		System.out.println("End call to webservice" + Ed);

		System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();

		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {

			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());

			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
				aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());

			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());

			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
				aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
			}

			sch_Analysis_Rws.add(aContact);

		}

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("REGION");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("STATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("SUP CODE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("SUP NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TERR NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("A/C No.");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("BILL TO");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR CAT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CUST TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("A/C NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 2000);

		cell = row.createCell(12);
		cell.setCellValue("REWARD SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 3000);

		cell = row.createCell(13);
		cell.setCellValue("REWARD TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("UNIT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("REWARD DATE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 4000);

		cell = row.createCell(17);
		cell.setCellValue("LY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 2500);

		cell = row.createCell(18);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 6000);

		cell = row.createCell(19);
		cell.setCellValue("TY");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 4000);

		cell = row.createCell(20);
		cell.setCellValue("TGT PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		cell = row.createCell(21);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(21, 4000);

		cell = row.createCell(22);
		cell.setCellValue("ADD PTS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(22, 4000);

		cell = row.createCell(23);
		cell.setCellValue("REWARD DESC");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(23, 4000);

		cell = row.createCell(24);
		cell.setCellValue("REWARD");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(24, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = sch_Analysis_Rws.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(1);
			cell.setCellValue(ex.getState());

			cell = row.createCell(2);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(3);
			cell.setCellValue(ex.getSup_code());

			cell = row.createCell(4);
			cell.setCellValue(ex.getSup_name());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTerr_name());

			cell = row.createCell(7);
			cell.setCellValue(ex.getDlr_ac_no());

			cell = row.createCell(8);
			cell.setCellValue(ex.getDlr_bill_to());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_cat());

			cell = row.createCell(10);
			cell.setCellValue(ex.getDlr_type());

			cell = row.createCell(11);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(12);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(13);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(14);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(15);
			cell.setCellValue(ex.getUnit());

			cell = row.createCell(16);
			cell.setCellValue(ex.getReward_date());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_ly());

			cell = row.createCell(18);
			cell.setCellValue(ex.getReward_target());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_ty());

			cell = row.createCell(20);
			cell.setCellValue(ex.getNext_tgt_pending());

			cell = row.createCell(21);
			cell.setCellValue(ex.getReward_status());

			cell = row.createCell(22);
			cell.setCellValue(ex.getAdditional());

			cell = row.createCell(23);
			cell.setCellValue(ex.getReward_description());

			cell = row.createCell(24);
			cell.setCellValue(ex.getReward_total());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Customer Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Customer Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", depot);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("DealerSchAnDepoRest");
	}


	@RequestMapping(value = "/showMxLfSchAnReportSoap")
	public ModelAndView showMxLfSchAnReportSoap(HttpServletRequest request, Model model, HttpServletResponse response) {


		String schopawebserviceUrl = "https://sgsdev.custhelp.com/determinations-server/assess/soap/generic/12.2.1/PMS_ADMGPA?wsdl";
		
		
		   String sql_maxlife_Adms = "SELECT ID, "
		   		+ "ADM_ID, "
		   		+ "ADM_JOINING_DATE, "
		   		+ "ADM_NAME, "
		   		+ "ADM_PROMOTION_DATE, "
		   		+ "ADM_ROLE, "
		   		+ "ADM_LOCATION, "
		   		+ "ADM_TERMINATED_COUNT "
		   		+ "FROM MAXLIFE_ADM ";
//		   		+ "WHERE ID in (33,32,30,22,20,17,3)";
				
		
		 
		 List<Maxlife_Adm> maxlife_Adms = jdbcTemplate.query(sql_maxlife_Adms, new RowMapper<Maxlife_Adm>() {

				@Override
				public Maxlife_Adm mapRow(ResultSet rs, int rowNum) throws SQLException {
					Maxlife_Adm maxlife_Adm = new Maxlife_Adm();
		
					maxlife_Adm.setID(rs.getInt("ID"));
					System.out.println("ADM id = "+maxlife_Adm.getID());
					maxlife_Adm.setADM_ID(rs.getInt("ADM_ID"));
					maxlife_Adm.setADM_JOINING_DATE(rs.getDate("ADM_JOINING_DATE"));
					maxlife_Adm.setADM_NAME(rs.getString("ADM_NAME"));
					maxlife_Adm.setADM_PROMOTION_DATE(rs.getDate("ADM_PROMOTION_DATE"));
					maxlife_Adm.setADM_ROLE(rs.getString("ADM_ROLE"));
					maxlife_Adm.setADM_LOCATION(rs.getString("ADM_LOCATION"));
					maxlife_Adm.setADM_TERMINATED_COUNT(rs.getInt("ADM_TERMINATED_COUNT"));
					
					
					return maxlife_Adm;
				}
				
			});
		 
		 for (Maxlife_Adm maxlife_Adm : maxlife_Adms) {
			 
//			 String sql_maxlife_Agent = "SELECT ID, "
//			 		+ "AG_ID, "
//			 		+ "ADM_ID, "
//			 		+ "AGENT_ID, "
//			 		+ "AGENT_DOJ, "
//			 		+ "AGENT_STATUS "
//			 		+ "FROM MAXLIFE_AGENT "
//			 		+ "WHERE ADM_ID = " + maxlife_Adm.getID();
			 
			 String sql_maxlife_Agent = "SELECT distinct ag.ID, "
			 		+ "ag.AG_ID, "
			 		+ "ah.ADM_ID, "
			 		+ "ag.AGENT_ID, "
			 		+ "ag.AGENT_DOJ, "
			 		+ "ag.AGENT_STATUS "
			 		+ "FROM MAXLIFE_AGENT ag , "
			 		+ "MAXLIFE_ADM_HIERARCHY ah "
			 		+ "where ag.AGENT_ID = ah.AGENT_ID "
			 		+ "and ah.ADM_ID = " + maxlife_Adm.getADM_ID();
						
				
				 
				 List<Maxlife_Agent> maxlife_Agents = jdbcTemplate.query(sql_maxlife_Agent, new RowMapper<Maxlife_Agent>() {

						@Override
						public Maxlife_Agent mapRow(ResultSet rs, int rowNum) throws SQLException {
							Maxlife_Agent maxlife_Agent = new Maxlife_Agent();
				
							maxlife_Agent.setID(rs.getInt("ID"));
							System.out.println("ADM id = "+maxlife_Adm.getID()+" Agent id = "+maxlife_Agent.getID());
							maxlife_Agent.setAG_ID(rs.getInt("AG_ID"));
							maxlife_Agent.setADM_ID(rs.getInt("ADM_ID"));
							maxlife_Agent.setAGENT_ID(rs.getInt("AGENT_ID"));
							maxlife_Agent.setAGENT_DOJ(rs.getDate("AGENT_DOJ"));
							maxlife_Agent.setAGENT_STATUS(rs.getString("AGENT_STATUS"));
							
							
							return maxlife_Agent;
						}
						
					});
				 
				 for (Maxlife_Agent maxlife_Agent : maxlife_Agents) {
					 
//					 String sql_maxlife_Transaction = "SELECT ID, "
//					 		+ "AGENT_ID, "
////					 		+ "TRANSACTION_M0_FYC, "
////					 		+ "TRANSACTION_M1_FYC, "
//					 		+ "TRANSACTION_PAID_CASES, "
////					 		+ "TRANSACTION_NOP, "
//							+ "TRANSACTION_FYC, "
//					 		+ "TRANSACTION_WFYP, "
//					 		+ "TRANSACTION_DATE "
//					 		+ "FROM MAXLIFE_TRANSACTION "
//					 		+ "WHERE AGENT_ID = " + maxlife_Agent.getAGENT_ID()
//					 		+" and MONTH = '" + maxlife_Agent.getMonth() +"'";
					 
					 String sql_maxlife_Transaction = "SELECT  tr.ID, " 
							 + "tr.AGENT_ID,  "
							 + "ah.ADM_ID,  "
							 + "tr.TRANSACTION_PAID_CASES, " 
							 + "tr.TRANSACTION_FYC,  "
							 + "tr.TRANSACTION_WFYP,  "
							 + "tr.TRANSACTION_DATE, "
							 + "tr.MONTH "
							 + "FROM MAXLIFE_TRANSACTION tr "
							 + ",MAXLIFE_ADM_HIERARCHY ah "
							 + "WHERE tr.AGENT_ID = ah.AGENT_ID "
							 + "and tr.MONTH = ah.MONTH "
							 + "and ah.ADM_ID =  " + maxlife_Agent.getADM_ID() + " "
							 + "and tr.AGENT_ID =  " + maxlife_Agent.getAGENT_ID();
								
						
						 
						 List<Maxlife_Transaction> maxlife_Transactions = jdbcTemplate.query(sql_maxlife_Transaction, new RowMapper<Maxlife_Transaction>() {

								@Override
								public Maxlife_Transaction mapRow(ResultSet rs, int rowNum) throws SQLException {
									Maxlife_Transaction maxlife_Transaction = new Maxlife_Transaction();
						
									maxlife_Transaction.setID(rs.getInt("ID"));
									System.out.println("Agent id = "+maxlife_Agent.getID()+" Transaction id = "+maxlife_Transaction.getID());
									maxlife_Transaction.setAGENT_ID(rs.getInt("AGENT_ID"));
//									maxlife_Transaction.setTRANSACTION_M0_FYC(rs.getFloat("TRANSACTION_M0_FYC"));
//									maxlife_Transaction.setTRANSACTION_M1_FYC(rs.getFloat("TRANSACTION_M1_FYC"));
									maxlife_Transaction.setTRANSACTION_PAID_CASES(rs.getInt("TRANSACTION_PAID_CASES"));
//									maxlife_Transaction.setTRANSACTION_NOP(rs.getInt("TRANSACTION_NOP"));
									maxlife_Transaction.setTRANSACTION_FYC(rs.getFloat("TRANSACTION_FYC"));
									maxlife_Transaction.setTRANSACTION_WFYP(rs.getFloat("TRANSACTION_WFYP"));
									maxlife_Transaction.setTRANSACTION_DATE(rs.getDate("TRANSACTION_DATE"));
									
									
									return maxlife_Transaction;
								}
								
							});
						 
						 maxlife_Agent.setAgent_Transaction(maxlife_Transactions);
					
				 }
				 
				 maxlife_Adm.setAdm_Agent(maxlife_Agents);
			
		 }
		 
		 for (Maxlife_Adm maxlife_Adm : maxlife_Adms) {
			 
			 System.out.println("ADM id = "+maxlife_Adm.getID());
			 
			 for (Maxlife_Agent maxlife_Agent : maxlife_Adm.getAdm_Agent()) {
				 
				 System.out.println("Agent id = "+maxlife_Agent.getID());
				 
				 for (Maxlife_Transaction maxlife_Transaction : maxlife_Agent.getAgent_Transaction()) {
					 
					 System.out.println("Transaction id = "+maxlife_Transaction.getID());
					
				}
				
			}
			
		}

		
		Date Sd = new Date();
		System.out.println("Start call to webservice" + Sd);

//		maxlife_Adms = 
				callopa_rewardsanalysis.call_maxlife_gpa_schopasoap_webservice(maxlife_Adms, schopawebserviceUrl, request);

		Date Ed = new Date();
		System.out.println("End call to webservice" + Ed);

		System.out.println("Total time : Sw " + Sd + " Ew " + Ed);

		
			HttpSession session = request.getSession();
			session.setAttribute("maxlifeadm", maxlife_Adms);
		
			model.addAttribute("Info_grid", maxlife_Adms);

		
		return new ModelAndView("MaxLifeSchemeAnalysis");
	}
	
	@RequestMapping("/downloadMxLfSchAnReportSoap")
	public ModelAndView downloadMxLfSchAnReportSoap(ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		List<Maxlife_Adm> maxlife_Adms = (List<Maxlife_Adm>) session.getAttribute("maxlifeadm");


			// generate scheme analysis report in excel
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbook.createSheet("GPA Scheme Analysis Report.xlsx");

			XSSFFont font = workbook.createFont();
			font.setFontHeightInPoints((short) 12);
			font.setBold(true);

			CellStyle cellstyle = workbook.createCellStyle();
			CellStyle cellstyle1 = workbook.createCellStyle();
			cellstyle.setWrapText(true);
			cellstyle.setFont(font);

			XSSFRow row = spreadsheet.createRow(0);
			XSSFCell cell;

			cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

			cell = row.createCell(0);
			cell.setCellValue("ADM_ID");
			cellstyle.setLocked(true);
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(0, 3200);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

			cell = row.createCell(1);
			cell.setCellValue("ADM_JOINING_DATE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(1, 2500);

			cell = row.createCell(2);
			cell.setCellValue("ADM_NAME");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(2, 4000);

			cell = row.createCell(3);
			cell.setCellValue("ADM_PROMOTION_DATE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(3, 1500);

			cell = row.createCell(4);
			cell.setCellValue("ADM_ROLE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(4, 5000);

			cell = row.createCell(5);
			cell.setCellValue("ADM_TERMINATED_COUNT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(5, 1500);

			cell = row.createCell(6);
			cell.setCellValue("ADM_ACTUAL_MTD_ACTIVE_MM");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(6, 4000);

			cell = row.createCell(7);
			cell.setCellValue("ADM_ACTUAL_NOP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(7, 3000);

			cell = row.createCell(8);
			cell.setCellValue("ADM_ACTUAL_QR");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(8, 2000);

			cell = row.createCell(9);
			cell.setCellValue("ADM_ACTUAL_WFYP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(9, 2200);

			cell = row.createCell(10);
			cell.setCellValue("ADM_EXPECTED_MTD_ACTIVE_MM");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(10, 2000);

			cell = row.createCell(11);
			cell.setCellValue("ADM_EXPECTED_NOP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);

			cell = row.createCell(12);
			cell.setCellValue("ADM_EXPECTED_QR");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(12, 6000);

			cell = row.createCell(13);
			cell.setCellValue("ADM_EXPECTED_WFYP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(13, 3000);

			cell = row.createCell(14);
			cell.setCellValue("ADM_MTD_ACTIVE_MM_GPA");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(14, 3000);

			cell = row.createCell(15);
			cell.setCellValue("ADM_MTD_ACTIVE_MM_PERCENTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(15, 3000);

			cell = row.createCell(16);
			cell.setCellValue("ADM_NOP_GPA");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(16, 3000);

			cell = row.createCell(17);
			cell.setCellValue("ADM_NOP_PERCENTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(17, 1500);

			cell = row.createCell(18);
			cell.setCellValue("ADM_QR_GPA");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(18, 1500);

			cell = row.createCell(19);
			cell.setCellValue("ADM_QR_PERCENTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(19, 1500);

			cell = row.createCell(20);
			cell.setCellValue("ADM_VINTAGE_PERIOD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(20, 2500);

//			cell = row.createCell(21);
//			cell.setCellValue("ADM_WEIGHTED_PERCENTAGE");
//			cell.setCellStyle(cellstyle);
//			cell.setCellStyle(cellstyle1);
//			spreadsheet.setColumnWidth(21, 2000);

			cell = row.createCell(21);
			cell.setCellValue("ADM_WTD_VALUE_MTD_ACTIVE_MM");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(21, 1000);

			cell = row.createCell(22);
			cell.setCellValue("ADM_WEIGHTED_VALUE_NOP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(22, 3500);

			cell = row.createCell(23);
			cell.setCellValue("ADM_WEIGHTED_VALUE_QR");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(23, 2000);

			cell = row.createCell(24);
			cell.setCellValue("ADM_WEIGHTED_VALUE_WFYP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(24, 2000);
			
			cell = row.createCell(25);
			cell.setCellValue("ADM_WFYP_GPA");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(25, 2000);
			
			cell = row.createCell(26);
			cell.setCellValue("ADM_WFYP_PERCENTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(26, 2000);
			
			cell = row.createCell(27);
			cell.setCellValue("ADM_TOTAL_GPA_SCORE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(27, 2000);
			
			cell = row.createCell(28);
			cell.setCellValue("ADM_LOCATION");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(28, 2000);
			
			int j = 1;

			Iterator<Maxlife_Adm> itr = maxlife_Adms.iterator();
			while (itr.hasNext()) {
				Maxlife_Adm ex = itr.next();

				row = spreadsheet.createRow(j);

				XSSFCellStyle style = workbook.createCellStyle();

				cell = row.createCell(0);
				cell.setCellValue(ex.getADM_ID());
				cell.setCellStyle(style);

				if (ex.getADM_JOINING_DATE() != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(ex.getADM_JOINING_DATE());
					cell = row.createCell(1);
					cell.setCellValue(dateStr1);
					cell.setCellStyle(style);
				}

				cell = row.createCell(2);
				cell.setCellValue(ex.getADM_NAME());
				cell.setCellStyle(style);

				if (ex.getADM_PROMOTION_DATE() != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(ex.getADM_PROMOTION_DATE());
					cell = row.createCell(3);
					cell.setCellValue(dateStr1);
					cell.setCellStyle(style);
				}
				
				cell = row.createCell(4);
				cell.setCellValue(ex.getADM_ROLE());
				cell.setCellStyle(style);

				cell = row.createCell(5);
				cell.setCellValue(ex.getADM_TERMINATED_COUNT());
				cell.setCellStyle(style);

				cell = row.createCell(6);
				cell.setCellValue(ex.getADM_ACTUAL_MTD_ACTIVE_MM());
				cell.setCellStyle(style);

				cell = row.createCell(7);
				cell.setCellValue(ex.getADM_ACTUAL_NOP());
				cell.setCellStyle(style);

				cell = row.createCell(8);
				cell.setCellValue(ex.getADM_ACTUAL_QR());
				cell.setCellStyle(style);

				cell = row.createCell(9);
				cell.setCellValue(ex.getADM_ACTUAL_WFYP());
				cell.setCellStyle(style);

				cell = row.createCell(10);
				cell.setCellValue(ex.getADM_EXPECTED_MTD_ACTIVE_MM());
				cell.setCellStyle(style);

				cell = row.createCell(11);
				cell.setCellValue(ex.getADM_EXPECTED_NOP());
				cell.setCellStyle(style);

				cell = row.createCell(12);
				cell.setCellValue(ex.getADM_EXPECTED_QR());
				cell.setCellStyle(style);

				cell = row.createCell(13);
				cell.setCellValue(ex.getADM_EXPECTED_WFYP());
				cell.setCellStyle(style);

				cell = row.createCell(14);
				cell.setCellValue(ex.getADM_MTD_ACTIVE_MM_GPA());
				cell.setCellStyle(style);

				cell = row.createCell(15);
				cell.setCellValue(ex.getADM_MTD_ACTIVE_MM_PERCENTAGE());
				cell.setCellStyle(style);

				cell = row.createCell(16);
				cell.setCellValue(ex.getADM_NOP_GPA());
				cell.setCellStyle(style);

				cell = row.createCell(17);
				cell.setCellValue(ex.getADM_NOP_PERCENTAGE());
				cell.setCellStyle(style);

				cell = row.createCell(18);
				cell.setCellValue(ex.getADM_QR_GPA());
				cell.setCellStyle(style);

				cell = row.createCell(19);
				cell.setCellValue(ex.getADM_QR_PERCENTAGE());
				cell.setCellStyle(style);

				cell = row.createCell(20);
				cell.setCellValue(ex.getADM_VINTAGE_PERIOD());
				cell.setCellStyle(style);

//				cell = row.createCell(21);
//				cell.setCellValue(ex.getADM_WEIGHTED_PERCENTAGE());
//				cell.setCellStyle(style);

				cell = row.createCell(21);
				cell.setCellValue(ex.getADM_WTD_VALUE_MTD_ACTIVE_MM());
				cell.setCellStyle(style);

				cell = row.createCell(22);
				cell.setCellValue(ex.getADM_WEIGHTED_VALUE_NOP());
				cell.setCellStyle(style);

				cell = row.createCell(23);
				cell.setCellValue(ex.getADM_WEIGHTED_VALUE_QR());
				cell.setCellStyle(style);
				
				cell = row.createCell(24);
				cell.setCellValue(ex.getADM_WEIGHTED_VALUE_WFYP());
				cell.setCellStyle(style);
				
				cell = row.createCell(25);
				cell.setCellValue(ex.getADM_WFYP_GPA());
				cell.setCellStyle(style);
				
				cell = row.createCell(26);
				cell.setCellValue(ex.getADM_WFYP_PERCENTAGE());
				cell.setCellStyle(style);
				
				cell = row.createCell(27);
				cell.setCellValue(ex.getADM_TOTAL_GPA_SCORE());
				cell.setCellStyle(style);
				
				cell = row.createCell(28);
				cell.setCellValue(ex.getADM_LOCATION());
				cell.setCellStyle(style);
				
				j++;
			}

			try {
				// to upload excel file
				String filename = "GPA Scheme Analysis Report.xlsx";
				String filepath = request.getServletContext().getRealPath("/ruledocs");
				System.out.println(filepath);

				File exportExcelfile = new File(filepath + "/" + filename);
				exportExcelfile.createNewFile();
				System.out.println(exportExcelfile.getAbsolutePath());
				String exportExcelfilepath = exportExcelfile.getAbsolutePath();
				FileInputStream in = new FileInputStream(exportExcelfile);
				FileOutputStream out = new FileOutputStream(exportExcelfilepath);

				workbook.write(out);
				out.close();

				// to download excel file
				int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
				response.setContentType("text/html");
				PrintWriter out1 = response.getWriter();
				String fileName = "GPA Scheme Analysis Report.xlsx";
				response.setContentType("APPLICATION/OCTET-STREAM");
				response.setContentLengthLong(exportExcelfile.length());
				response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

				int i;
				while ((i = in.read()) != -1) {
					out1.write(i);
				}

				out1.close();

				exportExcelfile.delete();

				in.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

		return new ModelAndView("MaxLifeSchemeAnalysis");
	}


	
//
//	@RequestMapping(value = "/downloadMxLfSchAnReportSoap")
//	public ModelAndView downloadMxLfSchAnReportSoap(HttpServletRequest request, Model model, HttpServletResponse response) {
//
//		System.out.println("scheme id " + schnm);
//		System.out.println("depot " + depot);
//		System.out.println("dlr " + bill_to_id);
//		List<String> dealer_name = new ArrayList<>();
//		if (bill_to_id == "") {
////		   String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
////					+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
////					+"        ,BDM.DEPOT_CODE "
////					+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
////					+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
////					+" FROM   BPIL_DEALER_MASTER_NEW BDM "
////					+" 		 ,BPIL_DEPOT_MASTER DPT "
////					+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
////					+"       ,BPIL_SCHEME_MASTER BSM "
////					+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
////					+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
////					+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
////					+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
////					+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schnm+"') "
////					+" AND     BSM.SCHEME_ID  = '"+schnm+"' "
////					+" AND     BDM.DEPOT_CODE = '"+depot+"' "
////					+" AND     BDM.PRIMARY_FLAG = 'Y' "
////					+" ORDER BY  DLR_AC_NAME ";
////				
////		
////		 
////		 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
////
////				@Override
////				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
////					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
////		
////					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
////					aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
////					aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
////					aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
////					
////					return aContact;
////				}
////				
////			});
//
//			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
//			CallableStatement cStmts;
//			try {
//				cStmts = hibernateconfiguration.dataSource().getConnection()
//						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
//				cStmts.setInt(1, Integer.parseInt(schnm));
//				cStmts.setString(2, depot);
//				cStmts.registerOutParameter(3, OracleTypes.CURSOR);
//				ResultSet result = cStmts.executeQuery();
//				ResultSet rs1 = (ResultSet) cStmts.getObject(3);
//				while (rs1.next()) {
//					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//
//					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
//					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
//					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
//					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));
//
//					dml.add(aContact);
//				}
//			} catch (SQLException e) {
//				e.printStackTrace();
//			} catch (Exception e) {
//				System.out.println(e.getMessage());
//			}
//
//			Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
//			while (itr.hasNext()) {
//				Bpil_Opa_Rw_Analysis_Rw br = itr.next();
//				dealer_name.add(String.valueOf(br.getDlr_bill_to()));
//			}
//
//			System.out.println("list " + dealer_name.toString());
//		} else {
//			dealer_name = Arrays.asList(bill_to_id.split(","));
//			System.out.println("list " + dealer_name.toString());
//		}
//
//		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
//				.find("from New_Scheme_mstr where scheme_id = '" + schnm + "'");
//
//		String schopawebserviceUrl = "";
//		if (dml != null && dml.size() > 0) {
//			schopawebserviceUrl = dml.get(0).getSch_opa_url();
//		}
//
//		List<Bpil_RewardOPAOutput> RewardSchOPAOutput = new ArrayList<Bpil_RewardOPAOutput>();
//		List<Bpil_DealerOPAInput> DealerOPAInput = new ArrayList<Bpil_DealerOPAInput>();
//
//		for (String dealer_bill_to_id : dealer_name) {
//
//			Bpil_DealerOPAInput bpil_DealerOPAInput = new Bpil_DealerOPAInput();
//			List<Bpil_ProductOPAInput> ProductOPAInput = new ArrayList<Bpil_ProductOPAInput>();
//
//			CallableStatement cStmt;
//			try {
//				cStmt = hibernateconfiguration.dataSource().getConnection()
//						.prepareCall("{call BPIL_GET_OPA_DLR_INPUT(?,?,?,?,?)}");
//				cStmt.setInt(1, Integer.parseInt(schnm));
//				cStmt.setString(2, depot);
//				cStmt.setInt(3, Integer.parseInt(dealer_bill_to_id));
//
//				cStmt.registerOutParameter(4, OracleTypes.CURSOR);
//				cStmt.registerOutParameter(5, OracleTypes.CURSOR);
//
//				ResultSet result = cStmt.executeQuery();
//				ResultSet rsdealers = (ResultSet) cStmt.getObject(4);
//				ResultSet rsproducts = (ResultSet) cStmt.getObject(5);
//
//				while (rsdealers.next()) {
//
//					bpil_DealerOPAInput.setDLR_SCH_ID(rsdealers.getInt("SCHEME_ID"));
//					bpil_DealerOPAInput.setDLR_FIN_AN_FLAG(rsdealers.getString("FIN_AN_FLAG"));
//					bpil_DealerOPAInput.setDLR_REGN(rsdealers.getString("DLR_REGN"));
//					bpil_DealerOPAInput.setDLR_DEPOT(rsdealers.getString("DLR_DEPOT"));
//					bpil_DealerOPAInput.setDLR_STATE(rsdealers.getString("DLR_STATE"));
//					bpil_DealerOPAInput.setDLR_TERR_CODE(rsdealers.getString("DLR_TERR_CODE"));
//					bpil_DealerOPAInput.setDLR_TERR_NAME(rsdealers.getString("DLR_TERR_NAME"));
//					bpil_DealerOPAInput.setDLR_BILL_TO(rsdealers.getInt("DLR_BILL_TO"));
//					bpil_DealerOPAInput.setDLR_AC_NO(rsdealers.getString("DLR_AC_NO"));
//					bpil_DealerOPAInput.setDLR_AC_NAME(rsdealers.getString("DLR_AC_NAME"));
//					bpil_DealerOPAInput.setDLR_CAT(rsdealers.getString("DLR_CAT"));
//					bpil_DealerOPAInput.setDLR_TYPE(rsdealers.getString("DLR_TYPE"));
//					bpil_DealerOPAInput.setDLR_RET(rsdealers.getString("DLR_RET"));
//					bpil_DealerOPAInput.setDLR_SDLR_COUNT(rsdealers.getInt("DLR_SDLR_COUNT"));
//
//				}
//
//				while (rsproducts.next()) {
//					Bpil_ProductOPAInput bpil_ProductOPAInput = new Bpil_ProductOPAInput();
//
//					bpil_ProductOPAInput.setPRD_SCH_ID(rsproducts.getInt("PRD_SCH_ID"));
//					bpil_ProductOPAInput.setPRD_BILL_TO(rsproducts.getInt("PRD_BILL_TO"));
//					bpil_ProductOPAInput.setPRD_DLR_AC_NO(rsproducts.getString("PRD_DLR_AC_NO"));
//					bpil_ProductOPAInput.setPRD_DLR_TYPE(rsproducts.getString("PRD_DLR_TYPE"));
//					bpil_ProductOPAInput.setPRD_NAME(rsproducts.getString("PRD_NAME"));
//					bpil_ProductOPAInput.setPRD_CAT(rsproducts.getString("PRD_CAT"));
//					bpil_ProductOPAInput.setPRD_CAT_DESC(rsproducts.getString("PRD_CAT_DESC"));
//					bpil_ProductOPAInput.setPRD_GRP(rsproducts.getString("PRD_GRP"));
//					bpil_ProductOPAInput.setPRD_CODE(rsproducts.getString("PRD_CODE"));
//					bpil_ProductOPAInput.setPRD_SHD_CODE(rsproducts.getString("PRD_SHD_CODE"));
//					bpil_ProductOPAInput.setPRD_INV_DT(rsproducts.getDate("PRD_INV_DT"));
//					bpil_ProductOPAInput.setPRD_UOM(rsproducts.getString("PRD_UOM"));
//					bpil_ProductOPAInput.setPRD_PCK_SIZE(rsproducts.getBigDecimal("PRD_PCK_SIZE"));
//					bpil_ProductOPAInput.setPRD_VOL(rsproducts.getBigDecimal("PRD_VOL"));
//					bpil_ProductOPAInput.setPRD_FNL_VOL(rsproducts.getBigDecimal("PRD_FNL_VOL"));
//					bpil_ProductOPAInput.setPRD_VAL(rsproducts.getBigDecimal("PRD_VAL"));
//					bpil_ProductOPAInput.setPRD_VOL_RW(rsproducts.getBigDecimal("PRD_VOL_RW"));
//					bpil_ProductOPAInput.setPRD_FNL_VOL_RW(rsproducts.getBigDecimal("PRD_FNL_VOL_RW"));
//					bpil_ProductOPAInput.setPRD_VAL_RW(rsproducts.getBigDecimal("PRD_VAL_RW"));
//
//					ProductOPAInput.add(bpil_ProductOPAInput);
//				}
//
//				bpil_DealerOPAInput.setProductOPAInput(ProductOPAInput);
//				DealerOPAInput.add(bpil_DealerOPAInput);
//
//				System.out.println("Dealers size = " + DealerOPAInput.size() + " Products = " + ProductOPAInput.size());
//
//			} catch (SQLException e) {
//				e.printStackTrace();
//			} catch (Exception e) {
//				System.out.println(e.getMessage());
//			}
//
//		}
//
//		Date Sd = new Date();
//		System.out.println("Start call to webservice" + Sd);
//
//		RewardSchOPAOutput = callopa_rewardsanalysis.callschdepoopasoap_webservice(DealerOPAInput, schnm, depot,
//				dealer_name, schopawebserviceUrl, request);
//
//		Date Ed = new Date();
//		System.out.println("End call to webservice" + Ed);
//
//		System.out.println("Total time : Sw " + Sd + " Ew " + Ed);
//
//		List<Bpil_Opa_Sch_Analysis_Rw> sch_Analysis_Rws = new ArrayList<Bpil_Opa_Sch_Analysis_Rw>();
//
//		for (Bpil_RewardOPAOutput bpil_RewardOPAOutput : RewardSchOPAOutput) {
//
//			Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();
//
//			aContact.setScheme_id(bpil_RewardOPAOutput.getRW_SCH_ID());
//			aContact.setRegn(bpil_RewardOPAOutput.getRW_DLR_REGN());
//			aContact.setState(bpil_RewardOPAOutput.getRW_DLR_STATE());
//			aContact.setDepot(bpil_RewardOPAOutput.getRW_DLR_DEPOT());
//			aContact.setTerr_code(bpil_RewardOPAOutput.getRW_DLR_TERR_CODE());
//			aContact.setTerr_name(bpil_RewardOPAOutput.getRW_DLR_TERR_NAME());
//			aContact.setDlr_ac_no(bpil_RewardOPAOutput.getRW_DLR_CODE());
//			aContact.setDlr_cat(bpil_RewardOPAOutput.getRW_DLR_CAT());
//			aContact.setDlr_bill_to(bpil_RewardOPAOutput.getRW_DLR_BILL_TO());
//			aContact.setDlr_type(bpil_RewardOPAOutput.getRW_DLR_TYPE());
//			aContact.setDlr_name(bpil_RewardOPAOutput.getRW_DLR_NAME());
//			aContact.setReward_section(bpil_RewardOPAOutput.getRW_SEC());
//			aContact.setReward_type(bpil_RewardOPAOutput.getRW_TYPE());
//			aContact.setProduct(bpil_RewardOPAOutput.getRW_PRD());
//			aContact.setUnit(bpil_RewardOPAOutput.getRW_UNIT());
//			aContact.setReward_date(bpil_RewardOPAOutput.getRW_DATE());
//
//			if (bpil_RewardOPAOutput.getRW_DATE() != null) {
//				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_DATE());
//				aContact.setReward_date1(dateStr1);
////					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
////					} catch (ParseException e) {
////							e.printStackTrace();
////					}
//			}
//
//			aContact.setReward_ly(bpil_RewardOPAOutput.getRW_LY().intValue());
//			aContact.setReward_target(bpil_RewardOPAOutput.getRW_TGT().intValue());
//			aContact.setReward_ty(bpil_RewardOPAOutput.getRW_TY().intValue());
//			aContact.setAdditional(bpil_RewardOPAOutput.getRW_ADDITIONAL().intValue());
//			aContact.setBase_total(bpil_RewardOPAOutput.getRW_BASE_TOTAL().intValue());
//			aContact.setReward_status(bpil_RewardOPAOutput.getRW_Q_STAT());
//			aContact.setReward_description(bpil_RewardOPAOutput.getRW_DESC());
//			aContact.setReward_total(bpil_RewardOPAOutput.getRW_TOTAL().intValue());
//			aContact.setNext_tgt_pending(bpil_RewardOPAOutput.getRW_NXT_TGT().intValue());
//			aContact.setGift_to_cn_flag(bpil_RewardOPAOutput.getRW_GFT_TO_CN());
//			aContact.setConverted_cn_value(bpil_RewardOPAOutput.getRW_CONV_CN().intValue());
//			aContact.setInterface_status(bpil_RewardOPAOutput.getRW_I_STAT());
//
//			aContact.setReward_last_update(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
//
//			if (bpil_RewardOPAOutput.getRW_LAST_UPDATE() != null) {
//				DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
//				String dateStr1 = ser1.format(bpil_RewardOPAOutput.getRW_LAST_UPDATE());
//				aContact.setReward_last_update1(dateStr1);
////					try {
//////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
////					} catch (ParseException e) {
////							e.printStackTrace();
////					}
//			}
//
//			sch_Analysis_Rws.add(aContact);
//
//		}
//
//		// generate scheme analysis report in excel
//		XSSFWorkbook workbook = new XSSFWorkbook();
//		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");
//
//		XSSFFont font = workbook.createFont();
//		font.setFontHeightInPoints((short) 12);
//		font.setBold(true);
//
//		CellStyle cellstyle = workbook.createCellStyle();
//		cellstyle.setWrapText(true);
//		cellstyle.setFont(font);
//
//		XSSFRow row = spreadsheet.createRow(0);
//		XSSFCell cell;
//
//		cell = row.createCell(0);
//		cell.setCellValue("REGION");
//		cellstyle.setLocked(true);
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(0, 2000);
//		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
//
//		cell = row.createCell(1);
//		cell.setCellValue("STATE");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(1, 4000);
//
//		cell = row.createCell(2);
//		cell.setCellValue("DEPOT");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(2, 8000);
//
//		cell = row.createCell(3);
//		cell.setCellValue("SUP CODE");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(3, 2000);
//
//		cell = row.createCell(4);
//		cell.setCellValue("SUP NAME");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(4, 6000);
//
//		cell = row.createCell(5);
//		cell.setCellValue("TERR");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(5, 2000);
//
//		cell = row.createCell(6);
//		cell.setCellValue("TERR NAME");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(6, 6000);
//
//		cell = row.createCell(7);
//		cell.setCellValue("A/C No.");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(7, 3000);
//
//		cell = row.createCell(8);
//		cell.setCellValue("BILL TO");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(8, 3000);
//
//		cell = row.createCell(9);
//		cell.setCellValue("DLR CAT");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(9, 8000);
//
//		cell = row.createCell(10);
//		cell.setCellValue("CUST TYPE");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(10, 2000);
//
//		cell = row.createCell(11);
//		cell.setCellValue("A/C NAME");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(11, 2000);
//
//		cell = row.createCell(12);
//		cell.setCellValue("REWARD SECTION");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(12, 3000);
//
//		cell = row.createCell(13);
//		cell.setCellValue("REWARD TYPE");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(13, 3000);
//
//		cell = row.createCell(14);
//		cell.setCellValue("PRODUCT");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(14, 3000);
//
//		cell = row.createCell(15);
//		cell.setCellValue("UNIT");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(15, 3000);
//
//		cell = row.createCell(16);
//		cell.setCellValue("REWARD DATE");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(16, 4000);
//
//		cell = row.createCell(17);
//		cell.setCellValue("LY");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(17, 2500);
//
//		cell = row.createCell(18);
//		cell.setCellValue("TARGET");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(18, 6000);
//
//		cell = row.createCell(19);
//		cell.setCellValue("TY");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(19, 4000);
//
//		cell = row.createCell(20);
//		cell.setCellValue("TGT PENDING");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(20, 4000);
//
//		cell = row.createCell(21);
//		cell.setCellValue("STATUS");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(21, 4000);
//
//		cell = row.createCell(22);
//		cell.setCellValue("ADD PTS");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(22, 4000);
//
//		cell = row.createCell(23);
//		cell.setCellValue("REWARD DESC");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(23, 4000);
//
//		cell = row.createCell(24);
//		cell.setCellValue("REWARD");
//		cell.setCellStyle(cellstyle);
//		spreadsheet.setColumnWidth(24, 4000);
//
//		int j = 1;
//
//		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = sch_Analysis_Rws.iterator();
//		while (itr.hasNext()) {
//			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();
//
//			row = spreadsheet.createRow(j);
//
//			cell = row.createCell(0);
//			cell.setCellValue(ex.getRegn());
//
//			cell = row.createCell(1);
//			cell.setCellValue(ex.getState());
//
//			cell = row.createCell(2);
//			cell.setCellValue(ex.getDepot());
//
//			cell = row.createCell(3);
//			cell.setCellValue(ex.getSup_code());
//
//			cell = row.createCell(4);
//			cell.setCellValue(ex.getSup_name());
//
//			cell = row.createCell(5);
//			cell.setCellValue(ex.getTerr_code());
//
//			cell = row.createCell(6);
//			cell.setCellValue(ex.getTerr_name());
//
//			cell = row.createCell(7);
//			cell.setCellValue(ex.getDlr_ac_no());
//
//			cell = row.createCell(8);
//			cell.setCellValue(ex.getDlr_bill_to());
//
//			cell = row.createCell(9);
//			cell.setCellValue(ex.getDlr_cat());
//
//			cell = row.createCell(10);
//			cell.setCellValue(ex.getDlr_type());
//
//			cell = row.createCell(11);
//			cell.setCellValue(ex.getDlr_name());
//
//			cell = row.createCell(12);
//			cell.setCellValue(ex.getReward_section());
//
//			cell = row.createCell(13);
//			cell.setCellValue(ex.getReward_type());
//
//			cell = row.createCell(14);
//			cell.setCellValue(ex.getProduct());
//
//			cell = row.createCell(15);
//			cell.setCellValue(ex.getUnit());
//
//			cell = row.createCell(16);
//			cell.setCellValue(ex.getReward_date());
//
//			cell = row.createCell(17);
//			cell.setCellValue(ex.getReward_ly());
//
//			cell = row.createCell(18);
//			cell.setCellValue(ex.getReward_target());
//
//			cell = row.createCell(19);
//			cell.setCellValue(ex.getReward_ty());
//
//			cell = row.createCell(20);
//			cell.setCellValue(ex.getNext_tgt_pending());
//
//			cell = row.createCell(21);
//			cell.setCellValue(ex.getReward_status());
//
//			cell = row.createCell(22);
//			cell.setCellValue(ex.getAdditional());
//
//			cell = row.createCell(23);
//			cell.setCellValue(ex.getReward_description());
//
//			cell = row.createCell(24);
//			cell.setCellValue(ex.getReward_total());
//
//			j++;
//		}
//
//		try {
//			// to upload excel file
//			String filename = "Customer Scheme Analysis Report.xlsx";
//			String filepath = request.getServletContext().getRealPath("/ruledocs");
//			System.out.println(filepath);
//
//			File exportExcelfile = new File(filepath + "/" + filename);
//			exportExcelfile.createNewFile();
//			System.out.println(exportExcelfile.getAbsolutePath());
//			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
//			FileInputStream in = new FileInputStream(exportExcelfile);
//			FileOutputStream out = new FileOutputStream(exportExcelfilepath);
//
////		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));
//
//			workbook.write(out);
//			out.close();
//
//			// to download excel file
//			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
//			response.setContentType("text/html");
//			PrintWriter out1 = response.getWriter();
//			String fileName = "Customer Scheme Analysis Report.xlsx";
//			response.setContentType("APPLICATION/OCTET-STREAM");
//			response.setContentLengthLong(exportExcelfile.length());
//			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");
//
////          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");
//
////          FileCopyUtils.copy(in, response.getOutputStream());
//
//			int i;
////          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
////          FileInputStream file = new FileInputStream(exportExcelfilepath);
//			while ((i = in.read()) != -1) {
//				out1.write(i);
//			}
//
//			out1.close();
//
//			exportExcelfile.delete();
//
//			in.close();
//
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//
//		if (schnm != null && schnm != "") {
//			int scheme_id = Integer.parseInt(schnm);
//
//			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
//					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
//			String name = data.get(0).getScheme_name();
//
//			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
//			System.out.println("doc_line " + doc_line.size());
//
//			model.addAttribute("doc_list", doc_line);
//
//			model.addAttribute("Info_grid", dml);
//
//			model.addAttribute("schnm", name);
//		}
//		model.addAttribute("deptnm", depot);
//		model.addAttribute("scheme_id", schnm);
//
//		return new ModelAndView("DealerSchAnDepoSoap");
//	}
//
//
	
	
	@RequestMapping(value = "/gettsischemedepotdetails", method = RequestMethod.GET)
	public void gettsischemedepotdetails(@RequestParam(value = "schemeid") String schemeid, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			System.out.println("schemeid :" + schemeid);
			int scheme_id = 0;
			if (schemeid.equals("")) {
				scheme_id = 0;
			} else {
				scheme_id = Integer.parseInt(schemeid);
			}

			int user_id = (Integer) request.getSession().getAttribute("userid");

			/*
			 * ArrayList<New_Scheme_mstr> dml = new ArrayList<New_Scheme_mstr>();
			 * ArrayList<Bpil_Depot_Master> al=new ArrayList<Bpil_Depot_Master>();
			 * if(schemeid!=null && schemeid!= "") { dml= (ArrayList<New_Scheme_mstr>)
			 * hibernateTemplate.find("from New_Scheme_mstr where scheme_id="+schemeid);
			 * System.out.println(" depot :"+dml.get(0).getAppl_depot_code()); String
			 * a[]=dml.get(0).getAppl_depot_code().split(",");
			 * 
			 * 
			 * 
			 * for(int s=0;s<a.length;s++) { System.out.println(a[s]);
			 * ArrayList<Bpil_Depot_Master> dml1 = (ArrayList<Bpil_Depot_Master>)
			 * hibernateTemplate.find("from Bpil_Depot_Master where depot_code='"+a[s]+"'");
			 * al.add(dml1.get(0)); // b[s]=dml1.get(0).getDepot_name(); } }
			 */
			ArrayList<Bpil_Scheme_Depots_Details> schdepos = (ArrayList<Bpil_Scheme_Depots_Details>) hibernateTemplate
					.find("select sd from Bpil_Scheme_Depots_Details sd, Bpil_Users bu where sd.scheme_id= " + scheme_id
							+ " and sd.sch_depot_code = bu.depot_code and bu.user_id = " + user_id
							+ "  order by sd.sch_depot_code");

			String json = null;

//	         json = new Gson().toJson(al);
			json = new Gson().toJson(schdepos);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemedepotanalysis", method = RequestMethod.GET)
	public void getschemedepotan(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

//	System.out.println("depot :"+depot);
//	ArrayList<New_Scheme_mstr> dml = new ArrayList<New_Scheme_mstr>();
//	ArrayList<Bpil_Depot_Master> al=new ArrayList<Bpil_Depot_Master>();
//	if(depot!=null && depot!= "") {
//		dml= (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where scheme_id="+depot);
//		System.out.println(" depot :"+dml.get(0).getAppl_depot_code());
//	    String a[]=dml.get(0).getAppl_depot_code().split(",");

//	    for(int s=0;s<a.length;s++)
//	    {
//	    System.out.println(a[s]);
			ArrayList<Bpil_Depot_Master> dml1 = (ArrayList<Bpil_Depot_Master>) hibernateTemplate.find(
					"select dm from Bpil_Depot_Master dm, Bpil_Users bu where dm.depot_code = bu.depot_code and bu.user_id = "
							+ userid);
//	    al.add(dml1.get(0));
//	    b[s]=dml1.get(0).getDepot_name();
//	    }
//	}

			String json = null;

			json = new Gson().toJson(dml1);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemeregnanalysis", method = RequestMethod.GET)
	public void getschemeregnan(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

//	System.out.println("depot :"+depot);
//	ArrayList<New_Scheme_mstr> dml = new ArrayList<New_Scheme_mstr>();
//	ArrayList<Bpil_Depot_Master> al=new ArrayList<Bpil_Depot_Master>();
//	if(depot!=null && depot!= "") {
//		dml= (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where scheme_id="+depot);
//		System.out.println(" depot :"+dml.get(0).getAppl_depot_code());
//	    String a[]=dml.get(0).getAppl_depot_code().split(",");

//	    for(int s=0;s<a.length;s++)
//	    {
//	    System.out.println(a[s]);
			ArrayList<Bpil_Depot_Master> dml1 = (ArrayList<Bpil_Depot_Master>) hibernateTemplate.find(
					"select dm from Bpil_Depot_Master dm, Bpil_Users bu where dm.regn = bu.region_code and bu.user_id = "
							+ userid);
//	    al.add(dml1.get(0));
//	    b[s]=dml1.get(0).getDepot_name();
//	    }
//	}

			String json = null;

			json = new Gson().toJson(dml1);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// autofill grid scheme analysis report

	@RequestMapping("/loadschemereport")
	public ModelAndView loadschemereport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME,REGN,DEPOT,TERR,TSI,CUSTOMER,SITE,DLR_NAME,CLUB,"
				+ "SCHEME_SECTION,UOM,PRD PRODUCT,MIN_TGT TARGET,ACH ACHIVED,PENDING,RW_DT,STATUS,DES REARD_TYPE,TOT REWARD_AMT"
				+ " FROM (SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,"
				+ "QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,"
				+ "QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||"
				+ "RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,"
				+ "RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "QUAL, "
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE"
				+ "||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,"
				+ "RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_DESCRIPTION DES,RTBL.REWARD_TOTAL TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "AND RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' " + "AND UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,"
				+ "RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "RW "
				+ "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,"
				+ "RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,'QUALIFICATION_ONLY' DES,0 TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,"
				+ "1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "'QUALIFICATION_ONLY' DES,0 TOT,RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K<>RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("SchemeAnalysisReport");
	}

	@RequestMapping("/loadcustomerschemereport")
	public ModelAndView loadcustomerschemereport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "dlr_name") String dlr_name, ModelMap map, Model model, HttpServletRequest request) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME, REGN, DEPOT, TERR, TSI, CUSTOMER, SITE, DLR_NAME, CLUB,"
				+ "    SCHEME_SECTION, UOM, PRD PRODUCT, MIN_TGT TARGET, ACH ACHIVED, PENDING, RW_DT, STATUS, DES REARD_TYPE, TOT REWARD_AMT"
				+ " FROM   (SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT, QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE,"
				+ "     QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT, QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT,"
				+ "     QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "   FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                        BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                      RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                    RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                  RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + " AND    BSM.ACTIVE_FLAG='Active'"
				+ " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "     AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "   ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME,"
				+ "          RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + " QUAL, "
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ " BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME,"
				+ "         RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "       RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "     RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_DESCRIPTION DES, RTBL.REWARD_TOTAL TOT,"
				+ "   RTBL.OPA_SCH_AN_REWARD_ID PK2 " + " FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "      BSAT.BPIL_SCHEME_MASTER BSM " + " WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ " AND    BSM.ACTIVE_FLAG='Active' " + " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                     AND    RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' "
				+ "                   AND    UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION'"
				+ "                 ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE,"
				+ "                        RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "           RW " + " WHERE  QUAL.P_K=RW.P_K" + "        AND    QUAL.PK2=RW.PK2" + "      UNION ALL"
				+ "            SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                   QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                 QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "        FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                             RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                           RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                         RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                       RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                     (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ"
				+ "  FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "                 BSAT.BPIL_SCHEME_MASTER BSM"
				+ "        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + "      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                AND  RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                        AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                      AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                    AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "                  ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                         RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "             QUAL,"
				+ "            (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                  BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "              RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "            RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT,"
				+ "          RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS, 'QUALIFICATION_ONLY' DES, 0 TOT,"
				+ "        RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "                           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                 BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                    AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                  AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "              AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "            ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                   RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               RW" + "              WHERE  QUAL.P_K=RW.P_K" + "    AND    QUAL.PK2=RW.PK2 "
				+ "  UNION ALL " + "        SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                       QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                     QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "  FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                       BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                     RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                   RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                 RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "               (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "                FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "                      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                    AND    BSM.ACTIVE_FLAG='Active' " + "        AND    RTBL.REWARD_DLR_CODE = '"
				+ dlr_name + "'" + "      AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "              AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "            AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "          ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                 RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               QUAL,"
				+ "                        (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                              BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                            RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                        RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                      RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                    'QUALIFICATION_ONLY' DES, 0 TOT, RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                  BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                         WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                       AND    BSM.ACTIVE_FLAG='Active' "
				+ "                     AND     RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                   AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                 AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "               AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "             ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                    RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "       RW " + "        WHERE  QUAL.P_K<>RW.P_K" + "   AND    QUAL.PK2=RW.PK2 "
				+ "  ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		model.addAttribute("Info_grid", dml);

		model.addAttribute("dealer_code", dlr_name);
		model.addAttribute("deptnm", deptnm);

		return new ModelAndView("CustomerSchAnalysisReport");
	}

	@RequestMapping("/loaddepocustomerschemereport")
	public ModelAndView loaddepocustomerschemereport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "dlr_name") String dlr_name, ModelMap map, Model model, HttpServletRequest request) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME, REGN, DEPOT, TERR, TSI, CUSTOMER, SITE, DLR_NAME, CLUB,"
				+ "    SCHEME_SECTION, UOM, PRD PRODUCT, MIN_TGT TARGET, ACH ACHIVED, PENDING, RW_DT, STATUS, DES REARD_TYPE, TOT REWARD_AMT"
				+ " FROM   (SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT, QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE,"
				+ "     QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT, QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT,"
				+ "     QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "   FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                        BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                      RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                    RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                  RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + " AND    BSM.ACTIVE_FLAG='Active'"
				+ " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "     AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "   ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME,"
				+ "          RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + " QUAL, "
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ " BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME,"
				+ "         RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "       RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "     RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_DESCRIPTION DES, RTBL.REWARD_TOTAL TOT,"
				+ "   RTBL.OPA_SCH_AN_REWARD_ID PK2 " + " FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "      BSAT.BPIL_SCHEME_MASTER BSM " + " WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ " AND    BSM.ACTIVE_FLAG='Active' " + " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                     AND    RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' "
				+ "                   AND    UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION'"
				+ "                 ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE,"
				+ "                        RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "           RW " + " WHERE  QUAL.P_K=RW.P_K" + "        AND    QUAL.PK2=RW.PK2" + "      UNION ALL"
				+ "            SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                   QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                 QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "        FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                             RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                           RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                         RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                       RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                     (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ"
				+ "  FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "                 BSAT.BPIL_SCHEME_MASTER BSM"
				+ "        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + "      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                AND  RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                        AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                      AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                    AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "                  ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                         RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "             QUAL,"
				+ "            (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                  BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "              RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "            RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT,"
				+ "          RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS, 'QUALIFICATION_ONLY' DES, 0 TOT,"
				+ "        RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "                           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                 BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                    AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                  AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "              AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "            ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                   RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               RW" + "              WHERE  QUAL.P_K=RW.P_K" + "    AND    QUAL.PK2=RW.PK2 "
				+ "  UNION ALL " + "        SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                       QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                     QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "  FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                       BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                     RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                   RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                 RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "               (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "                FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "                      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                    AND    BSM.ACTIVE_FLAG='Active' " + "        AND    RTBL.REWARD_DLR_CODE = '"
				+ dlr_name + "'" + "      AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "              AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "            AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "          ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                 RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               QUAL,"
				+ "                        (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                              BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                            RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                        RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                      RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                    'QUALIFICATION_ONLY' DES, 0 TOT, RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                  BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                         WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                       AND    BSM.ACTIVE_FLAG='Active' "
				+ "                     AND     RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                   AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                 AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "               AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "             ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                    RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "       RW " + "        WHERE  QUAL.P_K<>RW.P_K" + "   AND    QUAL.PK2=RW.PK2 "
				+ "  ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		model.addAttribute("Info_grid", dml);

		model.addAttribute("dealer_code", dlr_name);
		model.addAttribute("deptnm", deptnm);

		return new ModelAndView("DepoCustomerSchAnalysisReport");
	}

	@RequestMapping("/loaddeposchemereport")
	public ModelAndView loaddeposchemereport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME,REGN,DEPOT,TERR,TSI,CUSTOMER,SITE,DLR_NAME,CLUB,"
				+ "SCHEME_SECTION,UOM,PRD PRODUCT,MIN_TGT TARGET,ACH ACHIVED,PENDING,RW_DT,STATUS,DES REARD_TYPE,TOT REWARD_AMT"
				+ " FROM (SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,"
				+ "QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,"
				+ "QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||"
				+ "RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' " + "ORDER BY BSM.SCHEME_BUSINESS_LINE,"
				+ "BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,"
				+ "RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "QUAL, "
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE"
				+ "||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,"
				+ "RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_DESCRIPTION DES,RTBL.REWARD_TOTAL TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "AND RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' " + "AND UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,"
				+ "RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "RW "
				+ "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,"
				+ "RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,'QUALIFICATION_ONLY' DES,0 TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,"
				+ "1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "'QUALIFICATION_ONLY' DES,0 TOT,RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//					+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K<>RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("depoSchemeAnalysisReport");
	}

	// autofill grid for scheme analysis

	@RequestMapping("/loadoutputdata")
	public ModelAndView loadoutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' " 
//				 +" AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER "
//				 + " WHERE DEPOT_CODE='"+deptnm+"'), REWARD_DLR_DEPOT) order by OPA_SCH_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_SCH_AN_DEALER_ID, OPA_SCH_AN_TSI_ID, OPA_SCH_AN_SUP_ID, OPA_SCH_AN_DM_ID, "
//				+ "OPA_SCH_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

//		SessionFactory sessionFactory = hibernateTemplate.getSessionFactory();
//		Session session = sessionFactory.openSession();
//		Transaction tx = null;
//		List<Bpil_Opa_Sch_Analysis_Rw> dmlh = new ArrayList<>();
//		try {
//			tx = session.beginTransaction();
//			int schnm1 = Integer.parseInt(schnm);
//			System.out.println("deptnm " + deptnm);
//
//			if (deptnm != null && deptnm != "") {
//				String query = "from Bpil_Opa_Sch_Analysis_Rw b where scheme_id = :schnm AND STR(b.Opa_Sch_An_Dealer_Id) like :deptnm OR STR(b.Opa_Sch_An_Tsi_Id) like :deptnm OR STR(b.Opa_Sch_An_Sup_Id) like :deptnm OR STR(b.Opa_Sch_An_Dm_Id) like :deptnm order by Rw_Sort, Opa_Sch_An_Reward_Id";
//				Query sql = session.createQuery(query);
//				sql.setParameter("schnm", schnm1);
//				sql.setParameter("deptnm", "%" + deptnm);
//
//				dmlh = sql.list();
//			}else{
//				String query = "from Bpil_Opa_Sch_Analysis_Rw b where scheme_id = :schnm order by Rw_Sort, Opa_Sch_An_Reward_Id";
//				Query sql = session.createQuery(query);
//				sql.setParameter("schnm", schnm1);
//
//				dmlh = sql.list();
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		} finally {
//			tx.commit();
//			session.close();
//			System.gc();
//		}

		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id= "+scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("SchemeAnalysis");
	}

	@RequestMapping("/downloadloadoutputdata")
	public ModelAndView downloadloadoutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' " 
//				 +" AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER "
//				 + " WHERE DEPOT_CODE='"+deptnm+"'), REWARD_DLR_DEPOT) order by OPA_SCH_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_SCH_AN_DEALER_ID, OPA_SCH_AN_TSI_ID, OPA_SCH_AN_SUP_ID, OPA_SCH_AN_DM_ID, "
//				+ "OPA_SCH_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

//		SessionFactory sessionFactory = hibernateTemplate.getSessionFactory();
//		Session session = sessionFactory.openSession();
//		Transaction tx = null;
//		List<Bpil_Opa_Sch_Analysis_Rw> dmlh = new ArrayList<>();
//		try {
//			tx = session.beginTransaction();
//			int schnm1 = Integer.parseInt(schnm);
//			System.out.println("deptnm " + deptnm);
//
//			if (deptnm != null && deptnm != "") {
//				String query = "from Bpil_Opa_Sch_Analysis_Rw b where scheme_id = :schnm AND STR(b.Opa_Sch_An_Dealer_Id) like :deptnm OR STR(b.Opa_Sch_An_Tsi_Id) like :deptnm OR STR(b.Opa_Sch_An_Sup_Id) like :deptnm OR STR(b.Opa_Sch_An_Dm_Id) like :deptnm order by Rw_Sort, Opa_Sch_An_Reward_Id";
//				Query sql = session.createQuery(query);
//				sql.setParameter("schnm", schnm1);
//				sql.setParameter("deptnm", "%" + deptnm);
//
//				dmlh = sql.list();
//			}else{
//				String query = "from Bpil_Opa_Sch_Analysis_Rw b where scheme_id = :schnm order by Rw_Sort, Opa_Sch_An_Reward_Id";
//				Query sql = session.createQuery(query);
//				sql.setParameter("schnm", schnm1);
//
//				dmlh = sql.list();
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		} finally {
//			tx.commit();
//			session.close();
//			System.gc();
//		}

		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id="+ scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			// generate scheme analysis report in excel
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

			XSSFFont font = workbook.createFont();
			font.setFontHeightInPoints((short) 12);
			font.setBold(true);

			CellStyle cellstyle = workbook.createCellStyle();
			CellStyle cellstyle1 = workbook.createCellStyle();
			cellstyle.setWrapText(true);
			cellstyle.setFont(font);

			XSSFRow row = spreadsheet.createRow(0);
			XSSFCell cell;

			cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

			cell = row.createCell(0);
			cell.setCellValue("Region");
			cellstyle.setLocked(true);
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(0, 3200);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

			cell = row.createCell(1);
			cell.setCellValue("State");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(1, 2500);

			cell = row.createCell(2);
			cell.setCellValue("Depot");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(2, 4000);

			cell = row.createCell(3);
			cell.setCellValue("Sup Code");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(3, 1500);

			cell = row.createCell(4);
			cell.setCellValue("Sup Name");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(4, 5000);

			cell = row.createCell(5);
			cell.setCellValue("Terr");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(5, 1500);

			cell = row.createCell(6);
			cell.setCellValue("Terr Name");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(6, 4000);

			cell = row.createCell(7);
			cell.setCellValue("A/C No.");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(7, 3000);

			cell = row.createCell(8);
			cell.setCellValue("Bill To");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(8, 2000);

			cell = row.createCell(9);
			cell.setCellValue("Dlr Cat");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(9, 2200);

			cell = row.createCell(10);
			cell.setCellValue("Cust Type");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(10, 2000);

			cell = row.createCell(11);
			cell.setCellValue("A/C Name");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);

			cell = row.createCell(12);
			cell.setCellValue("Reward Section");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(12, 6000);

			cell = row.createCell(13);
			cell.setCellValue("Reward Type");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(13, 3000);

			cell = row.createCell(14);
			cell.setCellValue("Product");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(14, 3000);

			cell = row.createCell(15);
			cell.setCellValue("Unit");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(15, 3000);

			cell = row.createCell(16);
			cell.setCellValue("Reward Date");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(16, 3000);

			cell = row.createCell(17);
			cell.setCellValue("LY");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(17, 1500);

			cell = row.createCell(18);
			cell.setCellValue("Target");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(18, 1500);

			cell = row.createCell(19);
			cell.setCellValue("TY");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(19, 1500);

			cell = row.createCell(20);
			cell.setCellValue("TGT Pending");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(20, 2500);

			cell = row.createCell(21);
			cell.setCellValue("Status");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(21, 2000);

			cell = row.createCell(22);
			cell.setCellValue("Add PTS");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(22, 1000);

			cell = row.createCell(23);
			cell.setCellValue("Reward Desc");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(23, 3500);

			cell = row.createCell(24);
			cell.setCellValue("Reward");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(24, 2000);

			int j = 1;

			Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = dml.iterator();
			while (itr.hasNext()) {
				Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

				row = spreadsheet.createRow(j);

				XSSFCellStyle style = workbook.createCellStyle();
				if (ex.getReward_color() != null && ex.getReward_color() != "") {
					int r = Integer.valueOf(ex.getReward_color().substring(1, 3), 16);
					int g = Integer.valueOf(ex.getReward_color().substring(3, 5), 16);
					int b = Integer.valueOf(ex.getReward_color().substring(5, 7), 16);

					style.setFillForegroundColor(new XSSFColor(new java.awt.Color(r, g, b)));
					style.setFillPattern(CellStyle.SOLID_FOREGROUND);
				}

				cell = row.createCell(0);
				cell.setCellValue(ex.getRegn());
				cell.setCellStyle(style);

				cell = row.createCell(1);
				cell.setCellValue(ex.getState());
				cell.setCellStyle(style);

				cell = row.createCell(2);
				cell.setCellValue(ex.getDepot());
				cell.setCellStyle(style);

				cell = row.createCell(3);
				cell.setCellValue(ex.getSup_code());
				cell.setCellStyle(style);

				cell = row.createCell(4);
				cell.setCellValue(ex.getSup_name());
				cell.setCellStyle(style);

				cell = row.createCell(5);
				cell.setCellValue(ex.getTerr_code());
				cell.setCellStyle(style);

				cell = row.createCell(6);
				cell.setCellValue(ex.getTerr_name());
				cell.setCellStyle(style);

				cell = row.createCell(7);
				cell.setCellValue(ex.getDlr_ac_no());
				cell.setCellStyle(style);

				cell = row.createCell(8);
				cell.setCellValue(ex.getDlr_bill_to());
				cell.setCellStyle(style);

				cell = row.createCell(9);
				cell.setCellValue(ex.getDlr_cat());
				cell.setCellStyle(style);

				cell = row.createCell(10);
				cell.setCellValue(ex.getDlr_type());
				cell.setCellStyle(style);

				cell = row.createCell(11);
				cell.setCellValue(ex.getDlr_name());
				cell.setCellStyle(style);

				cell = row.createCell(12);
				cell.setCellValue(ex.getReward_section());
				cell.setCellStyle(style);

				cell = row.createCell(13);
				cell.setCellValue(ex.getReward_type());
				cell.setCellStyle(style);

				cell = row.createCell(14);
				cell.setCellValue(ex.getProduct());
				cell.setCellStyle(style);

				cell = row.createCell(15);
				cell.setCellValue(ex.getUnit());
				cell.setCellStyle(style);

				cell = row.createCell(16);
				cell.setCellValue(ex.getReward_date1());
				cell.setCellStyle(style);

				cell = row.createCell(17);
				cell.setCellValue(ex.getReward_ly());
				cell.setCellStyle(style);

				cell = row.createCell(18);
				cell.setCellValue(ex.getTarget());
				cell.setCellStyle(style);

				cell = row.createCell(19);
				cell.setCellValue(ex.getReward_ty());
				cell.setCellStyle(style);

				cell = row.createCell(20);
				cell.setCellValue(ex.getNext_tgt_pending());
				cell.setCellStyle(style);

				cell = row.createCell(21);
				cell.setCellValue(ex.getStatus());
				cell.setCellStyle(style);

				cell = row.createCell(22);
				cell.setCellValue(ex.getAdditional());
				cell.setCellStyle(style);

				cell = row.createCell(23);
				cell.setCellValue(ex.getReward_description());
				cell.setCellStyle(style);

				cell = row.createCell(24);
				cell.setCellValue(ex.getReward_total());
				cell.setCellStyle(style);

				j++;
			}

			try {
				// to upload excel file
				String filename = "Scheme Analysis Report.xlsx";
				String filepath = request.getServletContext().getRealPath("/ruledocs");
				System.out.println(filepath);

				File exportExcelfile = new File(filepath + "/" + filename);
				exportExcelfile.createNewFile();
				System.out.println(exportExcelfile.getAbsolutePath());
				String exportExcelfilepath = exportExcelfile.getAbsolutePath();
				FileInputStream in = new FileInputStream(exportExcelfile);
				FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//   		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

				workbook.write(out);
				out.close();

				// to download excel file
				int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
				response.setContentType("text/html");
				PrintWriter out1 = response.getWriter();
				String fileName = "Reward Analysis Report.xlsx";
				response.setContentType("APPLICATION/OCTET-STREAM");
				response.setContentLengthLong(exportExcelfile.length());
				response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//             response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//             FileCopyUtils.copy(in, response.getOutputStream());

				int i;
//             FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//             FileInputStream file = new FileInputStream(exportExcelfilepath);
				while ((i = in.read()) != -1) {
					out1.write(i);
				}

				out1.close();

				exportExcelfile.delete();

				in.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("SchemeAnalysis");
	}

	@RequestMapping("/loadtsioutputdata")
	public ModelAndView loadtsioutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' " 
//				 +" AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER "
//				 + " WHERE DEPOT_CODE='"+deptnm+"'), REWARD_DLR_DEPOT) order by OPA_SCH_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_SCH_AN_DEALER_ID, OPA_SCH_AN_TSI_ID, OPA_SCH_AN_SUP_ID, OPA_SCH_AN_DM_ID, "
//				+ "OPA_SCH_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Tsi_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Tsi_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Tsi_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Tsi_Analysis_Rw aContact = new Bpil_Opa_Sch_Tsi_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}
		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("TSISchemeAnalysis");
	}

	@RequestMapping("/loadfinoutputdata")
	public ModelAndView loadfinoutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_FIN_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' " 
//				 +" AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER "
//				 + " WHERE DEPOT_CODE='"+deptnm+"'), REWARD_DLR_DEPOT) order by OPA_FIN_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_FIN_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_FIN_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_FIN_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_FIN_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_FIN_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_FIN_AN_DEALER_ID, OPA_FIN_AN_TSI_ID, OPA_FIN_AN_SUP_ID, OPA_FIN_AN_DM_ID, "
//				+ "OPA_FIN_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_FIN_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_FIN_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_FIN_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_FIN_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_FIN_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_FIN_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Fin_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Fin_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Fin_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Fin_Analysis_Rw aContact = new Bpil_Opa_Fin_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_FIN_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_FIN_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("FinancialAnalysis");
	}

	@RequestMapping("/loadtsifinoutputdata")
	public ModelAndView loadtsifinoutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_FIN_TSI_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' " 
//				 +" AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER "
//				 + " WHERE DEPOT_CODE='"+deptnm+"'), REWARD_DLR_DEPOT) order by OPA_FIN_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_FIN_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_FIN_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_FIN_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_FIN_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_FIN_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_FIN_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_FIN_AN_DEALER_ID, OPA_FIN_AN_TSI_ID, OPA_FIN_AN_SUP_ID, OPA_FIN_AN_DM_ID, "
//				+ "OPA_FIN_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_FIN_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_FIN_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_FIN_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_FIN_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_FIN_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_FIN_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_FIN_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Fin_Tsi_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Fin_Tsi_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Fin_Tsi_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Fin_Tsi_Analysis_Rw aContact = new Bpil_Opa_Fin_Tsi_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_FIN_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_FIN_TSI_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("TSIFinancialAnalysis");
	}

	@RequestMapping("/loaddepooutputdata")
	public ModelAndView loaddepooutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+ "AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"') order by OPA_SCH_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_SCH_AN_DEALER_ID, OPA_SCH_AN_TSI_ID, OPA_SCH_AN_SUP_ID, OPA_SCH_AN_DM_ID, "
//				+ "OPA_SCH_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' " + " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("depoSchemeAnalysis");
	}

	@RequestMapping("/tsiloadoutputdata")
	public ModelAndView tsiloaddepooutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+ "AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"') order by OPA_SCH_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_SCH_AN_DEALER_ID, OPA_SCH_AN_TSI_ID, OPA_SCH_AN_SUP_ID, OPA_SCH_AN_DM_ID, "
//				+ "OPA_SCH_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		int user_id = (Integer) request.getSession().getAttribute("userid");

		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW, BPIL_USERS bu WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ "AND REWARD_DLR_TERR_CODE = bu.TERR_CODE " + "AND REWARD_SECTION <> 'FNL_SCH_EXCP' "
				+ " AND bu.USER_ID = " + user_id + " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("TSIUserSchemeAnalysis");
	}

	@RequestMapping("/loadregnoutputdata")
	public ModelAndView loadregnoutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
		Bpil_Users user = schememasterdao.getUserById(user_id);

		String sql = "SELECT * FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND REWARD_DLR_REGN = '" + user.getRegion_code() + "'"
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' " + " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("regnSchemeAnalysis");
	}

	@RequestMapping("/loaddepotsioutputdata")
	public ModelAndView loaddepotsioutputdata(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" "
//				+ "AND DEPOT= (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+ "AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"') order by OPA_SCH_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_SCH_AN_DEALER_ID, OPA_SCH_AN_TSI_ID, OPA_SCH_AN_SUP_ID, OPA_SCH_AN_DM_ID, "
//				+ "OPA_SCH_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_SCH_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_SCH_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_SCH_AN_DM_ID,-3)) ) "
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' " + " ORDER BY RW_SORT, OPA_SCH_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Sch_Tsi_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Tsi_Analysis_Rw>() {

			@Override

//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Sch_Tsi_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Sch_Tsi_Analysis_Rw aContact = new Bpil_Opa_Sch_Tsi_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}
//				
//				
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
////				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_SCH_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_SCH_TSI_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(scheme_id);
			System.out.println("doc_line " + doc_line.size());

//		 String delete = "Delete from BPIL_OPA_SCHEME_ANALYSIS where SCHEME_ID = "+scheme_id+" AND DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 String delete = "Delete from BPIL_OPA_SCH_ANALYSIS_RW where REWARD_SCHEME_ID = "+scheme_id+" AND REWARD_DLR_DEPOT = (SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		 jdbcTemplate.update(delete);

			model.addAttribute("doc_list", doc_line);

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);
		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);

		return new ModelAndView("TSIdepoSchemeAnalysis");
	}

	// autofill grid reward analysis

	@RequestMapping("/loadrewarddata")
	public ModelAndView loadrewarddata(@RequestParam(value = "schnm") String schnm, ModelMap map, Model model,
			HttpServletRequest request) {
		int scheme_id = Integer.parseInt(schnm);

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+"");

		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = " + scheme_id + "";

		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

			@Override
			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {
				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setTerr_code(rs.getString("TERR_CODE"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setDlr_cat(rs.getString("DLR_CAT"));
				aContact.setDlr_type(rs.getString("DLR_TYPE"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setUnit(rs.getString("UNIT"));
				// aContact.setReward_date(rs.getDate("REWARD_DATE"));
				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
					try {
						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("ADDITIONAL"));
				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
				aContact.setAdjustments(rs.getFloat("ADJUSTMENTS"));
				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
				aContact.setReward_status(rs.getString("REWARD_STATUS"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				return aContact;
			}

		});

		ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
		String name = data.get(0).getScheme_name();

		String query = "update BPIL_SCHEME_MASTER set active_flag='Processed' WHERE scheme_id='" + scheme_id + "'";
		jdbcTemplate.update(query);

		model.addAttribute("Info_grid", dml);
		// model.addAttribute("deptnm",deptnm);
		model.addAttribute("schnm", name);
		model.addAttribute("scheme_id", scheme_id);

		return new ModelAndView("RewardAnalysis");
	}

	///// rewards hostory

	@RequestMapping("/historicalrewards")
	public ModelAndView historicalrewards(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		int userid = (Integer) request.getSession().getAttribute("userid");
		if (kwm_user != null) {

		}
		return new ModelAndView("HistoricalRewards");
	}

	@RequestMapping("/tsihistoricalrewards")
	public ModelAndView tsihistoricalrewards(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		int userid = (Integer) request.getSession().getAttribute("userid");
		if (kwm_user != null) {

		}
		return new ModelAndView("TSIHistoricalRewards");
	}

	// autofill grid loadhistoryreward

	@RequestMapping("/loadhistoryreward")
	public ModelAndView loadhistoryreward(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" AND DEPOT=(SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+ "AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME "
//				+ "FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"'), "
//					+ "REWARD_DLR_DEPOT)  order by OPA_RW_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_RW_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_RW_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_RW_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_RW_AN_DEALER_ID, OPA_RW_AN_TSI_ID, OPA_RW_AN_SUP_ID, OPA_RW_AN_DM_ID, "
//				+ "OPA_RW_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_RW_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_RW_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_RW_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_RW_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override
//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				//aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}			
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id="+scheme_id);
			String name = data.get(0).getScheme_name();

			System.out.println("scheme id ----------------------------------------" + scheme_id);
			System.out.println("depot---------------------------------------------" + deptnm);
			System.out.println("his :" + dml.size());

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);

		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);
		return new ModelAndView("HistoricalRewards");
	}

	@RequestMapping("/loadtsihistoryreward")
	public ModelAndView loadtsihistoryreward(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request) {

//		ArrayList<Bpil_opa_scheme_analysis> dml = (ArrayList<Bpil_opa_scheme_analysis>) hibernateTemplate.find("from Bpil_opa_scheme_analysis where scheme_id="+scheme_id+" and sch_depot='"+deptnm+"'");

//		String sql = "SELECT * FROM BPIL_OPA_SCHEME_ANALYSIS  WHERE  SCHEME_ID = "+scheme_id+" AND DEPOT=(SELECT DEPOT_NAME FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"')";

//		String sql = "SELECT * FROM BPIL_OPA_RW_TSI_ANALYSIS_RW  WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+ "AND REWARD_DLR_DEPOT = NVL((SELECT DEPOT_NAME "
//				+ "FROM BPIL_DEPOT_MASTER WHERE DEPOT_CODE='"+deptnm+"'), "
//					+ "REWARD_DLR_DEPOT)  order by OPA_RW_AN_REWARD_ID";

//		String sql = "SELECT * FROM BPIL_OPA_RW_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '"+schnm+"' "
//				+" AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_DEALER_ID,-3)) OR "
//				+ "SUBSTR(OPA_RW_AN_TSI_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_TSI_ID,-3)) OR "
//				+ "SUBSTR(OPA_RW_AN_SUP_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_SUP_ID,-3)) OR "
//				+ "SUBSTR(OPA_RW_AN_DM_ID,-3) = NVL('"+deptnm+"', SUBSTR(OPA_RW_AN_DM_ID,-3)) ) "
//				+" ORDER BY OPA_RW_AN_DEALER_ID, OPA_RW_AN_TSI_ID, OPA_RW_AN_SUP_ID, OPA_RW_AN_DM_ID, "
//				+ "OPA_RW_AN_REWARD_ID, REWARD_DLR_REGN, REWARD_DLR_STATE, REWARD_DLR_DEPOT, " 
//				+" REWARD_DLR_TERR_CODE, REWARD_DLR_TERR_NAME, REWARD_DLR_CODE";

		String sql = "SELECT * FROM BPIL_OPA_RW_TSI_ANALYSIS_RW WHERE  REWARD_SCHEME_ID = '" + schnm + "' "
				+ " AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3)) OR "
				+ "SUBSTR(OPA_RW_AN_TSI_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_TSI_ID,-3)) OR "
				+ "SUBSTR(OPA_RW_AN_SUP_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_SUP_ID,-3)) OR "
				+ "SUBSTR(OPA_RW_AN_DM_ID,-3) = NVL('" + deptnm + "', SUBSTR(OPA_RW_AN_DM_ID,-3)) ) "
				+ " ORDER BY RW_SORT, OPA_RW_AN_REWARD_ID";

//		List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Tsi_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Tsi_Analysis_Rw>() {

			@Override
//			public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Tsi_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//				Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Tsi_Analysis_Rw aContact = new Bpil_Opa_Rw_Tsi_Analysis_Rw();

//				aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//				aContact.setTerr_code(rs.getString("TERR_CODE"));
//				aContact.setRegn(rs.getString("REGN"));			
//				aContact.setDepot(rs.getString("DEPOT"));				
//				aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));	
//				aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));	
//				aContact.setDlr_name(rs.getString("DLR_NAME"));	
//				aContact.setDlr_cat(rs.getString("DLR_CAT"));	
//				aContact.setDlr_type(rs.getString("DLR_TYPE"));				
//				aContact.setReward_section(rs.getString("REWARD_SECTION"));
//				aContact.setReward_type(rs.getString("REWARD_TYPE"));
//				aContact.setProduct(rs.getString("PRODUCT"));
//				aContact.setUnit(rs.getString("UNIT"));
//				//aContact.setReward_date(rs.getDate("REWARD_DATE"));	
//				if(rs.getDate("REWARD_DATE")!=null)
//				{
//					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
//					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
//					aContact.setReward_date1(dateStr1);	
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
//				}			
//				aContact.setReward_ly(rs.getInt("REWARD_LY"));
//				aContact.setReward_target(rs.getInt("REWARD_TARGET"));				
//				aContact.setReward_ty(rs.getInt("REWARD_TY"));				
//				aContact.setAdditional(rs.getInt("ADDITIONAL"));
//				aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//				aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//				aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//				aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));				
//				aContact.setReward_status(rs.getString("REWARD_STATUS"));
//				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
				aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//					try {
//						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//					try {
////						System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//					} catch (ParseException e) {
//							e.printStackTrace();
//					}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_TSI_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ schnm + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		if (schnm != null && schnm != "") {
			int scheme_id = Integer.parseInt(schnm);

			ArrayList<New_Scheme_mstr> data = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id=?", scheme_id);
			String name = data.get(0).getScheme_name();

			System.out.println("scheme id ----------------------------------------" + scheme_id);
			System.out.println("depot---------------------------------------------" + deptnm);
			System.out.println("his :" + dml.size());

			model.addAttribute("Info_grid", dml);

			model.addAttribute("LastRefresh", LastRefresh);

			model.addAttribute("schnm", name);

		}
		model.addAttribute("deptnm", deptnm);
		model.addAttribute("scheme_id", schnm);
		return new ModelAndView("TSIHistoricalRewards");
	}

	// export scheme analysis report
	@RequestMapping(value = "/exportcustomerreport")
	public ModelAndView exportcustomerreport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "dlr_name") String dlr_name, ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME, REGN, DEPOT, TERR, TSI, CUSTOMER, SITE, DLR_NAME, CLUB,"
				+ "    SCHEME_SECTION, UOM, PRD PRODUCT, MIN_TGT TARGET, ACH ACHIVED, PENDING, RW_DT, STATUS, DES REARD_TYPE, TOT REWARD_AMT"
				+ " FROM   (SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT, QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE,"
				+ "     QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT, QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT,"
				+ "     QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "   FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                        BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                      RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                    RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                  RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + " AND    BSM.ACTIVE_FLAG='Active'"
				+ " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "     AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "   ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME,"
				+ "          RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + " QUAL, "
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ " BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME,"
				+ "         RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "       RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "     RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_DESCRIPTION DES, RTBL.REWARD_TOTAL TOT,"
				+ "   RTBL.OPA_SCH_AN_REWARD_ID PK2 " + " FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "      BSAT.BPIL_SCHEME_MASTER BSM " + " WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ " AND    BSM.ACTIVE_FLAG='Active' " + " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                     AND    RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' "
				+ "                   AND    UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION'"
				+ "                 ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE,"
				+ "                        RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "           RW " + " WHERE  QUAL.P_K=RW.P_K" + "        AND    QUAL.PK2=RW.PK2" + "      UNION ALL"
				+ "            SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                   QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                 QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "        FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                             RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                           RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                         RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                       RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                     (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ"
				+ "  FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "                 BSAT.BPIL_SCHEME_MASTER BSM"
				+ "        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + "      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                AND  RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                        AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                      AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                    AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "                  ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                         RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "             QUAL,"
				+ "            (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                  BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "              RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "            RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT,"
				+ "          RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS, 'QUALIFICATION_ONLY' DES, 0 TOT,"
				+ "        RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "                           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                 BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                    AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                  AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "              AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "            ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                   RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               RW" + "              WHERE  QUAL.P_K=RW.P_K" + "    AND    QUAL.PK2=RW.PK2 "
				+ "  UNION ALL " + "        SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                       QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                     QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "  FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                       BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                     RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                   RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                 RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "               (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "                FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "                      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                    AND    BSM.ACTIVE_FLAG='Active' " + "        AND    RTBL.REWARD_DLR_CODE = '"
				+ dlr_name + "'" + "      AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "              AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "            AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "          ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                 RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               QUAL,"
				+ "                        (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                              BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                            RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                        RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                      RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                    'QUALIFICATION_ONLY' DES, 0 TOT, RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                  BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                         WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                       AND    BSM.ACTIVE_FLAG='Active' "
				+ "                     AND     RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                   AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                 AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "               AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "             ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                    RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "       RW " + "        WHERE  QUAL.P_K<>RW.P_K" + "   AND    QUAL.PK2=RW.PK2 "
				+ "  ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Customer Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("ML");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("SCHEME_ID");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("SCHEME_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("REGN");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TSI");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("CUSTOMER");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("SITE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CLUB");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("SCHEME_SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 8000);

		cell = row.createCell(12);
		cell.setCellValue("UOM");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 2000);

		cell = row.createCell(13);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("ACHIEVED");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 3000);

		cell = row.createCell(17);
		cell.setCellValue("RW_DT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 4000);

		cell = row.createCell(18);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 2500);

		cell = row.createCell(19);
		cell.setCellValue("REWARD_TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 6000);

		cell = row.createCell(20);
		cell.setCellValue("REWARD_AMT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = dml.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getMl());

			cell = row.createCell(1);
			cell.setCellValue(ex.getSchemeId());

			cell = row.createCell(2);
			cell.setCellValue(ex.getScheme_name());

			cell = row.createCell(3);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(4);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTsi());

			cell = row.createCell(7);
			cell.setCellValue(ex.getCustomer());

			cell = row.createCell(8);
			cell.setCellValue(ex.getSite());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(10);
			cell.setCellValue(ex.getClub());

			cell = row.createCell(11);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(12);
			cell.setCellValue(ex.getUom());

			cell = row.createCell(13);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(14);
			cell.setCellValue(ex.getTarget());

			cell = row.createCell(15);
			cell.setCellValue(ex.getAchieved());

			cell = row.createCell(16);
			cell.setCellValue(ex.getPending());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_date1());

			cell = row.createCell(18);
			cell.setCellValue(ex.getStatus());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(20);
			cell.setCellValue(ex.getReward_amt());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Customer Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			String downloadType = "EXCEL";
			if (downloadType.equals("PDF")) {

//			String filename1 = "Customer Scheme Analysis Report.pdf";
//			String filepath1 = request.getServletContext().getRealPath("/ruledocs");
//			FileInputStream filecontent = new FileInputStream(new File(filepath + "/" + filename));
//		    FileOutputStream out1 = new FileOutputStream(new File(filepath1 + "/" + filename1));
//		    File exportExcelfile1 = new File(filepath1 + "/" + filename1);
//		    HSSFWorkbook my_xls_workbook = null;
//		    HSSFSheet my_worksheet = null;
//		    XSSFWorkbook my_xlsx_workbook = null;
//		    XSSFSheet my_worksheet_xlsx = null;
//		    Document document = new Document(PageSize.ARCH_E, 0, 0, 0, 0);
//		    PdfWriter writer = PdfWriter.getInstance(document, out1);
//		    document.open();
//		    PdfDestination magnify = null;
//		    float magnifyOpt = (float) 70.0;
//		    magnify = new PdfDestination(PdfDestination.XYZ, -1, -1, magnifyOpt / 100);
//		    int pageNumberToOpenTo = 1;
//		    PdfAction zoom = PdfAction.gotoLocalPage(pageNumberToOpenTo, magnify, writer);
//		    writer.setOpenAction(zoom);
//		    document.addDocListener(writer);
//
//		    Iterator<Row> rowIterator = null;
//		    int maxColumn = 0;
//		   
//		        try {
//		            my_xlsx_workbook = new XSSFWorkbook(filecontent);
//		            my_worksheet_xlsx = my_xlsx_workbook.getSheetAt(0);
//		            rowIterator = my_worksheet_xlsx.iterator();
//		            maxColumn = my_worksheet_xlsx.getRow(0).getLastCellNum();
//		        } catch (IOException ex) {
//		            Logger.getLogger(XlsxToPdfConverterTwo.class.getName()).log(Level.SEVERE, null, ex);
//		        }
//
//		    PdfPTable my_table = new PdfPTable(maxColumn);
//		    my_table.setHorizontalAlignment(Element.ALIGN_CENTER);
//		    my_table.setWidthPercentage(100);
//		    my_table.setSpacingBefore(0f);
//		    my_table.setSpacingAfter(0f);
//		    PdfPCell table_cell;
//		    while (rowIterator.hasNext()) {
//		        Row row1 = rowIterator.next();
//		        Iterator<Cell> cellIterator = row1.cellIterator();
//		        while (cellIterator.hasNext()) {
//		            Cell cell1 = cellIterator.next(); //Fetch CELL
//		            switch (cell1.getCellType()) { //Identify CELL type
//		                case Cell.CELL_TYPE_STRING:
//		                    //Push the data from Excel to PDF Cell
//		                    table_cell = new PdfPCell(new Phrase(cell1.getStringCellValue()));
//		                    if (row.getRowNum() == 0) {
//		                        table_cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
//		                        table_cell.setBorderColor(BaseColor.BLACK);
//		                    }
//		                    my_table.addCell(table_cell);
//		                    break;
//		            }
//		        }
//		    }
//		    document.add(my_table);
//		    
//		    int filelen = Integer.parseInt(Long.toString(exportExcelfile1.length()));
//			  response.setContentType("text/html");
//			  PrintWriter out2 = response.getWriter();
//	          String fileName = "Customer Scheme Analysis Report.pdf";
//	          response.setContentType("APPLICATION/PDF");
//	          response.setContentLengthLong(exportExcelfile1.length());
//	          response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile1.getName() + "\"");
//	          
////	          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");
//	          
////	          FileCopyUtils.copy(in, response.getOutputStream());
//
//	          int i;
////	          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
////	          FileInputStream file = new FileInputStream(exportExcelfilepath);
//	          while ((i = in.read()) != -1) {
//	             out2.write(i);
//	          }
//	         
//	          out2.close();
//	          in.close();
//		    
//		    document.close();
//		    System.out.println("Excel file converted to PDF successfully");

			} else if (downloadType.equals("EXCEL")) {
				// to download excel file
				int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
				response.setContentType("text/html");
				PrintWriter out1 = response.getWriter();
				String fileName = "Customer Scheme Analysis Report.xlsx";
				response.setContentType("APPLICATION/OCTET-STREAM");
				response.setContentLengthLong(exportExcelfile.length());
				response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	          FileCopyUtils.copy(in, response.getOutputStream());

				int i;
//	          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	          FileInputStream file = new FileInputStream(exportExcelfilepath);
				while ((i = in.read()) != -1) {
					out1.write(i);
				}

				out1.close();

				exportExcelfile.delete();

				in.close();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("CustomerSchAnalysisReport");
	}

	// export scheme analysis report
	@RequestMapping(value = "/exportdepocustomerreport")
	public ModelAndView exportdepocustomerreport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "dlr_name") String dlr_name, ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME, REGN, DEPOT, TERR, TSI, CUSTOMER, SITE, DLR_NAME, CLUB,"
				+ "    SCHEME_SECTION, UOM, PRD PRODUCT, MIN_TGT TARGET, ACH ACHIVED, PENDING, RW_DT, STATUS, DES REARD_TYPE, TOT REWARD_AMT"
				+ " FROM   (SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT, QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE,"
				+ "     QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT, QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT,"
				+ "     QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "   FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                        BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                      RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                    RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                  RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + " AND    BSM.ACTIVE_FLAG='Active'"
				+ " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "     AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "   ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME,"
				+ "          RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + " QUAL, "
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ " BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME,"
				+ "         RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "       RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "     RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_DESCRIPTION DES, RTBL.REWARD_TOTAL TOT,"
				+ "   RTBL.OPA_SCH_AN_REWARD_ID PK2 " + " FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "      BSAT.BPIL_SCHEME_MASTER BSM " + " WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ " AND    BSM.ACTIVE_FLAG='Active' " + " AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                         AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                       AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                     AND    RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' "
				+ "                   AND    UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION'"
				+ "                 ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN, RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE,"
				+ "                        RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "           RW " + " WHERE  QUAL.P_K=RW.P_K" + "        AND    QUAL.PK2=RW.PK2" + "      UNION ALL"
				+ "            SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                   QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                 QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "        FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                             RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                           RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                         RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                       RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                     (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ"
				+ "  FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "                 BSAT.BPIL_SCHEME_MASTER BSM"
				+ "        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID" + "      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                AND  RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                        AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                      AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "                    AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "                  ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                         RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "             QUAL,"
				+ "            (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                  BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "              RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "            RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT,"
				+ "          RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS, 'QUALIFICATION_ONLY' DES, 0 TOT,"
				+ "        RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "                           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                 BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                        WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                      AND    BSM.ACTIVE_FLAG='Active' "
				+ "                    AND    RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                  AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "              AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "            ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                   RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               RW" + "              WHERE  QUAL.P_K=RW.P_K" + "    AND    QUAL.PK2=RW.PK2 "
				+ "  UNION ALL " + "        SELECT QUAL.ML, QUAL.SCH_CODE, QUAL.SCH_NAME, QUAL.REGN, QUAL.DEPOT,"
				+ "                       QUAL.TERR, QUAL.TSI, QUAL.CUSTOMER, QUAL.SITE, QUAL.DLR_NAME, QUAL.CLUB, QUAL.SCHEME_SECTION, QUAL.UOM, QUAL.PRD, QUAL.MIN_TGT,"
				+ "                     QUAL.ACH, QUAL.PENDING, RW.DES, RW.TOT, QUAL.Q_SEQ, QUAL.RW_DT, QUAL.STATUS "
				+ "  FROM   (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "               BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE,"
				+ "                       BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN, RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "                     RTBL.REWARD_DLR_TERR_NAME TSI, RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "                   RTBL.REWARD_DLR_CAT CLUB, RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD,"
				+ "                 RTBL.REWARD_DATE RW_DT, RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "               (RTBL.OPA_SCH_AN_REWARD_ID+10) PK2, TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "                FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                               BSAT.BPIL_SCHEME_MASTER BSM"
				+ "                      WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                    AND    BSM.ACTIVE_FLAG='Active' " + "        AND    RTBL.REWARD_DLR_CODE = '"
				+ dlr_name + "'" + "      AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "              AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "            AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "          ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                 RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "               QUAL,"
				+ "                        (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "                              BSM.SCHEME_BUSINESS_LINE ML, BSM.SCHEME_CODE SCH_CODE, BSM.SCHEME_NAME SCH_NAME, RTBL.REWARD_DLR_REGN REGN,"
				+ "                            RTBL.REWARD_DLR_DEPOT DEPOT, TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR, RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "                RTBL.REWARD_DLR_CODE CUSTOMER, RTBL.REWARD_DLR_BILL_TO SITE, RTBL.REWARD_DLR_NAME DLR_NAME, RTBL.REWARD_DLR_CAT CLUB,"
				+ "                        RTBL.REWARD_SECTION SCHEME_SECTION, RTBL.REWARD_UNIT UOM, RTBL.REWARD_PRODUCT PRD, RTBL.REWARD_DATE RW_DT,"
				+ "                      RTBL.REWARD_TARGET MIN_TGT, RTBL.REWARD_TY ACH, RTBL.REWARD_NEXT_TGT PENDING, RTBL.REWARD_Q_STATUS STATUS,"
				+ "                    'QUALIFICATION_ONLY' DES, 0 TOT, RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "           FROM   BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "                                  BSAT.BPIL_SCHEME_MASTER BSM "
				+ "                         WHERE  BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID"
				+ "                       AND    BSM.ACTIVE_FLAG='Active' "
				+ "                     AND     RTBL.REWARD_DLR_CODE = '" + dlr_name + "'"
				+ "                   AND    SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = '" + deptnm + "'"
				+ "                 AND    RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "               AND    UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION'"
				+ "             ORDER BY BSM.SCHEME_BUSINESS_LINE, BSM.SCHEME_CODE, RTBL.REWARD_DLR_REGN,"
				+ "                    RTBL.REWARD_DLR_DEPOT, RTBL.REWARD_DLR_TERR_CODE, RTBL.REWARD_DLR_TERR_NAME, RTBL.REWARD_DLR_CODE, RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "       RW " + "        WHERE  QUAL.P_K<>RW.P_K" + "   AND    QUAL.PK2=RW.PK2 "
				+ "  ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Customer Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("ML");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("SCHEME_ID");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("SCHEME_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("REGN");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TSI");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("CUSTOMER");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("SITE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CLUB");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("SCHEME_SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 8000);

		cell = row.createCell(12);
		cell.setCellValue("UOM");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 2000);

		cell = row.createCell(13);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("ACHIEVED");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 3000);

		cell = row.createCell(17);
		cell.setCellValue("RW_DT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 4000);

		cell = row.createCell(18);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 2500);

		cell = row.createCell(19);
		cell.setCellValue("REWARD_TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 6000);

		cell = row.createCell(20);
		cell.setCellValue("REWARD_AMT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = dml.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getMl());

			cell = row.createCell(1);
			cell.setCellValue(ex.getSchemeId());

			cell = row.createCell(2);
			cell.setCellValue(ex.getScheme_name());

			cell = row.createCell(3);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(4);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTsi());

			cell = row.createCell(7);
			cell.setCellValue(ex.getCustomer());

			cell = row.createCell(8);
			cell.setCellValue(ex.getSite());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(10);
			cell.setCellValue(ex.getClub());

			cell = row.createCell(11);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(12);
			cell.setCellValue(ex.getUom());

			cell = row.createCell(13);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(14);
			cell.setCellValue(ex.getTarget());

			cell = row.createCell(15);
			cell.setCellValue(ex.getAchieved());

			cell = row.createCell(16);
			cell.setCellValue(ex.getPending());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_date1());

			cell = row.createCell(18);
			cell.setCellValue(ex.getStatus());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(20);
			cell.setCellValue(ex.getReward_amt());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Customer Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//			FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Customer Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("DepoCustomerSchAnalysisReport");
	}

	// export scheme analysis report
	@RequestMapping(value = "/exportreport")
	public ModelAndView exportreport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME,REGN,DEPOT,TERR,TSI,CUSTOMER,SITE,DLR_NAME,CLUB,"
				+ "SCHEME_SECTION,UOM,PRD PRODUCT,MIN_TGT TARGET,ACH ACHIVED,PENDING,RW_DT,STATUS,DES REARD_TYPE,TOT REWARD_AMT"
				+ " FROM (SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,"
				+ "QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,"
				+ "QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||"
				+ "RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' " + "ORDER BY BSM.SCHEME_BUSINESS_LINE,"
				+ "BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,"
				+ "RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "QUAL, "
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE"
				+ "||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,"
				+ "RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_DESCRIPTION DES,RTBL.REWARD_TOTAL TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "AND RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' " + "AND UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,"
				+ "RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "RW "
				+ "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,"
				+ "RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,'QUALIFICATION_ONLY' DES,0 TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,"
				+ "1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "'QUALIFICATION_ONLY' DES,0 TOT,RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K<>RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("ML");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("SCHEME_ID");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("SCHEME_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("REGN");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TSI");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("CUSTOMER");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("SITE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CLUB");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("SCHEME_SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 8000);

		cell = row.createCell(12);
		cell.setCellValue("UOM");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 2000);

		cell = row.createCell(13);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("ACHIEVED");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 3000);

		cell = row.createCell(17);
		cell.setCellValue("RW_DT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 4000);

		cell = row.createCell(18);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 2500);

		cell = row.createCell(19);
		cell.setCellValue("REWARD_TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 6000);

		cell = row.createCell(20);
		cell.setCellValue("REWARD_AMT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = dml.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getMl());

			cell = row.createCell(1);
			cell.setCellValue(ex.getSchemeId());

			cell = row.createCell(2);
			cell.setCellValue(ex.getScheme_name());

			cell = row.createCell(3);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(4);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTsi());

			cell = row.createCell(7);
			cell.setCellValue(ex.getCustomer());

			cell = row.createCell(8);
			cell.setCellValue(ex.getSite());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(10);
			cell.setCellValue(ex.getClub());

			cell = row.createCell(11);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(12);
			cell.setCellValue(ex.getUom());

			cell = row.createCell(13);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(14);
			cell.setCellValue(ex.getTarget());

			cell = row.createCell(15);
			cell.setCellValue(ex.getAchieved());

			cell = row.createCell(16);
			cell.setCellValue(ex.getPending());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_date1());

			cell = row.createCell(18);
			cell.setCellValue(ex.getStatus());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(20);
			cell.setCellValue(ex.getReward_amt());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("SchemeAnalysisReport");
	}

	// export scheme analysis report
	@RequestMapping(value = "/exportdeporeport")
	public ModelAndView exportdeporeport(@RequestParam(value = "deptnm") String deptnm,
			@RequestParam(value = "schnm") String schnm, ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		String sql = "SELECT ML, SCH_CODE SCHEME_ID, SCH_NAME SCHEME_NAME,REGN,DEPOT,TERR,TSI,CUSTOMER,SITE,DLR_NAME,CLUB,"
				+ "SCHEME_SECTION,UOM,PRD PRODUCT,MIN_TGT TARGET,ACH ACHIVED,PENDING,RW_DT,STATUS,DES REARD_TYPE,TOT REWARD_AMT"
				+ " FROM (SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,"
				+ "QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,"
				+ "QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||"
				+ "RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' " + "ORDER BY BSM.SCHEME_BUSINESS_LINE,"
				+ "BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,"
				+ "RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "QUAL, "
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE"
				+ "||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,"
				+ "RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_DESCRIPTION DES,RTBL.REWARD_TOTAL TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "AND RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND RTBL.REWARD_SECTION NOT LIKE '%TOTAL%' " + "AND UPPER(RTBL.REWARD_TYPE) <> 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,"
				+ "RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)" + "RW "
				+ "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ "(SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,"
				+ "RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,'QUALIFICATION_ONLY' DES,0 TOT,"
				+ "RTBL.OPA_SCH_AN_REWARD_ID PK2 " + "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL,"
				+ "BSAT.BPIL_SCHEME_MASTER BSM " + "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +"AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K=RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "UNION ALL "
				+ "SELECT QUAL.ML,QUAL.SCH_CODE,QUAL.SCH_NAME,QUAL.REGN,QUAL.DEPOT,"
				+ "QUAL.TERR,QUAL.TSI,QUAL.CUSTOMER,QUAL.SITE,QUAL.DLR_NAME,QUAL.CLUB,QUAL.SCHEME_SECTION,QUAL.UOM,QUAL.PRD,QUAL.MIN_TGT,"
				+ "QUAL.ACH,QUAL.PENDING,RW.DES,RW.TOT,QUAL.Q_SEQ,QUAL.RW_DT,QUAL.STATUS "
				+ "FROM (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,"
				+ "1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,"
				+ "BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,"
				+ "RTBL.REWARD_DLR_TERR_NAME TSI,RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,"
				+ "RTBL.REWARD_DLR_CAT CLUB,RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,"
				+ "RTBL.REWARD_DATE RW_DT,RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "(RTBL.OPA_SCH_AN_REWARD_ID+10) PK2,TO_NUMBER(SUBSTR(RTBL.REWARD_CODE,INSTR(RTBL.REWARD_CODE,'_',-1)+1,2)) Q_SEQ "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "QUAL,"
				+ " (SELECT BSM.SCHEME_CODE||SUBSTR(RTBL.REWARD_DLR_DEPOT,1,3)||RTBL.REWARD_DLR_CODE||RTBL.REWARD_SECTION P_K,"
				+ "BSM.SCHEME_BUSINESS_LINE ML,BSM.SCHEME_CODE SCH_CODE,BSM.SCHEME_NAME SCH_NAME,RTBL.REWARD_DLR_REGN REGN,"
				+ "RTBL.REWARD_DLR_DEPOT DEPOT,TO_NUMBER(RTBL.REWARD_DLR_TERR_CODE) TERR,RTBL.REWARD_DLR_TERR_NAME TSI,"
				+ "RTBL.REWARD_DLR_CODE CUSTOMER,RTBL.REWARD_DLR_BILL_TO SITE,RTBL.REWARD_DLR_NAME DLR_NAME,RTBL.REWARD_DLR_CAT CLUB,"
				+ "RTBL.REWARD_SECTION SCHEME_SECTION,RTBL.REWARD_UNIT UOM,RTBL.REWARD_PRODUCT PRD,RTBL.REWARD_DATE RW_DT,"
				+ "RTBL.REWARD_TARGET MIN_TGT,RTBL.REWARD_TY ACH,RTBL.REWARD_NEXT_TGT PENDING,RTBL.REWARD_Q_STATUS STATUS,"
				+ "'QUALIFICATION_ONLY' DES,0 TOT,RTBL.OPA_SCH_AN_REWARD_ID PK2 "
				+ "FROM BSAT.BPIL_OPA_SCH_ANALYSIS_RW RTBL," + "BSAT.BPIL_SCHEME_MASTER BSM "
				+ "WHERE BSM.SCHEME_ID=RTBL.REWARD_SCHEME_ID "
				// +" AND TRUNC(BSM.END_DATE)>=TRUNC(SYSDATE) "
				+ "AND BSM.ACTIVE_FLAG='Active' "
//				+ "AND BSM.SCHEME_ID>=453 "
				+ "and RTBL.REWARD_SCHEME_ID = " + schnm + " " + "AND SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3) = NVL('"
				+ deptnm + "',SUBSTR(RTBL.OPA_SCH_AN_DEALER_ID,-3)) " + "AND RTBL.REWARD_SECTION NOT LIKE '%EXCP%' "
				+ "AND UPPER(RTBL.REWARD_TYPE) = 'QUALIFICATION' "
				+ "ORDER BY BSM.SCHEME_BUSINESS_LINE,BSM.SCHEME_CODE,RTBL.REWARD_DLR_REGN,"
				+ "RTBL.REWARD_DLR_DEPOT,RTBL.REWARD_DLR_TERR_CODE,RTBL.REWARD_DLR_TERR_NAME,RTBL.REWARD_DLR_CODE,RTBL.OPA_SCH_AN_REWARD_ID)"
				+ "RW " + "WHERE QUAL.P_K<>RW.P_K " + "AND QUAL.PK2=RW.PK2 " + "ORDER BY 1,2,3,4,5,6,7,8,9,10,11,20)";

		List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

			@Override
			public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

				aContact.setMl(rs.getString("ML"));
				aContact.setSchemeId(rs.getString("SCHEME_ID"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REGN"));
				aContact.setDepot(rs.getString("DEPOT"));
				aContact.setTerr_code(rs.getString("TERR"));
				aContact.setTsi(rs.getString("TSI"));
				aContact.setCustomer(rs.getString("CUSTOMER"));
				aContact.setSite(rs.getString("SITE"));
				aContact.setDlr_name(rs.getString("DLR_NAME"));
				aContact.setClub(rs.getString("CLUB"));
				aContact.setReward_section(rs.getString("SCHEME_SECTION"));
				aContact.setUom(rs.getString("UOM"));
				aContact.setProduct(rs.getString("PRODUCT"));
				aContact.setTarget(rs.getString("TARGET"));
				aContact.setAchieved(rs.getString("ACHIVED"));
				aContact.setPending(rs.getString("PENDING"));

				if (rs.getDate("RW_DT") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("RW_DT"));
					aContact.setReward_date1(dateStr1);
				}

				aContact.setStatus(rs.getString("STATUS"));
				aContact.setReward_type(rs.getString("REARD_TYPE"));
				aContact.setReward_amt(rs.getInt("REWARD_AMT"));

				return aContact;
			}

		});

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("ML");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 2000);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("SCHEME_ID");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 4000);

		cell = row.createCell(2);
		cell.setCellValue("SCHEME_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 8000);

		cell = row.createCell(3);
		cell.setCellValue("REGN");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2000);

		cell = row.createCell(4);
		cell.setCellValue("DEPOT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell = row.createCell(5);
		cell.setCellValue("TERR");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 2000);

		cell = row.createCell(6);
		cell.setCellValue("TSI");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("CUSTOMER");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("SITE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 3000);

		cell = row.createCell(9);
		cell.setCellValue("DLR_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 8000);

		cell = row.createCell(10);
		cell.setCellValue("CLUB");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("SCHEME_SECTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 8000);

		cell = row.createCell(12);
		cell.setCellValue("UOM");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(12, 2000);

		cell = row.createCell(13);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(14, 3000);

		cell = row.createCell(15);
		cell.setCellValue("ACHIEVED");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(15, 3000);

		cell = row.createCell(16);
		cell.setCellValue("PENDING");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(16, 3000);

		cell = row.createCell(17);
		cell.setCellValue("RW_DT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(17, 4000);

		cell = row.createCell(18);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(18, 2500);

		cell = row.createCell(19);
		cell.setCellValue("REWARD_TYPE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(19, 6000);

		cell = row.createCell(20);
		cell.setCellValue("REWARD_AMT");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(20, 4000);

		int j = 1;

		Iterator<Bpil_Opa_Sch_Analysis_Rw> itr = dml.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Sch_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getMl());

			cell = row.createCell(1);
			cell.setCellValue(ex.getSchemeId());

			cell = row.createCell(2);
			cell.setCellValue(ex.getScheme_name());

			cell = row.createCell(3);
			cell.setCellValue(ex.getRegn());

			cell = row.createCell(4);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(5);
			cell.setCellValue(ex.getTerr_code());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTsi());

			cell = row.createCell(7);
			cell.setCellValue(ex.getCustomer());

			cell = row.createCell(8);
			cell.setCellValue(ex.getSite());

			cell = row.createCell(9);
			cell.setCellValue(ex.getDlr_name());

			cell = row.createCell(10);
			cell.setCellValue(ex.getClub());

			cell = row.createCell(11);
			cell.setCellValue(ex.getReward_section());

			cell = row.createCell(12);
			cell.setCellValue(ex.getUom());

			cell = row.createCell(13);
			cell.setCellValue(ex.getProduct());

			cell = row.createCell(14);
			cell.setCellValue(ex.getTarget());

			cell = row.createCell(15);
			cell.setCellValue(ex.getAchieved());

			cell = row.createCell(16);
			cell.setCellValue(ex.getPending());

			cell = row.createCell(17);
			cell.setCellValue(ex.getReward_date1());

			cell = row.createCell(18);
			cell.setCellValue(ex.getStatus());

			cell = row.createCell(19);
			cell.setCellValue(ex.getReward_type());

			cell = row.createCell(20);
			cell.setCellValue(ex.getReward_amt());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Scheme Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Scheme Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//          response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//          FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//          FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//          FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("depoSchemeAnalysisReport");
	}

	// update data output table
	@Transactional
	@RequestMapping(value = "/updateoutput", method = RequestMethod.POST
//	,headers=("content-type=multipart/*")
	)
	public ModelAndView updateoutput(@ModelAttribute(value = "Info_grid") Bpil_Opa_Rw_Analysis_Rw Info_grid,
			BindingResult results, ModelMap map, Model model, HttpServletRequest request
//			, @RequestParam CommonsMultipartFile [] doc_file
	)
//					throws ServletException
	{

		List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
		ArrayList<New_Scheme_mstr> dml2 = new ArrayList<New_Scheme_mstr>();

		String scheme_name = request.getParameter("scheme_name");
		String depot_code = request.getParameter("appl_depot_code");
		String dealer_name = request.getParameter("dlr_ac_name");
		String bill_to_id = request.getParameter("bill_to_id");

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

		String action = request.getParameter("action");
		List<Bpil_Opa_Rw_Analysis_Rw> info = Info_grid.getInfo();
//		String scheme_name = request.getParameter("scheme_name");

//				String opa_analysis_id[]= request.getParameterValues("opa_analysis_id");
//				String scheme_id[]= request.getParameterValues("scheme_id");

		// String scheme_code[]= request.getParameterValues("scheme_code");
//				String regn[]= request.getParameterValues("regn");
//				String depot[]= request.getParameterValues("depot");
//				String terr_code[]= request.getParameterValues("terr_code");
//				String dlr_ac_no[]= request.getParameterValues("dlr_ac_no");
//				String dlr_cat[]= request.getParameterValues("dlr_cat");
//				String dlr_bill_to[]= request.getParameterValues("dlr_bill_to");
//				String dlr_type[]= request.getParameterValues("dlr_type");
//				String dlr_name[]= request.getParameterValues("dlr_name");
//				String reward_section[]= request.getParameterValues("reward_section");				
//				String reward_type[]= request.getParameterValues("reward_type");
//				String product[]= request.getParameterValues("product");
//				String unit[]= request.getParameterValues("unit");
//				String reward_date[]= request.getParameterValues("reward_date");				
//				String reward_ly[]= request.getParameterValues("reward_ly");
//				String reward_target[]= request.getParameterValues("reward_target");
//				String reward_ty[]= request.getParameterValues("reward_ty");
//				String additional[]= request.getParameterValues("additional");				
//				String base_total[]= request.getParameterValues("base_total");
//				
//				String next_tgt_pending[]= request.getParameterValues("next_tgt_pending");
//				String reward_status[]= request.getParameterValues("reward_status");
//				String reward_total[]= request.getParameterValues("reward_total");				
//				String adjustments[]= request.getParameterValues("adjustments");
//				String adjustment_reason[]= request.getParameterValues("adjustment_reason");
//				String attribute1[]= request.getParameterValues("attribute1");
//				String gift_to_cn_flag[]= request.getParameterValues("gift_to_cn_flag");
//				String converted_cn_value[]= request.getParameterValues("converted_cn_value");
//				String interface_status[]= request.getParameterValues("interface_status");

		if (action.equals("RwUpdate")) {
			if (info != null) {
//				if(request.getParameterValues("opa_analysis_id") != null) {

				int len = info.size();
//					int len = opa_analysis_id.length;

				System.out.println("Adjust Row size = " + len);
				int infonum = 0;

				for (int i = 0; i < len; i++) {
//							Bpil_opa_scheme_analysis brl = new Bpil_opa_scheme_analysis();
					Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();
//								if(opa_analysis_id[i].length()>0 && opa_analysis_id[i]!=null)
					if (info.size() > 0 && info != null) {
						infonum = info.get(i).getOpa_analysis_id();
//									infonum = Integer.parseInt(opa_analysis_id[i]);
					} else {
						infonum = brl.getOpa_analysis_id();
					}

					brl.setOpa_analysis_id(infonum);
					brl.setScheme_id(info.get(i).getScheme_id());
//								brl.setScheme_id(Integer.parseInt(scheme_id[i]));

//								brl.setRegn(regn[i]);
//								brl.setDepot(depot[i]);
//								brl.setTerr_code(terr_code[i]);
//								brl.setDlr_ac_no(dlr_ac_no[i]);
//								brl.setDlr_cat(dlr_cat[i]);							
//								brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//								brl.setDlr_type(dlr_type[i]);
//								brl.setDlr_name(dlr_name[i]);
//								brl.setReward_section(reward_section[i]);							
//								brl.setReward_type(reward_type[i]);
//								brl.setProduct(product[i]);
//								brl.setUnit(unit[i]);
					// brl.setReward_date(reward_date[i]);

//								if(reward_date[i]!=null)
//								{
//								 Date start_date = null;
//							           try {
//							        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//							           } catch (ParseException e) {
					//
//							               e.printStackTrace();
//							           } 			         
//							           brl.setReward_date(start_date);	
//								}	

//								brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//								brl.setReward_target(Integer.parseInt(reward_target[i]));
//								brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//								brl.setAdditional(Integer.parseInt(additional[i]));
//								brl.setBase_total(Integer.parseInt(base_total[i]));							

//								brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//								brl.setReward_status(reward_status[i]);
//								brl.setReward_total(Integer.parseInt(reward_total[i]));
//								brl.setAdjustments(Float.valueOf(adjustments[i]));
//								brl.setAdjustment_reason(adjustment_reason[i]);
//								brl.setAttribute1(attribute1[i]);
//								brl.setGift_to_cn_flag(gift_to_cn_flag[i]);
//								brl.setConverted_cn_value(Integer.parseInt(converted_cn_value[i]));
					brl.setAdjustments(info.get(i).getAdjustments());
					brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
					brl.setAttribute1(info.get(i).getAttribute1());
					brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
					brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//								brl.setInterface_status(interface_status[i]);

					String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='" + brl.getAdjustments()
							+ "', " + "REWARD_ADJUSTMENT_REASON='" + brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='"
							+ brl.getAttribute1() + "', " + "REWARD_GIFT_TO_CN='" + brl.getGift_to_cn_flag() + "', "
							+ "REWARD_CONVERTED_CN='" + brl.getConverted_cn_value() + "' "
							+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
							+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";
					jdbcTemplate.update(query);

//								hibernateTemplate.saveOrUpdate(brl);

					String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + "WHERE OPA_RW_AN_REWARD_ID='"
							+ brl.getOpa_analysis_id() + "' " + "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";

					dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

						public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

							Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

							aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
							aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
							aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
							aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
							aContact.setState(rs.getString("REWARD_DLR_STATE"));
							aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
							aContact.setSup_code(rs.getString("REWARD_SUP_CODE"));
							aContact.setSup_name(rs.getString("REWARD_SUP_NAME"));
							aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
							aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
							aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
							aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
							aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
							aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
							aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
							aContact.setReward_section(rs.getString("REWARD_SECTION"));
							aContact.setReward_type(rs.getString("REWARD_TYPE"));
							aContact.setProduct(rs.getString("REWARD_PRODUCT"));
							aContact.setUnit(rs.getString("REWARD_UNIT"));
							aContact.setReward_date(rs.getDate("REWARD_DATE"));

							if (rs.getDate("REWARD_DATE") != null) {
								DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
								String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
								aContact.setReward_date1(dateStr1);
//											try {
//												System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//											} catch (ParseException e) {
//													e.printStackTrace();
//											}
							}

							aContact.setReward_ly(rs.getInt("REWARD_LY"));
							aContact.setReward_target(rs.getInt("REWARD_TARGET"));
							aContact.setReward_ty(rs.getInt("REWARD_TY"));
							aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
							aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
							aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
							aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
							aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
							aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
							aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
							aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
							aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
							aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
							aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

							aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

							if (rs.getDate("REWARD_LAST_UPDATE") != null) {
								DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
								String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
								aContact.setReward_last_update1(dateStr1);
//											try {
////												System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//											} catch (ParseException e) {
//													e.printStackTrace();
//											}
							}

							return aContact;
						}

					});

					dml2 = (ArrayList<New_Scheme_mstr>) hibernateTemplate
							.find("from New_Scheme_mstr where scheme_id=" + brl.getScheme_id());

				}
			}

//					return new ModelAndView("redirect:/adjust_reward?scheme_name="+scheme_name+"&depot_code="+depot_code+"&dealer_name="+dealer_name+"&bill_to_id="+bill_to_id);
			return new ModelAndView(
					"redirect:/adjust_reward_detail?scheme_id=" + dml.get(0).getScheme_id() + "&opa_rw_an_dealer_id="
							+ dml.get(0).getOpa_rw_an_dealer_id() + "&scheme_code=" + dml2.get(0).getScheme_code()
							+ "&depot=" + dml.get(0).getDepot() + "&dlr_ac_no=" + dml.get(0).getDlr_ac_no());
		} else

		if (action.equals("Update")) {
			if (info != null) {
//			if(request.getParameterValues("opa_analysis_id") != null) {

//				int len = opa_analysis_id.length;
				int len = info.size();

				System.out.println("Adjust Row size = " + len);
				int infonum = 0;
				int j = 0;

				for (int i = 0; i < len; i++) {
//						Bpil_opa_scheme_analysis brl = new Bpil_opa_scheme_analysis();
					Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();
//						if(opa_analysis_id[i].length()>0 && opa_analysis_id[i]!=null)
					if (info.size() > 0 && info != null) {
						infonum = info.get(i).getOpa_analysis_id();
//							infonum = Integer.parseInt(opa_analysis_id[i]);
					} else {
						infonum = brl.getOpa_analysis_id();
					}

					brl.setOpa_analysis_id(infonum);
					brl.setScheme_id(info.get(i).getScheme_id());
//						brl.setScheme_id(Integer.parseInt(scheme_id[i]));

//							brl.setRegn(regn[i]);
//							brl.setDepot(depot[i]);
//							brl.setTerr_code(terr_code[i]);
//							brl.setDlr_ac_no(dlr_ac_no[i]);
//							brl.setDlr_cat(dlr_cat[i]);							
//							brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//							brl.setDlr_type(dlr_type[i]);
//							brl.setDlr_name(dlr_name[i]);
//							brl.setReward_section(reward_section[i]);							
//							brl.setReward_type(reward_type[i]);
//							brl.setProduct(product[i]);
//							brl.setUnit(unit[i]);
					// brl.setReward_date(reward_date[i]);

//							if(reward_date[i]!=null)
//							{
//							 Date start_date = null;
//						           try {
//						        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//						           } catch (ParseException e) {
//
//						               e.printStackTrace();
//						           } 			         
//						           brl.setReward_date(start_date);	
//							}	

//							brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//							brl.setReward_target(Integer.parseInt(reward_target[i]));
//							brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//							brl.setAdditional(Integer.parseInt(additional[i]));
//							brl.setBase_total(Integer.parseInt(base_total[i]));							

//							brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//							brl.setReward_status(reward_status[i]);
//							brl.setReward_total(Integer.parseInt(reward_total[i]));
//							brl.setAdjustments(Float.valueOf(adjustments[i]));
//							brl.setAdjustment_reason(adjustment_reason[i]);
//							brl.setAttribute1(attribute1[i]);
//							brl.setGift_to_cn_flag(gift_to_cn_flag[i]);
//							brl.setConverted_cn_value(Integer.parseInt(converted_cn_value[i]));
					brl.setAdjustments(info.get(i).getAdjustments());
					brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
					brl.setAttribute1(info.get(i).getAttribute1());
					brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
					brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//							brl.setInterface_status(interface_status[i]);

					String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='" + brl.getAdjustments()
							+ "', " + "REWARD_ADJUSTMENT_REASON='" + brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='"
							+ brl.getAttribute1() + "', " + "REWARD_GIFT_TO_CN='" + brl.getGift_to_cn_flag() + "', "
							+ "REWARD_CONVERTED_CN='" + brl.getConverted_cn_value() + "' "
							+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
							+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";
					jdbcTemplate.update(query);

//								hibernateTemplate.saveOrUpdate(brl);								

					if (null != info.get(i).getDoc_file2()) {
						MultipartFile multipartFile = info.get(i).getDoc_file2();
						String fileName = multipartFile.getOriginalFilename();
						System.out.println("adj " + fileName);

						try {
							brl.setDoc_file(multipartFile.getBytes());
						} catch (IOException e) {
							e.printStackTrace();
						}
						brl.setDoc_title(multipartFile.getOriginalFilename());

						String sql = "update BPIL_OPA_RW_ANALYSIS_RW " + "set DOC_FILE = ? , " + "DOC_TITLE = ? "
								+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
								+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";

						jdbcTemplate.update(new PreparedStatementCreator() {
							@Override
							public PreparedStatement createPreparedStatement(Connection connection)
									throws SQLException {
								PreparedStatement ps = connection.prepareStatement(sql.toString());
								ByteArrayInputStream inputStream = null;
								try {
									inputStream = new ByteArrayInputStream(multipartFile.getBytes());
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								ps.setBlob(1, inputStream);
								ps.setString(2, multipartFile.getOriginalFilename());
								return ps;
							}
						});

//									 Transaction tx = null;
//				                		Bpil_Opa_Rw_Analysis_Rw rw1 = null;
//				                		Session session = hibernateTemplate.getSessionFactory().openSession();
//							                try {
//							                	if(brl.getAdjustment_reason() != "" || brl.getAdjustment_reason() != null){
//							                	    
//							                		
//							                		tx = session.beginTransaction();
//							                		String query1 = "from Bpil_Opa_Rw_Analysis_Rw where opa_analysis_id = :opa_analysis_id and scheme_id = :scheme_id";
//							                		Query sql = session.createQuery(query1);
//							                		sql.setParameter("opa_analysis_id", brl.getOpa_analysis_id());
//							                		sql.setParameter("scheme_id", brl.getScheme_id());
//							                		rw1 = (Bpil_Opa_Rw_Analysis_Rw) sql.uniqueResult();
//							                		
//							                		System.out.println("rw id"+rw1.getOpa_analysis_id());
//							                		rw1.setDoc_file(multipartFile.getBytes());
//							                		rw1.setDoc_title(multipartFile.getOriginalFilename());
//							                		schemerequestdao.saverwdocs(rw1);
////							                		hibernateTemplate.saveOrUpdate(rw1);
//							                		j++;
//							                	}
//											} catch (Exception e) {
//												e.printStackTrace();
//											}finally{
//												tx.commit();
//												session.close();
//												System.gc();
//											}
//							            
					}

//								if (null != doc_file && doc_file.length>0) 
//						        {
//						            	
//									Transaction tx = null;
//			                		Bpil_Opa_Rw_Analysis_Rw rw1 = null;
//			                		Session session = hibernateTemplate.getSessionFactory().openSession();
//						                try {
//						                	if(brl.getAdjustment_reason() != "" || brl.getAdjustment_reason() != null){
//						                	    
//						                		
//						                		tx = session.beginTransaction();
//						                		String query1 = "from Bpil_Opa_Rw_Analysis_Rw where opa_analysis_id = :opa_analysis_id and scheme_id = :scheme_id";
//						                		Query sql = session.createQuery(query1);
//						                		sql.setParameter("opa_analysis_id", brl.getOpa_analysis_id());
//						                		sql.setParameter("scheme_id", brl.getScheme_id());
//						                		rw1 = (Bpil_Opa_Rw_Analysis_Rw) sql.uniqueResult();
//						                		
//						                		System.out.println("rw id"+rw1.getOpa_analysis_id());
//						                		rw1.setDoc_file(doc_file[j].getBytes());
//						                		hibernateTemplate.saveOrUpdate(rw1);
//						                		j++;
//						                	}
//										} catch (Exception e) {
//											e.printStackTrace();
//										}finally{
//											tx.commit();
//											session.close();
//											System.gc();
//										}
//						                
//						               
//						                 
//						            }

					model.addAttribute("Info_grid", dml);

				}
			}

			return new ModelAndView("AdjustReward");
		} else if (action.equals("Freeze")) {
			if (info != null) {
//					if(request.getParameterValues("opa_analysis_id") != null) {

//						int len = opa_analysis_id.length;
				int len = info.size();
				int infonum = 0;
				System.out.println("Adjust Row size = " + len);
				for (int i = 0; i < len; i++) {
//						int schemeid = Integer.parseInt(scheme_id[i]);
					int schemeid = info.get(i).getScheme_id();
					Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();

//						if(opa_analysis_id[i].length()>0 && opa_analysis_id[i]!=null)
					if (info.size() > 0 && info != null) {
						infonum = info.get(i).getOpa_analysis_id();
//							infonum = Integer.parseInt(opa_analysis_id[i]);
					} else {
						infonum = brl.getOpa_analysis_id();
					}

					brl.setOpa_analysis_id(infonum);
					brl.setScheme_id(info.get(i).getScheme_id());
//							brl.setScheme_id(Integer.parseInt(scheme_id[i]));

//						brl.setRegn(regn[i]);
//						brl.setDepot(depot[i]);
//						brl.setTerr_code(terr_code[i]);
//						brl.setDlr_ac_no(dlr_ac_no[i]);
//						brl.setDlr_cat(dlr_cat[i]);							
//						brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//						brl.setDlr_type(dlr_type[i]);
//						brl.setDlr_name(dlr_name[i]);
//						brl.setReward_section(reward_section[i]);							
//						brl.setReward_type(reward_type[i]);
//						brl.setProduct(product[i]);
//						brl.setUnit(unit[i]);
					// brl.setReward_date(reward_date[i]);

//						if(reward_date[i]!=null)
//						{
//						 Date start_date = null;
//					           try {
//					        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//					           } catch (ParseException e) {
					//
//					               e.printStackTrace();
//					           } 			         
//					           brl.setReward_date(start_date);	
//						}	

//						brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//						brl.setReward_target(Integer.parseInt(reward_target[i]));
//						brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//						brl.setAdditional(Integer.parseInt(additional[i]));
//						brl.setBase_total(Integer.parseInt(base_total[i]));							

//						brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//						brl.setReward_status(reward_status[i]);
//						brl.setReward_total(Integer.parseInt(reward_total[i]));
//						brl.setAdjustments(Float.valueOf(adjustments[i]));
//						brl.setAdjustment_reason(adjustment_reason[i]);
//						brl.setAttribute1(attribute1[i]);
//						brl.setGift_to_cn_flag(gift_to_cn_flag[i]);
//						brl.setConverted_cn_value(Integer.parseInt(converted_cn_value[i]));
					brl.setAdjustments(info.get(i).getAdjustments());
					brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
					brl.setAttribute1(info.get(i).getAttribute1());
					brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
					brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//						brl.setInterface_status(interface_status[i]);

					String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='" + brl.getAdjustments()
							+ "'," + "REWARD_ADJUSTMENT_REASON='" + brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='"
							+ brl.getAttribute1() + "', " + "REWARD_GIFT_TO_CN='" + brl.getGift_to_cn_flag() + "', "
							+ "REWARD_CONVERTED_CN='" + brl.getConverted_cn_value() + "' "
							+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
							+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";
					jdbcTemplate.update(query);

//						hibernateTemplate.saveOrUpdate(brl);		

					if (null != info.get(i).getDoc_file2()) {
						MultipartFile multipartFile = info.get(i).getDoc_file2();
						String fileName = multipartFile.getOriginalFilename();
						System.out.println("adj " + fileName);

						try {
							brl.setDoc_file(multipartFile.getBytes());
						} catch (IOException e) {
							e.printStackTrace();
						}
						brl.setDoc_title(multipartFile.getOriginalFilename());

						String sql = "update BPIL_OPA_RW_ANALYSIS_RW " + "set DOC_FILE = ? , " + "DOC_TITLE = ? "
								+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
								+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";

						jdbcTemplate.update(new PreparedStatementCreator() {
							@Override
							public PreparedStatement createPreparedStatement(Connection connection)
									throws SQLException {
								PreparedStatement ps = connection.prepareStatement(sql.toString());
								ByteArrayInputStream inputStream = null;
								try {
									inputStream = new ByteArrayInputStream(multipartFile.getBytes());
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								ps.setBlob(1, inputStream);
								ps.setString(2, multipartFile.getOriginalFilename());
								return ps;
							}
						});

//							 Transaction tx = null;
//		                		Bpil_Opa_Rw_Analysis_Rw rw1 = null;
//		                		Session session = hibernateTemplate.getSessionFactory().openSession();
//					                try {
//					                	if(brl.getAdjustment_reason() != "" || brl.getAdjustment_reason() != null){
//					                	    
//					                		
//					                		tx = session.beginTransaction();
//					                		String query1 = "from Bpil_Opa_Rw_Analysis_Rw where opa_analysis_id = :opa_analysis_id and scheme_id = :scheme_id";
//					                		Query sql = session.createQuery(query1);
//					                		sql.setParameter("opa_analysis_id", brl.getOpa_analysis_id());
//					                		sql.setParameter("scheme_id", brl.getScheme_id());
//					                		rw1 = (Bpil_Opa_Rw_Analysis_Rw) sql.uniqueResult();
//					                		
//					                		System.out.println("rw id"+rw1.getOpa_analysis_id());
//					                		rw1.setDoc_file(multipartFile.getBytes());
//					                		rw1.setDoc_title(multipartFile.getOriginalFilename());
//					                		schemerequestdao.saverwdocs(rw1);
////					                		hibernateTemplate.saveOrUpdate(rw1);
//					                		j++;
//					                	}
//									} catch (Exception e) {
//										e.printStackTrace();
//									}finally{
//										tx.commit();
//										session.close();
//										System.gc();
//									}
//					            
					}

				}
			}
			String query2 = "update BPIL_SCHEME_MASTER set active_flag='Freezed' WHERE scheme_id='" + scheme_name + "'";
			jdbcTemplate.update(query2);

			model.addAttribute("Info_grid", dml);
			return new ModelAndView("AdjustReward");
		}

		return new ModelAndView("AdjustReward");
	}

	@Transactional
	@RequestMapping(value = "/updatedepooutput", method = RequestMethod.POST)
	public ModelAndView updatedepooutput(@ModelAttribute(value = "Info_grid") Bpil_Opa_Rw_Analysis_Rw Info_grid,
			BindingResult results, ModelMap map, Model model, HttpServletRequest request) {
		List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
		String action = request.getParameter("action");
		List<Bpil_Opa_Rw_Analysis_Rw> info = Info_grid.getInfo();
		String scheme_name = request.getParameter("scheme_name");

//				String opa_analysis_id[]= request.getParameterValues("opa_analysis_id");
//				String scheme_id[]= request.getParameterValues("scheme_id");

		// String scheme_code[]= request.getParameterValues("scheme_code");
//				String regn[]= request.getParameterValues("regn");
//				String depot[]= request.getParameterValues("depot");
//				String terr_code[]= request.getParameterValues("terr_code");
//				String dlr_ac_no[]= request.getParameterValues("dlr_ac_no");
//				String dlr_cat[]= request.getParameterValues("dlr_cat");
//				String dlr_bill_to[]= request.getParameterValues("dlr_bill_to");
//				String dlr_type[]= request.getParameterValues("dlr_type");
//				String dlr_name[]= request.getParameterValues("dlr_name");
//				String reward_section[]= request.getParameterValues("reward_section");				
//				String reward_type[]= request.getParameterValues("reward_type");
//				String product[]= request.getParameterValues("product");
//				String unit[]= request.getParameterValues("unit");
//				String reward_date[]= request.getParameterValues("reward_date");				
//				String reward_ly[]= request.getParameterValues("reward_ly");
//				String reward_target[]= request.getParameterValues("reward_target");
//				String reward_ty[]= request.getParameterValues("reward_ty");
//				String additional[]= request.getParameterValues("additional");				
//				String base_total[]= request.getParameterValues("base_total");
//				
//				String next_tgt_pending[]= request.getParameterValues("next_tgt_pending");
//				String reward_status[]= request.getParameterValues("reward_status");
//				String reward_total[]= request.getParameterValues("reward_total");				
//				String adjustments[]= request.getParameterValues("adjustments");
//				String adjustment_reason[]= request.getParameterValues("adjustment_reason");
//				String attribute1[]= request.getParameterValues("attribute1");
//				String gift_to_cn_flag[]= request.getParameterValues("gift_to_cn_flag");
//				String converted_cn_value[]= request.getParameterValues("converted_cn_value");
//				String interface_status[]= request.getParameterValues("interface_status");

		if (action.equals("Update")) {
			if (info != null) {
//			if(request.getParameterValues("opa_analysis_id") != null) {

//				int len = opa_analysis_id.length;
				int len = info.size();

				System.out.println("Adjust Row size = " + len);
				int infonum = 0;

				for (int i = 0; i < len; i++) {
//						Bpil_opa_scheme_analysis brl = new Bpil_opa_scheme_analysis();
					Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();
					if (info.size() > 0 && info != null)
//							if(opa_analysis_id[i].length()>0 && opa_analysis_id[i]!=null)
					{
//								infonum = Integer.parseInt(opa_analysis_id[i]);
						infonum = info.get(i).getOpa_analysis_id();
					} else {
						infonum = brl.getOpa_analysis_id();
					}

					brl.setOpa_analysis_id(infonum);
//							brl.setScheme_id(Integer.parseInt(scheme_id[i]));
					brl.setScheme_id(info.get(i).getScheme_id());

//							brl.setRegn(regn[i]);
//							brl.setDepot(depot[i]);
//							brl.setTerr_code(terr_code[i]);
//							brl.setDlr_ac_no(dlr_ac_no[i]);
//							brl.setDlr_cat(dlr_cat[i]);							
//							brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//							brl.setDlr_type(dlr_type[i]);
//							brl.setDlr_name(dlr_name[i]);
//							brl.setReward_section(reward_section[i]);							
//							brl.setReward_type(reward_type[i]);
//							brl.setProduct(product[i]);
//							brl.setUnit(unit[i]);
					// brl.setReward_date(reward_date[i]);

//							if(reward_date[i]!=null)
//							{
//							 Date start_date = null;
//						           try {
//						        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//						           } catch (ParseException e) {
//
//						               e.printStackTrace();
//						           } 			         
//						           brl.setReward_date(start_date);	
//							}	

//							brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//							brl.setReward_target(Integer.parseInt(reward_target[i]));
//							brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//							brl.setAdditional(Integer.parseInt(additional[i]));
//							brl.setBase_total(Integer.parseInt(base_total[i]));							

//							brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//							brl.setReward_status(reward_status[i]);
//							brl.setReward_total(Integer.parseInt(reward_total[i]));
//							brl.setAdjustments(Float.valueOf(adjustments[i]));
//							brl.setAdjustment_reason(adjustment_reason[i]);
//							brl.setAttribute1(attribute1[i]);
//							brl.setGift_to_cn_flag(gift_to_cn_flag[i]);
//							brl.setConverted_cn_value(Integer.parseInt(converted_cn_value[i]));
//							brl.setConverted_cn_value(Integer.parseInt(converted_cn_value[i]));
					brl.setAdjustments(info.get(i).getAdjustments());
					brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
					brl.setAttribute1(info.get(i).getAttribute1());
					brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
					brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//							brl.setInterface_status(interface_status[i]);

					String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='" + brl.getAdjustments()
							+ "', " + "REWARD_ADJUSTMENT_REASON='" + brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='"
							+ brl.getAttribute1() + "', " + "REWARD_GIFT_TO_CN='" + brl.getGift_to_cn_flag() + "', "
							+ "REWARD_CONVERTED_CN='" + brl.getConverted_cn_value() + "' "
							+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
							+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";
					jdbcTemplate.update(query);

//							hibernateTemplate.saveOrUpdate(brl);	

					if (null != info.get(i).getDoc_file2()) {
						MultipartFile multipartFile = info.get(i).getDoc_file2();
						String fileName = multipartFile.getOriginalFilename();
						System.out.println("adj " + fileName);

						try {
							brl.setDoc_file(multipartFile.getBytes());
						} catch (IOException e) {
							e.printStackTrace();
						}
						brl.setDoc_title(multipartFile.getOriginalFilename());

						String sql = "update BPIL_OPA_RW_ANALYSIS_RW " + "set DOC_FILE = ? , " + "DOC_TITLE = ? "
								+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
								+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";

						jdbcTemplate.update(new PreparedStatementCreator() {
							@Override
							public PreparedStatement createPreparedStatement(Connection connection)
									throws SQLException {
								PreparedStatement ps = connection.prepareStatement(sql.toString());
								ByteArrayInputStream inputStream = null;
								try {
									inputStream = new ByteArrayInputStream(multipartFile.getBytes());
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								ps.setBlob(1, inputStream);
								ps.setString(2, multipartFile.getOriginalFilename());
								return ps;
							}
						});

//								 Transaction tx = null;
//			                		Bpil_Opa_Rw_Analysis_Rw rw1 = null;
//			                		Session session = hibernateTemplate.getSessionFactory().openSession();
//						                try {
//						                	if(brl.getAdjustment_reason() != "" || brl.getAdjustment_reason() != null){
//						                	    
//						                		
//						                		tx = session.beginTransaction();
//						                		String query1 = "from Bpil_Opa_Rw_Analysis_Rw where opa_analysis_id = :opa_analysis_id and scheme_id = :scheme_id";
//						                		Query sql = session.createQuery(query1);
//						                		sql.setParameter("opa_analysis_id", brl.getOpa_analysis_id());
//						                		sql.setParameter("scheme_id", brl.getScheme_id());
//						                		rw1 = (Bpil_Opa_Rw_Analysis_Rw) sql.uniqueResult();
//						                		
//						                		System.out.println("rw id"+rw1.getOpa_analysis_id());
//						                		rw1.setDoc_file(multipartFile.getBytes());
//						                		rw1.setDoc_title(multipartFile.getOriginalFilename());
//						                		schemerequestdao.saverwdocs(rw1);
////						                		hibernateTemplate.saveOrUpdate(rw1);
//						                		j++;
//						                	}
//										} catch (Exception e) {
//											e.printStackTrace();
//										}finally{
//											tx.commit();
//											session.close();
//											System.gc();
//										}
//						            
					}

				}
			}
		} else if (action.equals("Freeze")) {
			if (info != null) {
//				if(request.getParameterValues("opa_analysis_id") != null) {

//					int len = opa_analysis_id.length;
				int len = info.size();
				int infonum = 0;
				System.out.println("Adjust Row size = " + len);
				for (int i = 0; i < len; i++) {
//						int schemeid = Integer.parseInt(scheme_id[i]);
					int schemeid = info.get(i).getScheme_id();
					Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();

					if (info.size() > 0 && info != null)
//						if(opa_analysis_id[i].length()>0 && opa_analysis_id[i]!=null)
					{
//							infonum = Integer.parseInt(opa_analysis_id[i]);
						infonum = info.get(i).getOpa_analysis_id();
					} else {
						infonum = brl.getOpa_analysis_id();
					}

					brl.setOpa_analysis_id(infonum);
//						brl.setScheme_id(Integer.parseInt(scheme_id[i]));
					brl.setScheme_id(info.get(i).getScheme_id());

//						brl.setRegn(regn[i]);
//						brl.setDepot(depot[i]);
//						brl.setTerr_code(terr_code[i]);
//						brl.setDlr_ac_no(dlr_ac_no[i]);
//						brl.setDlr_cat(dlr_cat[i]);							
//						brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//						brl.setDlr_type(dlr_type[i]);
//						brl.setDlr_name(dlr_name[i]);
//						brl.setReward_section(reward_section[i]);							
//						brl.setReward_type(reward_type[i]);
//						brl.setProduct(product[i]);
//						brl.setUnit(unit[i]);
					// brl.setReward_date(reward_date[i]);

//						if(reward_date[i]!=null)
//						{
//						 Date start_date = null;
//					           try {
//					        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//					           } catch (ParseException e) {
					//
//					               e.printStackTrace();
//					           } 			         
//					           brl.setReward_date(start_date);	
//						}	

//						brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//						brl.setReward_target(Integer.parseInt(reward_target[i]));
//						brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//						brl.setAdditional(Integer.parseInt(additional[i]));
//						brl.setBase_total(Integer.parseInt(base_total[i]));							

//						brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//						brl.setReward_status(reward_status[i]);
//						brl.setReward_total(Integer.parseInt(reward_total[i]));
//						brl.setAdjustments(Float.valueOf(adjustments[i]));
//						brl.setAdjustment_reason(adjustment_reason[i]);
//						brl.setAttribute1(attribute1[i]);
//						brl.setGift_to_cn_flag(gift_to_cn_flag[i]);
//						brl.setConverted_cn_value(Integer.parseInt(converted_cn_value[i]));
					brl.setAdjustments(info.get(i).getAdjustments());
					brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
					brl.setAttribute1(info.get(i).getAttribute1());
					brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
					brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//						brl.setInterface_status(interface_status[i]);

					String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='" + brl.getAdjustments()
							+ "'," + "REWARD_ADJUSTMENT_REASON='" + brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='"
							+ brl.getAttribute1() + "', " + "REWARD_GIFT_TO_CN='" + brl.getGift_to_cn_flag() + "', "
							+ "REWARD_CONVERTED_CN='" + brl.getConverted_cn_value() + "' "
							+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
							+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";
					jdbcTemplate.update(query);

//						hibernateTemplate.saveOrUpdate(brl);	

					if (null != info.get(i).getDoc_file2()) {
						MultipartFile multipartFile = info.get(i).getDoc_file2();
						String fileName = multipartFile.getOriginalFilename();
						System.out.println("adj " + fileName);

						try {
							brl.setDoc_file(multipartFile.getBytes());
						} catch (IOException e) {
							e.printStackTrace();
						}
						brl.setDoc_title(multipartFile.getOriginalFilename());

						String sql = "update BPIL_OPA_RW_ANALYSIS_RW " + "set DOC_FILE = ? , " + "DOC_TITLE = ? "
								+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
								+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";

						jdbcTemplate.update(new PreparedStatementCreator() {
							@Override
							public PreparedStatement createPreparedStatement(Connection connection)
									throws SQLException {
								PreparedStatement ps = connection.prepareStatement(sql.toString());
								ByteArrayInputStream inputStream = null;
								try {
									inputStream = new ByteArrayInputStream(multipartFile.getBytes());
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								ps.setBlob(1, inputStream);
								ps.setString(2, multipartFile.getOriginalFilename());
								return ps;
							}
						});

//							 Transaction tx = null;
//		                		Bpil_Opa_Rw_Analysis_Rw rw1 = null;
//		                		Session session = hibernateTemplate.getSessionFactory().openSession();
//					                try {
//					                	if(brl.getAdjustment_reason() != "" || brl.getAdjustment_reason() != null){
//					                	    
//					                		
//					                		tx = session.beginTransaction();
//					                		String query1 = "from Bpil_Opa_Rw_Analysis_Rw where opa_analysis_id = :opa_analysis_id and scheme_id = :scheme_id";
//					                		Query sql = session.createQuery(query1);
//					                		sql.setParameter("opa_analysis_id", brl.getOpa_analysis_id());
//					                		sql.setParameter("scheme_id", brl.getScheme_id());
//					                		rw1 = (Bpil_Opa_Rw_Analysis_Rw) sql.uniqueResult();
//					                		
//					                		System.out.println("rw id"+rw1.getOpa_analysis_id());
//					                		rw1.setDoc_file(multipartFile.getBytes());
//					                		rw1.setDoc_title(multipartFile.getOriginalFilename());
//					                		schemerequestdao.saverwdocs(rw1);
////					                		hibernateTemplate.saveOrUpdate(rw1);
//					                		j++;
//					                	}
//									} catch (Exception e) {
//										e.printStackTrace();
//									}finally{
//										tx.commit();
//										session.close();
//										System.gc();
//									}
//					            
					}

				}
			}
			String query2 = "update BPIL_SCHEME_MASTER set active_flag='Freezed' WHERE scheme_id='" + scheme_name + "'";
			jdbcTemplate.update(query2);
		}
		model.addAttribute("Info_grid", dml);

		return new ModelAndView("AdjustDepoReward");
	}

	@Transactional
	@RequestMapping(value = "/apporve_reward", method = RequestMethod.POST)
	public ModelAndView apporve_reward(@ModelAttribute(value = "Info_grid") Bpil_Opa_Rw_Analysis_Rw Info_grid,
			BindingResult results, ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {

		String action = request.getParameter("action");
		System.out.println("rw action = " + action);
		List<Bpil_Opa_Rw_Analysis_Rw> info = Info_grid.getInfo();

//		String scheme_name = request.getParameter("scheme_name");
//		
//				String opa_analysis_id[]= request.getParameterValues("opa_analysis_id");
//				String scheme_id[]= request.getParameterValues("scheme_id");
//				String checkapr[] = request.getParameterValues("checkapr");
//				
////				String scheme_code[]= request.getParameterValues("scheme_code")
//				String attribute2[] = request.getParameterValues("attribute2");;
//				String regn[]= request.getParameterValues("regn");
//				String state[]= request.getParameterValues("state");
//				String depot[]= request.getParameterValues("depot");
//				String terr_code[]= request.getParameterValues("terr_code");
//				String terr_name[]= request.getParameterValues("terr_name");
//				String dlr_ac_no[]= request.getParameterValues("dlr_ac_no");
//				String dlr_bill_to[]= request.getParameterValues("dlr_bill_to");
//				String dlr_cat[]= request.getParameterValues("dlr_cat");
//				String dlr_type[]= request.getParameterValues("dlr_type");
//				String dlr_name[]= request.getParameterValues("dlr_name");
//				String reward_section[]= request.getParameterValues("reward_section");				
//				String reward_type[]= request.getParameterValues("reward_type");
//				String product[]= request.getParameterValues("product");
//				String unit[]= request.getParameterValues("unit");
//				String reward_date[]= request.getParameterValues("reward_date");				
//				String reward_ly[]= request.getParameterValues("reward_ly");
//				String reward_target[]= request.getParameterValues("reward_target");
//				String reward_ty[]= request.getParameterValues("reward_ty");
//				String next_tgt_pending[]= request.getParameterValues("next_tgt_pending");
//				String reward_status[]= request.getParameterValues("reward_status");
//				String additional[]= request.getParameterValues("additional");				
////				String base_total[]= request.getParameterValues("base_total");
//				
//				String reward_description[]= request.getParameterValues("reward_description");
//				String reward_total[]= request.getParameterValues("reward_total");				
//				String adjustments[]= request.getParameterValues("adjustments");
//				String adjustment_reason[]= request.getParameterValues("adjustment_reason");
//				String gift_to_cn_flag[]= request.getParameterValues("gift_to_cn_flag");
//				String converted_cn_value[]= request.getParameterValues("converted_cn_value");
//				String attribute1[]= request.getParameterValues("attribute1");
////				String interface_status[]= request.getParameterValues("interface_status");

		if (action.equals("Export")) {
			if (info != null) {

				int len = info.size();

				System.out.println("Adjust Row size = " + len);

				try {

					XSSFWorkbook workbook = new XSSFWorkbook();
					XSSFSheet spreadsheet = workbook.createSheet("Adjust Reward Report.xlsx");

					XSSFFont font = workbook.createFont();
					font.setFontHeightInPoints((short) 12);
					font.setBold(true);

					CellStyle cellstyle = workbook.createCellStyle();
					cellstyle.setWrapText(true);
					cellstyle.setFont(font);

					XSSFRow row = spreadsheet.createRow(0);
					XSSFCell cell;

					cell = row.createCell(0);
					cell.setCellValue("Scheme Code");
					cellstyle.setLocked(true);
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(0, 4000);
					cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

//						cell = row.createCell(1);
//						cell.setCellValue("Region");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(1, 4000);

//						cell = row.createCell(2);
//						cell.setCellValue("State");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(2, 5000);

					cell = row.createCell(1);
					cell.setCellValue("Depo");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(1, 5000);

//						cell = row.createCell(4);
//						cell.setCellValue("Terr");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(4, 5000);

//						cell = row.createCell(5);
//						cell.setCellValue("Terr Name");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(5, 5000);

					cell = row.createCell(2);
					cell.setCellValue("A/c No.");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(2, 2000);

//						cell = row.createCell(7);
//						cell.setCellValue("Bill To");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(7, 5000);

//						cell = row.createCell(8);
//						cell.setCellValue("Dlr Cat");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(8, 5000);

//						cell = row.createCell(9);
//						cell.setCellValue("Cust Type");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(9, 5000);

					cell = row.createCell(3);
					cell.setCellValue("A/c Name");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(3, 6000);

//						cell = row.createCell(4);
//						cell.setCellValue("Reward Section");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(4, 5000);

					cell = row.createCell(4);
					cell.setCellValue("Reward Type");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(4, 3000);

//						cell = row.createCell(6);
//						cell.setCellValue("Product");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(6, 5000);

//						cell = row.createCell(7);
//						cell.setCellValue("Unit");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(7, 5000);

					cell = row.createCell(5);
					cell.setCellValue("Reward Date");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(5, 3000);

//						cell = row.createCell(9);
//						cell.setCellValue("LY");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(9, 5000);

//						cell = row.createCell(10);
//						cell.setCellValue("Target");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(10, 6000);

//						cell = row.createCell(11);
//						cell.setCellValue("TY");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(11, 5000);

//						cell = row.createCell(12);
//						cell.setCellValue("TGT Pending");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(12, 5000);

					cell = row.createCell(6);
					cell.setCellValue("Status");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(6, 2000);

//						cell = row.createCell(21);
//						cell.setCellValue("Add PTS");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(21, 5000);

					cell = row.createCell(7);
					cell.setCellValue("Reward Desc");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(7, 3000);

					cell = row.createCell(8);
					cell.setCellValue("Actual");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(8, 2000);

					cell = row.createCell(9);
					cell.setCellValue("Requested");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(9, 3000);

					cell = row.createCell(10);
					cell.setCellValue("Adjustment Reason");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(10, 8000);

					cell = row.createCell(11);
					cell.setCellValue("Gift To CN");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(11, 3500);

					cell = row.createCell(12);
					cell.setCellValue("Converted CN Value");
					cell.setCellStyle(cellstyle);
					spreadsheet.setColumnWidth(12, 3000);

//						cell = row.createCell(28);
//						cell.setCellValue("Adjustment Flag");
//						cell.setCellStyle(cellstyle);
//						spreadsheet.setColumnWidth(28, 8000);

					int j = 1;
					for (int i = 0; i < len; i++) {
						row = spreadsheet.createRow(j);

						cell = row.createCell(0);
						cell.setCellValue(info.get(i).getAttribute2());

//							cell = row.createCell(1);
//							cell.setCellValue(regn[i]);

//							cell = row.createCell(2);
//							cell.setCellValue(state[i]);

						cell = row.createCell(1);
						cell.setCellValue(info.get(i).getDepot());

//							cell = row.createCell(4);
//							cell.setCellValue(terr_code[i]);

//							cell = row.createCell(5);
//							cell.setCellValue(terr_name[i]);

						cell = row.createCell(2);
						cell.setCellValue(info.get(i).getDlr_ac_no());

//							cell = row.createCell(7);
//							cell.setCellValue(dlr_bill_to[i]);

//							cell = row.createCell(8);
//							cell.setCellValue(dlr_cat[i]);

//							cell = row.createCell(9);
//							cell.setCellValue(dlr_type[i]);

						cell = row.createCell(3);
						cell.setCellValue(info.get(i).getDlr_name());

//							cell = row.createCell(4);
//							cell.setCellValue(info.get(i).getReward_section());

						cell = row.createCell(4);
						cell.setCellValue(info.get(i).getReward_type());

//							cell = row.createCell(6);
//							cell.setCellValue(info.get(i).getProduct());

//							cell = row.createCell(7);
//							cell.setCellValue(info.get(i).getUnit());

						cell = row.createCell(5);
						cell.setCellValue(info.get(i).getRewardDate());

//							cell = row.createCell(9);
//							cell.setCellValue(info.get(i).getReward_ly());

//							cell = row.createCell(10);
//							cell.setCellValue(info.get(i).getReward_target());

//							cell = row.createCell(11);
//							cell.setCellValue(info.get(i).getReward_ty());

//							cell = row.createCell(12);
//							cell.setCellValue(info.get(i).getNext_tgt_pending());

						cell = row.createCell(6);
						cell.setCellValue(info.get(i).getReward_status());

//							cell = row.createCell(21);
//							cell.setCellValue(additional[i]);

						cell = row.createCell(7);
						cell.setCellValue(info.get(i).getReward_description());

						cell = row.createCell(8);
						cell.setCellValue(info.get(i).getReward_total());

						cell = row.createCell(9);
						cell.setCellValue(info.get(i).getAdjustments());

						cell = row.createCell(10);
						cell.setCellValue(info.get(i).getAdjustment_reason());

						cell = row.createCell(11);
						cell.setCellValue(info.get(i).getGift_to_cn_flag());

						cell = row.createCell(12);
						cell.setCellValue(info.get(i).getConverted_cn_value());

//							cell = row.createCell(28);
//							cell.setCellValue(attribute1[i]);

						j++;
					}

					// to upload excel file
					String filename = "Adjust Reward Report.xlsx";
					String filepath = request.getServletContext().getRealPath("/ruledocs");
					System.out.println(filepath);

					File exportExcelfile = new File(filepath + "/" + filename);
					exportExcelfile.createNewFile();
					System.out.println(exportExcelfile.getAbsolutePath());
					String exportExcelfilepath = exportExcelfile.getAbsolutePath();
					FileInputStream in = new FileInputStream(exportExcelfile);
					FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//							FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

					workbook.write(out);
					out.close();

					// to download excel file
					int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
					response.setContentType("text/html");
					PrintWriter out1 = response.getWriter();
					String fileName = "Adjust Reward Report.xlsx";
					response.setContentType("APPLICATION/OCTET-STREAM");
					response.setContentLengthLong(exportExcelfile.length());
					response.setHeader("Content-Disposition",
							"attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//				              response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//				              FileCopyUtils.copy(in, response.getOutputStream());

					int i;
//				              FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//				              FileInputStream file = new FileInputStream(exportExcelfilepath);
					while ((i = in.read()) != -1) {
						out1.write(i);
					}

					out1.close();

					exportExcelfile.delete();

					in.close();

				} catch (Exception e) {
					e.printStackTrace();
				}

			}
			return new ModelAndView("AdjustRewardApprove");
		}

		if (action.equals("ApproveAll")) {
			if (info != null) {

				int len = info.size();

				System.out.println("Adjust Row size = " + len);
				int infonum = 0;

				for (int i = 0; i < len; i++) {
//							Bpil_opa_scheme_analysis brl = new Bpil_opa_scheme_analysis();
					Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();
					if (info.size() > 0 && info != null) {
						infonum = info.get(i).getOpa_analysis_id();
					} else {
						infonum = brl.getOpa_analysis_id();
					}

					brl.setOpa_analysis_id(infonum);
					brl.setScheme_id(info.get(i).getScheme_id());

//								brl.setRegn(regn[i]);
//								brl.setDepot(depot[i]);
//								brl.setTerr_code(terr_code[i]);
//								brl.setDlr_ac_no(dlr_ac_no[i]);
//								brl.setDlr_cat(dlr_cat[i]);							
//								brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//								brl.setDlr_type(dlr_type[i]);
//								brl.setDlr_name(dlr_name[i]);
//								brl.setReward_section(reward_section[i]);							
//								brl.setReward_type(reward_type[i]);
//								brl.setProduct(product[i]);
//								brl.setUnit(unit[i]);
					// brl.setReward_date(reward_date[i]);

//								if(reward_date[i]!=null)
//								{
//								 Date start_date = null;
//							           try {
//							        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//							           } catch (ParseException e) {
					//
//							               e.printStackTrace();
//							           } 			         
//							           brl.setReward_date(start_date);	
//								}	

//								brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//								brl.setReward_target(Integer.parseInt(reward_target[i]));
//								brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//								brl.setAdditional(Integer.parseInt(additional[i]));
//								brl.setBase_total(Integer.parseInt(base_total[i]));							

//								brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//								brl.setReward_status(reward_status[i]);
//								brl.setReward_total(Integer.parseInt(reward_total[i]));
					brl.setAdjustments(info.get(i).getAdjustments());
					brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
					brl.setAttribute1(info.get(i).getAttribute1());
					brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
					brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//								brl.setInterface_status(interface_status[i]);

					String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='" + brl.getAdjustments()
							+ "', " + "REWARD_ADJUSTMENT_REASON='" + brl.getAdjustment_reason() + "', "
							+ "ATTRIBUTE1='A', " + "REWARD_GIFT_TO_CN='" + brl.getGift_to_cn_flag() + "', "
							+ "REWARD_CONVERTED_CN='" + brl.getConverted_cn_value() + "' "
							+ "WHERE OPA_RW_AN_REWARD_ID='" + brl.getOpa_analysis_id() + "' "
							+ "AND REWARD_SCHEME_ID = '" + brl.getScheme_id() + "'";
					jdbcTemplate.update(query);

//								hibernateTemplate.saveOrUpdate(brl);							

				}
			}
			return new ModelAndView("redirect:/adjustrewardapprove");
		}

		if (action.equals("Approve")) {
			if (info != null) {

				int len = info.size();

				System.out.println("Adjust Row size = " + len);
				int infonum = 0;

				for (int i = 0; i < len; i++) {
					if (info.get(i).getCheckapr() != null) {
//						Bpil_opa_scheme_analysis brl = new Bpil_opa_scheme_analysis();
						Bpil_Opa_Rw_Analysis_Rw brl = new Bpil_Opa_Rw_Analysis_Rw();
						if (info.size() > 0 && info != null) {
							infonum = info.get(i).getOpa_analysis_id();
						} else {
							infonum = brl.getOpa_analysis_id();
						}

						brl.setOpa_analysis_id(infonum);
						brl.setScheme_id(info.get(i).getScheme_id());

//							brl.setRegn(regn[i]);
//							brl.setDepot(depot[i]);
//							brl.setTerr_code(terr_code[i]);
//							brl.setDlr_ac_no(dlr_ac_no[i]);
//							brl.setDlr_cat(dlr_cat[i]);							
//							brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//							brl.setDlr_type(dlr_type[i]);
//							brl.setDlr_name(dlr_name[i]);
//							brl.setReward_section(reward_section[i]);							
//							brl.setReward_type(reward_type[i]);
//							brl.setProduct(product[i]);
//							brl.setUnit(unit[i]);
						// brl.setReward_date(reward_date[i]);

//							if(reward_date[i]!=null)
//							{
//							 Date start_date = null;
//						           try {
//						        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//						           } catch (ParseException e) {
//
//						               e.printStackTrace();
//						           } 			         
//						           brl.setReward_date(start_date);	
//							}	

//							brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//							brl.setReward_target(Integer.parseInt(reward_target[i]));
//							brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//							brl.setAdditional(Integer.parseInt(additional[i]));
//							brl.setBase_total(Integer.parseInt(base_total[i]));							

//							brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//							brl.setReward_status(reward_status[i]);
//							brl.setReward_total(Integer.parseInt(reward_total[i]));
						brl.setAdjustments(info.get(i).getAdjustments());
						brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
						brl.setAttribute1(info.get(i).getAttribute1());
						brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
						brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//							brl.setInterface_status(interface_status[i]);

						System.out.println("status " + info.get(i).getCheckapr());
						if (info.get(i).getCheckapr().equals("Y")) {
							System.out.println("status " + info.get(i).getCheckapr());

							String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='"
									+ brl.getAdjustments() + "', " + "REWARD_ADJUSTMENT_REASON='"
									+ brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='A', " + "REWARD_GIFT_TO_CN='"
									+ brl.getGift_to_cn_flag() + "', " + "REWARD_CONVERTED_CN='"
									+ brl.getConverted_cn_value() + "' " + "WHERE OPA_RW_AN_REWARD_ID='"
									+ brl.getOpa_analysis_id() + "' " + "AND REWARD_SCHEME_ID = '" + brl.getScheme_id()
									+ "'";
							jdbcTemplate.update(query);

							System.out.println("query updated");
						}
					}

//							hibernateTemplate.saveOrUpdate(brl);							

				}
			}
			return new ModelAndView("redirect:/adjustrewardapprove");
		}
		if (action.equals("Reject")) {
			if (info != null) {

				int len = info.size();
				int infonum = 0;
				System.out.println("Adjust Row size = " + len);
				for (int i = 0; i < len; i++) {
					if (info.get(i).getCheckapr() != null) {
						int schemeid = info.get(i).getScheme_id();
						Bpil_opa_scheme_analysis brl = new Bpil_opa_scheme_analysis();

						if (info.size() > 0 && info != null) {
							infonum = info.get(i).getOpa_analysis_id();
						} else {
							infonum = brl.getOpa_analysis_id();
						}

						brl.setOpa_analysis_id(infonum);
						brl.setScheme_id(info.get(i).getScheme_id());

//						brl.setRegn(regn[i]);
//						brl.setDepot(depot[i]);
//						brl.setTerr_code(terr_code[i]);
//						brl.setDlr_ac_no(dlr_ac_no[i]);
//						brl.setDlr_cat(dlr_cat[i]);							
//						brl.setDlr_bill_to(Integer.parseInt(dlr_bill_to[i]));
//						brl.setDlr_type(dlr_type[i]);
//						brl.setDlr_name(dlr_name[i]);
//						brl.setReward_section(reward_section[i]);							
//						brl.setReward_type(reward_type[i]);
//						brl.setProduct(product[i]);
//						brl.setUnit(unit[i]);
						// brl.setReward_date(reward_date[i]);

//						if(reward_date[i]!=null)
//						{
//						 Date start_date = null;
//					           try {
//					        	   start_date = new SimpleDateFormat("dd-MM-yyyy").parse(reward_date[i]);
//					           } catch (ParseException e) {
						//
//					               e.printStackTrace();
//					           } 			         
//					           brl.setReward_date(start_date);	
//						}	

//						brl.setReward_ly(Integer.parseInt(reward_ly[i]));
//						brl.setReward_target(Integer.parseInt(reward_target[i]));
//						brl.setReward_ty(Integer.parseInt(reward_ty[i]));
//						brl.setAdditional(Integer.parseInt(additional[i]));
//						brl.setBase_total(Integer.parseInt(base_total[i]));							

//						brl.setNext_tgt_pending(Integer.parseInt(next_tgt_pending[i]));
//						brl.setReward_status(reward_status[i]);
//						brl.setReward_total(Integer.parseInt(reward_total[i]));
						brl.setAdjustments(info.get(i).getAdjustments());
						brl.setAdjustment_reason(info.get(i).getAdjustment_reason());
						brl.setAttribute1(info.get(i).getAttribute1());
						brl.setGift_to_cn_flag(info.get(i).getGift_to_cn_flag());
						brl.setConverted_cn_value(info.get(i).getConverted_cn_value());
//						brl.setInterface_status(interface_status[i]);

						if (info.get(i).getCheckapr().equals("Y")) {

							String query = "update BPIL_OPA_RW_ANALYSIS_RW " + "set REWARD_ADJUSTMENTS='"
									+ brl.getAdjustments() + "'," + "REWARD_ADJUSTMENT_REASON='"
									+ brl.getAdjustment_reason() + "', " + "ATTRIBUTE1='R', " + "REWARD_GIFT_TO_CN='"
									+ brl.getGift_to_cn_flag() + "', " + "REWARD_CONVERTED_CN='"
									+ brl.getConverted_cn_value() + "' " + "WHERE OPA_RW_AN_REWARD_ID='"
									+ brl.getOpa_analysis_id() + "' " + "AND REWARD_SCHEME_ID = '" + brl.getScheme_id()
									+ "'";
							jdbcTemplate.update(query);

						}
					}
//						hibernateTemplate.saveOrUpdate(brl);		

				}
			}
//					String query2="update BPIL_SCHEME_MASTER set active_flag='Freezed' WHERE scheme_id='"+scheme_name+"'";				
//					jdbcTemplate.update(query2);
			return new ModelAndView("redirect:/adjustrewardapprove");
		}

		return new ModelAndView("AdjustRewardApprove");
//		return new ModelAndView("redirect:/adjustrewardapprove");
	}

	/*------------------------------- scheme analysis --------------------------------------------------------*/

	@RequestMapping("/schemeanalysis")
	public ModelAndView schemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("SchemeAnalysis");
	}
	
	@RequestMapping("/salesschemeanalysis")
	public ModelAndView salesschemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("SalesSchemeAnalysis");
	}
	
	@RequestMapping("/mxlfschemeanalysis")
	public ModelAndView mxlfschemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("MaxLifeSchemeAnalysis");
	}

	@RequestMapping("/schemeanalysisreport")
	public ModelAndView schemeanalysisreport(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("SchemeAnalysisReport");
	}

	@RequestMapping("/tsischemeanalysisreport")
	public ModelAndView tsischemeanalysisreport(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("TSISchemeAnalysisReport");
	}

	@RequestMapping("/regnschemeanalysisreport")
	public ModelAndView regnschemeanalysisreport(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("RegnSchemeAnalysisReport");
	}

	@RequestMapping("/customerschemeanalysisreport")
	public ModelAndView customerschemeanalysisreport(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("CustomerSchAnalysisReport");
	}

	@RequestMapping("/depocustomerschemeanalysisreport")
	public ModelAndView depocustomerschemeanalysisreport(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("DepoCustomerSchAnalysisReport");
	}

	@RequestMapping("/financialanalysis")
	public ModelAndView financialanalysis(@RequestParam(value = "scheme_id") String scheme_id, ModelMap map,
			Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		model.addAttribute("scheme_id", scheme_id);
		return new ModelAndView("FinancialAnalysis");
	}

	@RequestMapping("/tsifinancialanalysis")
	public ModelAndView tsifinancialanalysis(@RequestParam(value = "scheme_id") String scheme_id, ModelMap map,
			Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		model.addAttribute("scheme_id", scheme_id);
		return new ModelAndView("TSIFinancialAnalysis");
	}

	@RequestMapping("/deposchemeanalysisreport")
	public ModelAndView deposchemeanalysisreport(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("depoSchemeAnalysisReport");
	}

	@RequestMapping("/deposchemeanalysis")
	public ModelAndView deposchemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("depoSchemeAnalysis");
	}

	@RequestMapping("/regnschemeanalysis")
	public ModelAndView regnschemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("regnSchemeAnalysis");
	}

	@RequestMapping("/tsischemeanalysis")
	public ModelAndView tsischemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("TSISchemeAnalysis");
	}

	@RequestMapping("/tsiuserschemeanalysis")
	public ModelAndView tsiuserschemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("TSIUserSchemeAnalysis");
	}

	@RequestMapping("/depotsischemeanalysis")
	public ModelAndView depotsischemeanalysis(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("TSIdepoSchemeAnalysis");
	}

	@RequestMapping("/dealerwhatif")
	public ModelAndView dealerwhatif(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("DealerWhatIf");
	}

	@RequestMapping("/dealerSchanSoap")
	public ModelAndView dealerSchanSoap(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("DealerSchAnSoap");
	}

	@RequestMapping("/dealerSchanRest")
	public ModelAndView dealerSchanRest(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("DealerSchAnRest");
	}

	@RequestMapping("/dealerSchanDepoSoap")
	public ModelAndView dealerSchanDepoSoap(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("DealerSchAnDepoSoap");
	}

	@RequestMapping("/dealerSchanDepoRest")
	public ModelAndView dealerSchanDepoRest(ModelMap map, Model model, HttpServletRequest request) {
		String kwm_user = (String) request.getSession().getAttribute("kwm_user");
		if (kwm_user != null) {

		}
		return new ModelAndView("DealerSchAnDepoRest");
	}

	@RequestMapping(value = "/getopawhatifInterview", method = RequestMethod.GET)
	public void getopawhatifInterview(@RequestParam(value = "scheme_id") String scheme_id, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id = '" + scheme_id + "'");

			String opawhatifInt = "";
			if (dml != null && dml.size() > 0) {
				opawhatifInt = dml.get(0).getOpa_whatif_url();
			}
			String json = null;

			json = new Gson().toJson(opawhatifInt);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getopaschanInterview", method = RequestMethod.GET)
	public void getopaschanInterview(@RequestParam(value = "scheme_id") String scheme_id, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id = '" + scheme_id + "'");

			String opawhatifInt = "";
			if (dml != null && dml.size() > 0) {
				opawhatifInt = dml.get(0).getSch_opa_url();
			}
			String json = null;

			json = new Gson().toJson(opawhatifInt);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschopawebserviceUrl", method = RequestMethod.GET)
	public void getopawebserviceUrl(@RequestParam(value = "scheme_id") String scheme_id, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id = '" + scheme_id + "'");

			String schopawebserviceUrl = "";
			System.out.println("schopawebserviceUrl" + schopawebserviceUrl);
			if (dml != null && dml.size() > 0) {
				schopawebserviceUrl = dml.get(0).getSch_opa_url();
				System.out.println("schopawebserviceUrl" + schopawebserviceUrl);
			}
			System.out.println("schopawebserviceUrl" + schopawebserviceUrl);
			String json = null;

			json = new Gson().toJson(schopawebserviceUrl);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// load LOV data

	@RequestMapping(value = "/getparentschemename", method = RequestMethod.GET)
	public void getparentschemename(@RequestParam(value = "sbl") String sbl, @RequestParam(value = "sfy") String sfy,
			HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_business_line = '" + sbl + "' and scheme_fin_yr = '" + sfy
							+ "'");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemenamewhatif", method = RequestMethod.GET)
	public void getschemenamewhatif(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 7) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.active_flag = 'Active' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id + "  order by sm.scheme_id");

//		 			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.created_by = bu.user_id and bu.supervisor_id = "+user_id+"  order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//	ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Active'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Active'  order by scheme_id");

//	ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where scheme_business_line = '"+ PMG_ML_Group + "' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where   active_flag = 'Active'  order by scheme_id");

//						ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mst  order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

//	@RequestMapping(value = "/getrwpschemename1", method = RequestMethod.GET)
	@RequestMapping(value = "/getrwpschemename", method = RequestMethod.GET)
	public void getrwpschemename1(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 7) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.active_flag = 'Active' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id + " order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//	ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Active'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Active' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where   active_flag = 'Active' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

//		@RequestMapping(value = "/getschemename1", method = RequestMethod.GET)
	@RequestMapping(value = "/getschschemename", method = RequestMethod.GET)
	public void getschemename1(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 7) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.active_flag = 'Active' and sm.scheme_type <> 'TSI' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id + " order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Active'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Active' and scheme_type <> 'TSI' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where   active_flag = 'Active' and scheme_type <> 'TSI' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	@RequestMapping(value = "/getADMID", method = RequestMethod.GET)
	public void getADMID(HttpServletRequest request, Model model, HttpServletResponse response, @RequestParam(value = "schemeid") String schemeid) {

		try {

			String sql_maxlife_Adms = "SELECT ID, "
			   		+ "ADM_ID, "
			   		+ "ADM_JOINING_DATE, "
			   		+ "ADM_NAME, "
			   		+ "ADM_PROMOTION_DATE, "
			   		+ "ADM_ROLE, "
			   		+ "ADM_TERMINATED_COUNT "
			   		+ "FROM MAXLIFE_ADM WHERE ADM_LOCATION = '"+schemeid+"' and ROWNUM <= 5";
					
			
			 
			 List<Maxlife_Adm> maxlife_Adms = jdbcTemplate.query(sql_maxlife_Adms, new RowMapper<Maxlife_Adm>() {

					@Override
					public Maxlife_Adm mapRow(ResultSet rs, int rowNum) throws SQLException {
						Maxlife_Adm maxlife_Adm = new Maxlife_Adm();
			
						maxlife_Adm.setID(rs.getInt("ID"));
						System.out.println("ADM id = "+maxlife_Adm.getID());
						maxlife_Adm.setADM_ID(rs.getInt("ADM_ID"));
						maxlife_Adm.setADM_JOINING_DATE(rs.getDate("ADM_JOINING_DATE"));
						maxlife_Adm.setADM_NAME(rs.getString("ADM_NAME"));
						maxlife_Adm.setADM_PROMOTION_DATE(rs.getDate("ADM_PROMOTION_DATE"));
						maxlife_Adm.setADM_ROLE(rs.getString("ADM_ROLE"));
						maxlife_Adm.setADM_TERMINATED_COUNT(rs.getInt("ADM_TERMINATED_COUNT"));
						
						
						return maxlife_Adm;
					}
					
				});

				String json = null;

				json = new Gson().toJson(maxlife_Adms);
				response.setContentType("application/json");
				response.getWriter().write(json);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	@RequestMapping(value = "/getCity", method = RequestMethod.GET)
	public void getCity(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			String sql_maxlife_Adms = "SELECT ID, "
			   		+ "ADM_ID, "
			   		+ "ADM_LOCATION, "
			   		+ "ADM_NAME, "
			   		+ "ADM_PROMOTION_DATE, "
			   		+ "ADM_ROLE, "
			   		+ "ADM_TERMINATED_COUNT "
			   		+ "FROM MAXLIFE_ADM WHERE ROWNUM <= 5";
					
			
			 
			 List<Maxlife_Adm> maxlife_Adms = jdbcTemplate.query(sql_maxlife_Adms, new RowMapper<Maxlife_Adm>() {

					@Override
					public Maxlife_Adm mapRow(ResultSet rs, int rowNum) throws SQLException {
						Maxlife_Adm maxlife_Adm = new Maxlife_Adm();
			
						maxlife_Adm.setID(rs.getInt("ID"));
						System.out.println("ADM id = "+maxlife_Adm.getID());
						maxlife_Adm.setADM_ID(rs.getInt("ADM_ID"));
						maxlife_Adm.setLocation(rs.getString("ADM_LOCATION"));
						maxlife_Adm.setADM_NAME(rs.getString("ADM_NAME"));
						maxlife_Adm.setADM_PROMOTION_DATE(rs.getDate("ADM_PROMOTION_DATE"));
						maxlife_Adm.setADM_ROLE(rs.getString("ADM_ROLE"));
						maxlife_Adm.setADM_TERMINATED_COUNT(rs.getInt("ADM_TERMINATED_COUNT"));
						
						
						return maxlife_Adm;
					}
					
				});

				String json = null;

				json = new Gson().toJson(maxlife_Adms);
				response.setContentType("application/json");
				response.getWriter().write(json);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	@RequestMapping(value = "/getAgents")
	public ModelAndView getAgents(HttpServletRequest request, Model model, HttpServletResponse response, @RequestParam(value = "ADMID") int ADMID) {

			String sql_maxlife_Agent = "SELECT distinct ag.ID, "
			 		+ "ag.AG_ID, "
			 		+ "ah.ADM_ID, "
			 		+ "ag.AGENT_ID, "
			 		+ "ag.AGENT_DOJ, "
			 		+ "ag.AGENT_STATUS, "
			 		+ "ah.MONTH "
			 		+ "FROM MAXLIFE_AGENT ag , "
			 		+ "MAXLIFE_ADM_HIERARCHY ah "
			 		+ "where ag.AGENT_ID = ah.AGENT_ID "
			 		+ "and ah.ADM_ID = " + ADMID;
				
				 
				 List<Maxlife_Agent> maxlife_Agents = jdbcTemplate.query(sql_maxlife_Agent, new RowMapper<Maxlife_Agent>() {

						@Override
						public Maxlife_Agent mapRow(ResultSet rs, int rowNum) throws SQLException {
							Maxlife_Agent maxlife_Agent = new Maxlife_Agent();
				
							maxlife_Agent.setID(rs.getInt("ID"));
							maxlife_Agent.setAG_ID(rs.getInt("AG_ID"));
							maxlife_Agent.setADM_ID(rs.getInt("ADM_ID"));
							maxlife_Agent.setAGENT_ID(rs.getInt("AGENT_ID"));
							maxlife_Agent.setAGENT_DOJ(rs.getDate("AGENT_DOJ"));
							maxlife_Agent.setAGENT_STATUS(rs.getString("AGENT_STATUS"));
							maxlife_Agent.setMonth(rs.getString("MONTH"));
							
							return maxlife_Agent;
						}
						
					});

				 model.addAttribute("Info_Grid", maxlife_Agents);
				 model.addAttribute("schem_name",ADMID);
				 
				 return new ModelAndView("MaxLifeAgents");


	}
	
	@RequestMapping(value = "/agentdetails")
	public ModelAndView agentdetails(HttpServletRequest request, Model model, HttpServletResponse response, @RequestParam(value = "AGENTID") int AGENTID) {

			String sql_maxlife_Agent = "SELECT distinct ag.ID, "
			 		+ "ag.AG_ID, "
			 		+ "ah.ADM_ID, "
			 		+ "ag.AGENT_ID, "
			 		+ "ag.AGENT_DOJ, "
			 		+ "ag.AGENT_STATUS, "
			 		+ "ah.MONTH "
			 		+ "FROM MAXLIFE_AGENT ag , "
			 		+ "MAXLIFE_ADM_HIERARCHY ah "
			 		+ "where ag.AGENT_ID = ah.AGENT_ID "
			 		+ "and ah.AGENT_ID = " + AGENTID;
				
				 
				 List<Maxlife_Agent> maxlife_Agents = jdbcTemplate.query(sql_maxlife_Agent, new RowMapper<Maxlife_Agent>() {

						@Override
						public Maxlife_Agent mapRow(ResultSet rs, int rowNum) throws SQLException {
							Maxlife_Agent maxlife_Agent = new Maxlife_Agent();
				
							maxlife_Agent.setID(rs.getInt("ID"));
							maxlife_Agent.setAG_ID(rs.getInt("AG_ID"));
							maxlife_Agent.setADM_ID(rs.getInt("ADM_ID"));
							maxlife_Agent.setAGENT_ID(rs.getInt("AGENT_ID"));
							maxlife_Agent.setAGENT_DOJ(rs.getDate("AGENT_DOJ"));
							maxlife_Agent.setAGENT_STATUS(rs.getString("AGENT_STATUS"));
							maxlife_Agent.setMonth(rs.getString("MONTH"));
							
							return maxlife_Agent;
						}
						
					});

				 model.addAttribute("Info_Grid", maxlife_Agents.get(0));
				 
				 return new ModelAndView("MaxLifeAgentsDetails");


	}

	@RequestMapping(value = "/getondemandschschemename", method = RequestMethod.GET)
	public void getondemandschemename1(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 7) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where and sm.scheme_type <> 'TSI' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id
								+ " and sm.sch_opa_url is not null and sm.opa_sch_an_name is not null order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Active'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and scheme_type <> 'TSI' and sch_opa_url is not null and opa_sch_an_name is not null order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where scheme_type <> 'TSI' and sch_opa_url is not null and opa_sch_an_name is not null order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			} else if (profile_id == 2) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where sm.active_flag = 'Active' and sm.scheme_type <> 'TSI' and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
								+ user_id
								+ " and sm.sch_opa_url is not null and sm.opa_sch_an_name is not null  order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

//		@RequestMapping(value = "/gettsischemename1", method = RequestMethod.GET)
	@RequestMapping(value = "/gettsischschemename", method = RequestMethod.GET)
	public void gettsischemename1(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 7) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu, Bpil_Dealer_Master dm where sm.active_flag = 'Active' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id + " order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			}
			if (profile_id == 8) {
				System.out.println("tsi 8");
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select distinct sm from New_Scheme_mstr sm, Bpil_Users bu, Bpil_Dealer_Master dm, Bpil_Scheme_Depots_Details sd where sm.active_flag = 'Active' and dm.territory_code = bu.terr_code and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
								+ user_id + " order by sm.scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Active'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Active' and scheme_type = 'TSI' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where   active_flag = 'Active' and scheme_type = 'TSI' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getfinschemename", method = RequestMethod.GET)
	public void getfinschemename(@RequestParam(value = "schemeid") String schemeid, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//	ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Provisioned' and scheme_id = '"+schemeid +"'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Provisioned' and scheme_type <> 'TSI' and scheme_id = '"
								+ schemeid + "' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where  active_flag = 'Provisioned' and scheme_type <> 'TSI' and scheme_id = '"
								+ schemeid + "' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/gettsifinschemename", method = RequestMethod.GET)
	public void gettsifinschemename(@RequestParam(value = "schemeid") String schemeid, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");
			if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//	ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Provisioned' and scheme_id = '"+schemeid +"'");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Provisioned' and scheme_type = 'TSI' and scheme_id = '"
								+ schemeid + "' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where  active_flag = 'Provisioned' and scheme_type = 'TSI' and scheme_id = '"
								+ schemeid + "' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemenamedepo", method = RequestMethod.GET)
	public void getschemenamedepo(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
					"select sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where sm.active_flag = 'Active' and sm.scheme_type <> 'TSI' and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
							+ userid + " order by sm.scheme_id");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getschemenameregn", method = RequestMethod.GET)
	public void getschemenameregn(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
					"select distinct sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where sm.active_flag = 'Active' and sm.scheme_type <> 'TSI' and sm.scheme_id = sd.scheme_id and sd.sch_regn = bu.region_code and bu.user_id = "
							+ userid + " order by sm.scheme_id");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/gettsischemenamedepo", method = RequestMethod.GET)
	public void gettsischemenamedepo(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
					"select sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where sm.active_flag = 'Active' and sm.scheme_type = 'TSI' and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
							+ userid + " order by sm.scheme_id");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	/*--------------------------------------  Rule Library  --------------------------------------------------*/

	// autofill
	@RequestMapping("/rule")
	public ModelAndView rule(ModelMap map, Model model, HttpServletRequest request) {

		ArrayList<Bpil_Rule_Library> dml = (ArrayList<Bpil_Rule_Library>) hibernateTemplate
				.find("from Bpil_Rule_Library");
		for (Bpil_Rule_Library aa : dml) {
			///// count docs
			try {
				PreparedStatement stmt = hibernateconfiguration.dataSource().getConnection().prepareStatement(
						"select count(RULE_DOC_NAME) from BPIL_RULE_LIBRARY_DOCS where RULE_ID=" + aa.getRule_id());
				ResultSet rs = stmt.executeQuery();
				if (rs.next()) {
					int cnt = rs.getInt(1);
					aa.setAttribute1(cnt);
				} else {

				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
		model.addAttribute("Ruledata", dml);
		return new ModelAndView("RuleLirary");
	}

	// open form
	@RequestMapping("/addrule")
	public ModelAndView AddNewRule(ModelMap map, Model model, HttpServletRequest request) {
		return new ModelAndView("AddNewRule");
	}

	// save new rule
	@Transactional
	@RequestMapping("/addnewrule")
	public ModelAndView addrule(@ModelAttribute(value = "Bpil_Rule_Library") Bpil_Rule_Library bpil_rule_library,
			ModelMap map, Model model, HttpServletRequest request, @RequestParam CommonsMultipartFile[] doc_file) {

		hibernateTemplate.saveOrUpdate(bpil_rule_library);
		int id = bpil_rule_library.getRule_id();

		if (null != doc_file) {
			for (MultipartFile multipartFile : doc_file) {

				Bpil_Rule_LibraryDoc docs = new Bpil_Rule_LibraryDoc();

				String fileName = multipartFile.getOriginalFilename();

				try {
					docs.setDoc_file(multipartFile.getBytes());
				} catch (IOException e) {
					e.printStackTrace();
				}
				docs.setDoc_name(multipartFile.getOriginalFilename());
				docs.setDoc_type(multipartFile.getContentType());
				docs.setDoc_size(multipartFile.getSize());

				docs.setRule_id(id);

				hibernateTemplate.saveOrUpdate(docs);

			}
		}

		return new ModelAndView("redirect:/rule");
	}

	private static final int BUFFER_SIZE = 4096;

//	    private String filePath = "/home/omfys/Downloads/SpringProject.zip";	    
//	    private String filePath1 = "/home/omfys/Downloads/aa";
//	    
	// rulelibrary
	@RequestMapping(value = "/rulelibrary", method = RequestMethod.POST)
	public void loaddoc(ModelMap map, Model model, HttpServletRequest request, HttpServletResponse response) {
		String str[] = request.getParameterValues("sel1");
		String ruleids[] = request.getParameterValues("rule_id");

		if (str != null) {
			String query = "select * from Bpil_Rule_Library_Docs where rule_id in (";
			for (int i = 0; i < str.length; i++) {
				System.out.println("rule id = " + str[i]);

				if (i == 0) {
					query = query.concat(str[i]);
				} else {
					query = query.concat("," + str[i]);
				}

			}
			query = query.concat(")");
			System.out.println(query);
			ArrayList<Bpil_Rule_LibraryDoc> Doc_List = new ArrayList<Bpil_Rule_LibraryDoc>();
			try {
				PreparedStatement stmt = hibernateconfiguration.dataSource().getConnection().prepareStatement(query);

				ResultSet rs = stmt.executeQuery();
				while (rs.next()) {
					Bpil_Rule_LibraryDoc libdoc = new Bpil_Rule_LibraryDoc();

					libdoc.setDoc_id(rs.getInt("RULE_DOC_ID"));
					libdoc.setRule_id(rs.getInt("RULE_ID"));
					libdoc.setDoc_file(rs.getBytes("RULE_DOC_FILE"));
					libdoc.setDoc_name(rs.getString("RULE_DOC_NAME"));
					libdoc.setDoc_type(rs.getString("RULE_DOC_TYPE"));
					libdoc.setDoc_size(rs.getLong("RULE_DOC_SIZE"));
					libdoc.setCreated_by(rs.getInt("CREATED_BY"));
					libdoc.setCreation_date(rs.getDate("CREATION_DATE"));
					libdoc.setLast_updated_by(rs.getInt("LAST_UPDATED_BY"));
					libdoc.setLast_update_date(rs.getDate("LAST_UPDATE_DATE"));

					System.out.println("docid = " + libdoc.getDoc_id());

					Doc_List.add(libdoc);

				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				byte[] buffer = new byte[1024];

				String filepath = request.getServletContext().getRealPath("/ruledocs");
				System.out.println(filepath);

				File zipfile = new File(filepath + "/ruledocs.zip");
				zipfile.createNewFile();
				System.out.println(zipfile.getAbsolutePath());
				String zipfilepath = zipfile.getAbsolutePath();
				FileInputStream zfis = new FileInputStream(zipfile);

				FileOutputStream fzos = new FileOutputStream(zipfilepath);
				ZipOutputStream zos = new ZipOutputStream(fzos);

				for (Bpil_Rule_LibraryDoc libdoc : Doc_List) {
					System.out.println(libdoc.getDoc_id());

					File file = new File(filepath + "/" + libdoc.getDoc_name());
					file.createNewFile();
					System.out.println(file.getAbsolutePath());
					FileOutputStream fos = new FileOutputStream(file.getAbsolutePath());

					fos.write(libdoc.getDoc_file());

					File srcFile = new File(file.getAbsolutePath());

					FileInputStream fis = new FileInputStream(srcFile);

					// begin writing a new ZIP entry, positions the stream to the start of the entry
					// data
					zos.putNextEntry(new ZipEntry(srcFile.getName()));

					int length;

					while ((length = fis.read(buffer)) > 0) {
						zos.write(buffer, 0, length);
					}

					zos.closeEntry();

					fis.close();

					fos.close();

					file.delete();

				}

				zos.close();
				fzos.close();

				int len = Integer.parseInt(Long.toString(zipfile.length()));

				response.setContentType("application/zip");
				response.setContentLengthLong(zipfile.length());
				response.setHeader("Content-Disposition", "attachment; filename =\"" + zipfile.getName() + "\"");

				FileCopyUtils.copy(zfis, response.getOutputStream());

				zipfile.delete();

				zfis.close();

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}

	}

	/// -----------------------------code for IT scheme history
	/// ------------------------------------//
	//

	@RequestMapping("/schemehistoryforit")
	public ModelAndView schemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";
		BpilLoginController bpilLoginController = new BpilLoginController();
		String loginString = (String) request.getSession().getAttribute("loginflag");
		
		try
		
		{
			if (loginString.equals("Y")) {

				String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER ORDER BY SCHEME_ID DESC";

				List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

					@Override
					public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
						New_Scheme_mstr aContact = new New_Scheme_mstr();

						aContact.setScheme_id(rs.getInt("SCHEME_ID"));
						aContact.setScheme_code(rs.getString("SCHEME_CODE"));
						aContact.setScheme_name(rs.getString("SCHEME_NAME"));
						aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

						if (rs.getDate("START_DATE") != null) {
							DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
							String dateStr1 = ser1.format(rs.getDate("START_DATE"));
							aContact.setStart_date1(dateStr1);
//									try {
//										System.out.println(ser1.parse(rs.getString("START_DATE")));
//									} catch (ParseException e) {
//											e.printStackTrace();
//									}
						}

						if (rs.getDate("END_DATE") != null) {
							DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
							String dateStr1 = ser1.format(rs.getDate("END_DATE"));
							aContact.setEnd_date1(dateStr1);
//									try {
//										System.out.println(ser1.parse(rs.getString("END_DATE")));
//									} catch (ParseException e) {
//											e.printStackTrace();
//									}
						}

						return aContact;
					}

				});

				model.addAttribute("historydata", dml);

				return new ModelAndView("SchemeITHistory");
			} else {
				Bpil_Users kwm_users = new Bpil_Users();
				map.addAttribute("kwm_users", kwm_users);
				System.out.println("Here ------> berger login"); // Cursor comes to here
				return new ModelAndView("login");
			}
		}
		catch(NullPointerException e)
		{
			Bpil_Users kwm_users = new Bpil_Users();
			map.addAttribute("kwm_users", kwm_users);
			System.out.println("Here ------> berger login"); // Cursor comes to here
			return new ModelAndView("login");
		}
		

	}

	@RequestMapping("/wipschemehistoryforit")
	public ModelAndView wipschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Incomplete' or ACTIVE_FLAG='Cancel' or ACTIVE_FLAG='Rejected' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/approvalpendingschemehistoryforit")
	public ModelAndView approvalpendingschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Pending for Approval' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/requestedschemehistoryforit")
	public ModelAndView requestedpendingschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/readytolaunchschemehistoryforit")
	public ModelAndView readytolaunchschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Ready To Launch' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/activeschemehistoryforit")
	public ModelAndView activeschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Active' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/freezedschemehistoryforit")
	public ModelAndView freezedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Freezed' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/closedschemehistoryforit")
	public ModelAndView closedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Closed' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/processedschemehistoryforit")
	public ModelAndView processedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Processed' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superwipschemehistoryforit")
	public ModelAndView superwipschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Incomplete' or sm.ACTIVE_FLAG = 'Cancel' or sm.ACTIVE_FLAG = 'Rejected') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superapprovalpendingschemehistoryforit")
	public ModelAndView superapprovalpendingschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Pending for Approval') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superrequestedschemehistoryforit")
	public ModelAndView superrequestedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Requested') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superreadytolaunchschemehistoryforit")
	public ModelAndView superreadytolaunchschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Ready To Launch') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superactiveschemehistoryforit")
	public ModelAndView superactiveschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Active') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superprocessedschemehistoryforit")
	public ModelAndView superprocessedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Processed') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superfreezedschemehistoryforit")
	public ModelAndView superfreezedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Freezed') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/superclosedschemehistoryforit")
	public ModelAndView superclosedschemehistory(ModelMap map, Model model, HttpServletRequest request) {

		int user_id = (Integer) request.getSession().getAttribute("userid");
//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Closed') and sm.CREATED_BY = bu.USER_ID and bu.SUPERVISOR_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/marketingclosedschemehistoryforit")
	public ModelAndView marketingclosedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Closed' AND SCHEME_BUSINESS_LINE = '"
				+ PMG_ML_Group + "' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/marketingapprovalpendingschemehistoryforit")
	public ModelAndView marketingapprovalpendingschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Pending for Approval' AND SCHEME_BUSINESS_LINE = '"
				+ PMG_ML_Group + "' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/marketingactiveschemehistoryforit")
	public ModelAndView marketingactiveschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Active' AND SCHEME_BUSINESS_LINE = '"
				+ PMG_ML_Group + "' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/marketingrequestedschemehistoryforit")
	public ModelAndView marketingrequestedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' AND SCHEME_BUSINESS_LINE = '"
				+ PMG_ML_Group + "' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/marketingprocessedschemehistoryforit")
	public ModelAndView marketingprocessedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Processed' AND SCHEME_BUSINESS_LINE = '"
				+ PMG_ML_Group + "' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/marketingfreezedschemehistoryforit")
	public ModelAndView marketingfreezedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Freezed' AND SCHEME_BUSINESS_LINE = '"
				+ PMG_ML_Group + "' ORDER BY SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/depoactivechemehistoryforit")
	public ModelAndView depoactiveschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Active') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_DEPOT_CODE = bu.DEPOT_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/regnactivechemehistoryforit")
	public ModelAndView regnactiveschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Active') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_REGN = bu.REGION_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/tsiactivechemehistoryforit")
	public ModelAndView tsiactiveschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu, Bpil_Dealer_Master dm where (sm.ACTIVE_FLAG = 'Active') and sm.SCHEME_ID = sd.SCHEME_ID and dm.terr_code = bu.terr_code and sd.sch_depot_code = bu.depot_code and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/regnprocessedchemehistoryforit")
	public ModelAndView regnprocessedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Processed') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_REGN = bu.REGION_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/tsiprocessedchemehistoryforit")
	public ModelAndView tsiprocessedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu, Bpil_Dealer_Master dm where (sm.ACTIVE_FLAG = 'Processed') and sm.SCHEME_ID = sd.SCHEME_ID and dm.terr_code = bu.terr_code and sd.sch_depot_code = bu.depot_code and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/regnfreezedchemehistoryforit")
	public ModelAndView regnfreezedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Freezed') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_REGN = bu.REGION_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/tsifreezedchemehistoryforit")
	public ModelAndView tsifreezedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu, Bpil_Dealer_Master dm where (sm.ACTIVE_FLAG = 'Freezed') and sm.SCHEME_ID = sd.SCHEME_ID and dm.terr_code = bu.terr_code and sd.sch_depot_code = bu.depot_code and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/regnclosedchemehistoryforit")
	public ModelAndView regnclosedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Closed') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_REGN = bu.REGION_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/tsiclosedchemehistoryforit")
	public ModelAndView tsiclosedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select distinct sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu, Bpil_Dealer_Master dm where (sm.ACTIVE_FLAG = 'Closed') and sm.SCHEME_ID = sd.SCHEME_ID and dm.terr_code = bu.terr_code and sd.sch_depot_code = bu.depot_code and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/depoprocessedchemehistoryforit")
	public ModelAndView depoprocessedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Processed') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_DEPOT_CODE = bu.DEPOT_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/depofreezedchemehistoryforit")
	public ModelAndView depofreezedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Freezed') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_DEPOT_CODE = bu.DEPOT_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	@RequestMapping("/depoclosedchemehistoryforit")
	public ModelAndView depoclosedschemehistory(ModelMap map, Model model, HttpServletRequest request) {
		String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");
		int user_id = (Integer) request.getSession().getAttribute("userid");

//		String sql = "SELECT SCHEME_ID,SCHEME_CODE,SCHEME_NAME,ACTIVE_FLAG,START_DATE,END_DATE FROM BPIL_SCHEME_MASTER WHERE ACTIVE_FLAG='Requested' OR ACTIVE_FLAG='Active'OR ACTIVE_FLAG='Review' ORDER BY SCHEME_ID DESC";

		String sql = "select sm.* from BPIL_SCHEME_MASTER sm, BPIL_SCHEME_DEPOT_DETAILS sd, BPIL_USERS bu where (sm.ACTIVE_FLAG = 'Closed') and sm.SCHEME_ID = sd.SCHEME_ID and sd.SCH_DEPOT_CODE = bu.DEPOT_CODE and bu.USER_ID = "
				+ user_id + " ORDER BY sm.SCHEME_ID DESC";

		List<New_Scheme_mstr> dml = jdbcTemplate.query(sql, new RowMapper<New_Scheme_mstr>() {

			@Override
			public New_Scheme_mstr mapRow(ResultSet rs, int rowNum) throws SQLException {
				New_Scheme_mstr aContact = new New_Scheme_mstr();

				aContact.setScheme_id(rs.getInt("SCHEME_ID"));
				aContact.setScheme_code(rs.getString("SCHEME_CODE"));
				aContact.setScheme_name(rs.getString("SCHEME_NAME"));
				aContact.setActive_flag(rs.getString("ACTIVE_FLAG"));

				if (rs.getDate("START_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("START_DATE"));
					aContact.setStart_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("START_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				if (rs.getDate("END_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("END_DATE"));
					aContact.setEnd_date1(dateStr1);
//							try {
//								System.out.println(ser1.parse(rs.getString("END_DATE")));
//							} catch (ParseException e) {
//									e.printStackTrace();
//							}
				}

				return aContact;
			}

		});

		model.addAttribute("historydata", dml);

		return new ModelAndView("SchemeITHistory");
	}

	// load it history

	@RequestMapping("/schemehistorydetails")
	public ModelAndView schemehistorydetails(@RequestParam(value = "scheme_id") String scheme_id, ModelMap map,
			Model model, HttpServletRequest request) {
		int schemeid = Integer.parseInt(scheme_id);

		String username = (String) request.getSession().getAttribute("username");

		New_Scheme_mstr mstr = schememasterdao.schemeautofill(schemeid);

		ArrayList<Bpil_Scheme_Doc> doc_line = schememasterdao.docautofill(schemeid);

		ArrayList<Bpil_Scheme_Benefit> gift_line = schememasterdao.giftautofill(schemeid);
		int gift_id = gift_line.get(0).getGift_id();
		ArrayList<Bpil_Gift_Master> aa = (ArrayList<Bpil_Gift_Master>) hibernateTemplate
				.find("from Bpil_Gift_Master where gift_id=?", gift_id);
		String name = aa.get(0).getGift_name();
		mstr.setGift_name(name);

		model.addAttribute("gift_list", gift_line);

		/*
		 * String depots=mstr.getAppl_depot_code(); String depo[] = null; if(depots !=
		 * null){ depo=depots.split(","); } model.addAttribute("depo",depo);
		 */

		if (mstr.getAppl_depot_code() != null || mstr.getAppl_depot_code() != "") {
			String depots = mstr.getAppl_depot_code();
			if (depots != null && depots != "") {
				String depo1[] = depots.split(",");
				String depo[] = new String[depo1.length];
				for (int i = 0; i < depo1.length; i++) {

					ArrayList<Bpil_Depot_Master> getdata = (ArrayList<Bpil_Depot_Master>) hibernateTemplate
							.find("from Bpil_Depot_Master where depot_code=?", depo1[i]);

					depo[i] = getdata.get(0).getDepot_name();
				}

				model.addAttribute("depo1", depo1);
				model.addAttribute("depo", depo);
			}
		}

		ArrayList<Bpil_Scheme_Product> dml = (ArrayList<Bpil_Scheme_Product>) hibernateTemplate
				.find("from Bpil_Scheme_Product where scheme_id=?", schemeid);

		int user_id = mstr.getCreated_by();
		ArrayList<Bpil_Users> getdata = (ArrayList<Bpil_Users>) hibernateTemplate
				.find("from Bpil_Users where user_id=?", user_id);

		String fname = getdata.get(0).getFirst_name();
		String lname = getdata.get(0).getLast_name();

		model.addAttribute("firstname", fname);
		model.addAttribute("lastname", lname);

		model.addAttribute("JSON", mstr);
		model.addAttribute("doc_list", doc_line);
		model.addAttribute("product_list", dml);

		return new ModelAndView("ITHistoryDetails");
	}

	/*--------------------------- call interface to close scheme status ----------------------*/

	@RequestMapping("/showsaveform")
	public ModelAndView showsaveform(ModelMap map, Model model, HttpServletRequest request) {
		return new ModelAndView("showsaveform");
	}

	@RequestMapping("/schemeinterface")
	public ModelAndView schemeinterface(ModelMap map, Model model, HttpServletRequest request) {
		return new ModelAndView("SchemeInterface");
	}

	@RequestMapping(value = "/getBudgetVsActualschemename", method = RequestMethod.GET)
	public void getBudgetVsActualschemename(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {
			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			if (profile_id == 6) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where created_by = " + user_id
								+ " and   active_flag = 'Closed' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 7) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.active_flag = 'Closed' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id);

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where active_flag = 'Closed' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getinterfaceschemename", method = RequestMethod.GET)
	public void getschemename2(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {
			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			if (profile_id == 6) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where created_by = " + user_id
								+ " and   active_flag = 'Freezed' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where    active_flag = 'Freezed' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// changes status as reddemed
	@RequestMapping("/closestatus")
	public ModelAndView closestatus(ModelMap map, Model model, HttpServletRequest request) {
		if (request.getParameter("scheme_name") != null && request.getParameter("scheme_name") != "") {

			int scheme_id = Integer.parseInt(request.getParameter("scheme_name"));

			System.out.println("startschemerewardclose");

			CallableStatement cStmt;
			try {
				cStmt = hibernateConfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_RW_AN_CLOSE_SCH(?)}");

				cStmt.setInt(1, scheme_id);
				ResultSet result = cStmt.executeQuery();

			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

//				String query="update BPIL_SCHEME_MASTER set active_flag='Closed' WHERE scheme_id='"+scheme_id+"'";				
//				jdbcTemplate.update(query); 

			/*
			 * String
			 * query1="update BPIL_OPA_SCHEME_ANALYSIS set sch_status='Interfaced' WHERE scheme_id='"
			 * +scheme_id+"'"; jdbcTemplate.update(query1);
			 */

		}

		return new ModelAndView("SchemeInterface");
	}

	@RequestMapping(value = "/getcustdealer_name", method = RequestMethod.GET)
	public void getcust_dealer_name(@RequestParam(value = "depot") String depot, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {
			System.out.println("DEPOT_CODE = " + depot);

//			            	 String sql = "select distinct DLR_AC_NO, DLR_AC_NAME from bpil_dealer_master where DEPOT_CODE = '"+depot+"'";
//			     			 
//			     			 List<Bpil_Dealer_Master> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Dealer_Master>() {
//
//			     					@Override
//			     					public Bpil_Dealer_Master mapRow(ResultSet rs, int rowNum) throws SQLException {
//			     						Bpil_Dealer_Master aContact = new Bpil_Dealer_Master();
//			     			
//			     						aContact.setDealer_code(rs.getInt("DLR_AC_NO"));
//			     						aContact.setDealer_name(rs.getString("DLR_AC_NAME"));
//			     						
//			     						return aContact;
//			     					}
//			     					
//			     				});			

//			     			String sql = "select DISTINCT REWARD_DLR_CODE, REWARD_DLR_NAME "
//			     					+ "from BPIL_OPA_RW_ANALYSIS_RW where REWARD_SCHEME_ID = '"+schemeid+"' "
//			     							+ "and REWARD_DLR_DEPOT = (select DEPOT_NAME from BPIL_DEPOT_MASTER "
//			     							+ "where DEPOT_CODE = '"+depot+"' )";

//			     			String sql = "select DLR_AC_NO, DLR_AC_NAME, BILL_TO_ID "
//			     					+" from Bpil_Dealer_Master where"
//			     					+" DEPOT_CODE = '"+depot+"' "
//			     					+" And Primary_flag = 'Y'"
//			     					+" ORDER BY  DLR_AC_NAME";

			String sql = "select DLR_AC_NO, DLR_AC_NAME, BILL_TO_ID " + " from BPIL_DEALER_MASTER_NEW where"
					+ " DEPOT_CODE = '" + depot + "' " + " And Primary_flag = 'Y'" + " ORDER BY  DLR_AC_NAME";

			List<Bpil_Dealer_Master> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Dealer_Master>() {

				@Override
				public Bpil_Dealer_Master mapRow(ResultSet rs, int rowNum) throws SQLException {
					Bpil_Dealer_Master aContact = new Bpil_Dealer_Master();

					aContact.setDealer_code(Integer.parseInt(rs.getString("DLR_AC_NO")));
					aContact.setDealer_name((rs.getString("DLR_AC_NAME")));
					aContact.setPri_bill_to_id((rs.getInt("BILL_TO_ID")));

					return aContact;
				}

			});

			// ArrayList<Bpil_Dealer_Master> dml = (ArrayList<Bpil_Dealer_Master>)
			// hibernateTemplate.find("from Bpil_Dealer_Master where
			// depot_code='"+depot+"'");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getdealer_name", method = RequestMethod.GET)
	public void getdealer_name(@RequestParam(value = "schemeid") String schemeid,
			@RequestParam(value = "depot") String depot, HttpServletRequest request, Model model,
			HttpServletResponse response) {

		try {
			System.out.println("schemeid = " + schemeid);
			System.out.println("DEPOT_CODE = " + depot);

//			            	 String sql = "select distinct DLR_AC_NO, DLR_AC_NAME from bpil_dealer_master where DEPOT_CODE = '"+depot+"'";
//			     			 
//			     			 List<Bpil_Dealer_Master> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Dealer_Master>() {
//
//			     					@Override
//			     					public Bpil_Dealer_Master mapRow(ResultSet rs, int rowNum) throws SQLException {
//			     						Bpil_Dealer_Master aContact = new Bpil_Dealer_Master();
//			     			
//			     						aContact.setDealer_code(rs.getInt("DLR_AC_NO"));
//			     						aContact.setDealer_name(rs.getString("DLR_AC_NAME"));
//			     						
//			     						return aContact;
//			     					}
//			     					
//			     				});			

//			     			String sql = "select DISTINCT REWARD_DLR_CODE, REWARD_DLR_NAME "
//			     					+ "from BPIL_OPA_RW_ANALYSIS_RW where REWARD_SCHEME_ID = '"+schemeid+"' "
//			     							+ "and REWARD_DLR_DEPOT = (select DEPOT_NAME from BPIL_DEPOT_MASTER "
//			     							+ "where DEPOT_CODE = '"+depot+"' )";

			String sql = "select DISTINCT OPA_RW_AN_DEALER_ID, REWARD_DLR_NAME, REWARD_DLR_CODE, REWARD_DLR_BILL_TO "
					+ " from BPIL_OPA_RW_ANALYSIS_RW where REWARD_SCHEME_ID = '" + schemeid + "' "
					+ " AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '" + depot + "' "
					+ " AND REWARD_DLR_BILL_TO > 0 ORDER BY  REWARD_DLR_NAME";

			List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

				@Override
				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setDlr_ac_no(rs.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
					aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
					aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));

					return aContact;
				}

			});

			// ArrayList<Bpil_Dealer_Master> dml = (ArrayList<Bpil_Dealer_Master>)
			// hibernateTemplate.find("from Bpil_Dealer_Master where
			// depot_code='"+depot+"'");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getdepocustdealer_name", method = RequestMethod.GET)
	public void getdepocustdealer_name(@RequestParam(value = "depot") String depot, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {
			System.out.println("DEPOT_CODE = " + depot);

//			            	 String sql = "select distinct DLR_AC_NO, DLR_AC_NAME from bpil_dealer_master where DEPOT_CODE = '"+depot+"'";
//			     			 
//			     			 List<Bpil_Dealer_Master> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Dealer_Master>() {
//
//			     					@Override
//			     					public Bpil_Dealer_Master mapRow(ResultSet rs, int rowNum) throws SQLException {
//			     						Bpil_Dealer_Master aContact = new Bpil_Dealer_Master();
//			     			
//			     						aContact.setDealer_code(rs.getInt("DLR_AC_NO"));
//			     						aContact.setDealer_name(rs.getString("DLR_AC_NAME"));
//			     						
//			     						return aContact;
//			     					}
//			     					
//			     				});			

//			     			String sql = "select DISTINCT REWARD_DLR_CODE, REWARD_DLR_NAME "
//			     					+ "from BPIL_OPA_RW_ANALYSIS_RW where REWARD_SCHEME_ID = '"+schemeid+"' "
//			     							+ "and REWARD_DLR_DEPOT = (select DEPOT_NAME from BPIL_DEPOT_MASTER "
//			     							+ "where DEPOT_CODE = '"+depot+"' )";

			String sql = "select DISTINCT OPA_RW_AN_DEALER_ID, REWARD_DLR_NAME, REWARD_DLR_CODE, REWARD_DLR_BILL_TO "
					+ " from BPIL_OPA_RW_ANALYSIS_RW where" + " AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '" + depot + "' "
					+ " AND REWARD_DLR_BILL_TO > 0 ORDER BY  REWARD_DLR_NAME";

			List<Bpil_Opa_Sch_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Sch_Analysis_Rw>() {

				@Override
				public Bpil_Opa_Sch_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
					Bpil_Opa_Sch_Analysis_Rw aContact = new Bpil_Opa_Sch_Analysis_Rw();

					aContact.setDlr_ac_no(rs.getString("OPA_SCH_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
					aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
					aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));

					return aContact;
				}

			});

			// ArrayList<Bpil_Dealer_Master> dml = (ArrayList<Bpil_Dealer_Master>)
			// hibernateTemplate.find("from Bpil_Dealer_Master where
			// depot_code='"+depot+"'");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getWhatIfdealer_name", method = RequestMethod.GET)
	public void getWhatIfdealer_name(@RequestParam(value = "schemeid") String schemeid,
			@RequestParam(value = "depot") String depot, HttpServletRequest request, Model model,
			HttpServletResponse response) {

		try {
			System.out.println("schemeid = " + schemeid);
			System.out.println("DEPOT_CODE = " + depot);

//			     			String sql = "SELECT   BDM.OPA_SCH_AN_DEALER_ID        OPA_RW_AN_DEALER_ID "
//			     						+"        ,BDM.BILL_TO_ID      DLR_BILL_TO "
//			     						+"        ,BDM.DEPOT_CODE "
//			     						+"        ,BDM.DLR_AC_NO        DLR_AC_NO "
//			     						+"        ,BDM.DLR_AC_NAME      DLR_AC_NAME "
//										+" FROM   BPIL_DEALER_MASTER_NEW BDM "
//										+" 		 ,BPIL_DEPOT_MASTER DPT "
//										+"       ,BPIL_SCHEME_DEPOT_DETAILS BSDD "
//										+"       ,BPIL_SCHEME_MASTER BSM "
//										+" WHERE   BDM.DEPOT_CODE = DPT.DEPOT_CODE "
//										+" AND     DPT.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//										+" AND     BDM.DEPOT_CODE = BSDD.SCH_DEPOT_CODE "
//										+" AND     BSDD.SCHEME_ID = BSM.SCHEME_ID "
//										+" AND     BDM.CUST_TYPE IN (SELECT CUST_TYPE FROM BPIL_SCHEME_CUST_TYPES WHERE SCHEME_ID = '"+schemeid+"') "
//										+" AND     BSM.SCHEME_ID  = '"+schemeid+"' "
//										+" AND     BDM.DEPOT_CODE = '"+depot+"' "
//										+" AND     BDM.PRIMARY_FLAG = 'Y' "
//										+" ORDER BY  DLR_AC_NAME ";
//			     					
//			     			
//			     			 
//			     			 List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
//
//			     					@Override
//			     					public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
//			     						Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();
//			     			
//			     						aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
//			     						aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//			     						aContact.setDlr_name(rs.getString("DLR_AC_NAME"));
//			     						aContact.setDlr_bill_to(rs.getInt("DLR_BILL_TO"));
//			     						
//			     						return aContact;
//			     					}
//			     					
//			     				});			

			// ArrayList<Bpil_Dealer_Master> dml = (ArrayList<Bpil_Dealer_Master>)
			// hibernateTemplate.find("from Bpil_Dealer_Master where
			// depot_code='"+depot+"'");

			List<Bpil_Opa_Rw_Analysis_Rw> dml = new ArrayList<Bpil_Opa_Rw_Analysis_Rw>();
			CallableStatement cStmt;
			try {
				cStmt = hibernateConfiguration.dataSource().getConnection()
						.prepareCall("{call BPIL_GET_OPA_SCH_DLR(?,?,?)}");
				cStmt.setInt(1, Integer.parseInt(schemeid));
				cStmt.setString(2, depot);
				cStmt.registerOutParameter(3, OracleTypes.CURSOR);
				ResultSet result = cStmt.executeQuery();
				ResultSet rs1 = (ResultSet) cStmt.getObject(3);
				while (rs1.next()) {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs1.getString("OPA_RW_AN_DEALER_ID"));
					aContact.setDlr_ac_no(rs1.getString("DLR_AC_NO"));
					aContact.setDlr_name(rs1.getString("DLR_AC_NAME"));
					aContact.setDlr_bill_to(rs1.getInt("DLR_BILL_TO"));
					dml.add(aContact);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			System.out.println("Size of dealers name list : " + dml.size());
			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getbilltoid", method = RequestMethod.GET)
	public void getbilltoid(@RequestParam(value = "dealer") String dealer, @RequestParam(value = "depot") String depot,
			@RequestParam(value = "schemeid") String schemeid, HttpServletRequest request, Model model,
			HttpServletResponse response) {
		System.out.println("dealer " + dealer);
		System.out.println("depot " + depot);
		System.out.println("schemeid " + schemeid);
		try {

//			    ArrayList<Bpil_Dealer_Master> dml = (ArrayList<Bpil_Dealer_Master>) hibernateTemplate.find("from Bpil_Dealer_Master where dealer_code='"+depot+"'");

			String sql = "select DISTINCT OPA_RW_AN_DEALER_ID " + "from BPIL_OPA_RW_ANALYSIS_RW "
					+ "where REWARD_SCHEME_ID = '" + schemeid + "' " + "and REWARD_DLR_DEPOT = (select DEPOT_NAME "
					+ "from BPIL_DEPOT_MASTER " + "where DEPOT_CODE = '" + depot + "') " + "and REWARD_DLR_CODE ='"
					+ dealer + "'";

			List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

				@Override
				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));

					return aContact;
				}

			});

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getdepocustbilltoid", method = RequestMethod.GET)
	public void getdepocustbilltoid(@RequestParam(value = "dealer") String dealer,
			@RequestParam(value = "depot") String depot, HttpServletRequest request, Model model,
			HttpServletResponse response) {
		System.out.println("dealer " + dealer);
		System.out.println("depot " + depot);
		try {

//			    ArrayList<Bpil_Dealer_Master> dml = (ArrayList<Bpil_Dealer_Master>) hibernateTemplate.find("from Bpil_Dealer_Master where dealer_code='"+depot+"'");

			String sql = "select DISTINCT OPA_RW_AN_DEALER_ID " + "from BPIL_OPA_RW_ANALYSIS_RW " + "where "
					+ "and REWARD_DLR_DEPOT = (select DEPOT_NAME " + "from BPIL_DEPOT_MASTER " + "where DEPOT_CODE = '"
					+ depot + "') " + "and REWARD_DLR_CODE ='" + dealer + "'";

			List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

				@Override
				public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
					Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

					aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));

					return aContact;
				}

			});

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// load LOV data
//			@RequestMapping(value = "/getschemename3", method = RequestMethod.GET)
	@RequestMapping(value = "/gethistrwschemename", method = RequestMethod.GET)
	public void getschemename3(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {
			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			if (profile_id == 6) {

				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and ( active_flag = 'Processed' or active_flag = 'Freezed' or active_flag = 'Closed') ");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and ( active_flag = 'Processed' or active_flag = 'Freezed' or active_flag = 'Closed') and scheme_type <> 'TSI'  order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 7) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where (sm.active_flag = 'Freezed' or sm.active_flag ='Closed' or sm.active_flag = 'Processed') and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ user_id);

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where ( active_flag = 'Processed' or active_flag = 'Freezed' or active_flag = 'Closed') and scheme_type <> 'TSI'  order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getMLGroup", method = RequestMethod.GET)
	public void getMLGroup(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {
			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			String sql = "";

			if (profile_id == 6) {
				System.out.println("profile id " + profile_id);
				Bpil_Users user = schememasterdao.getUserById(user_id);
				System.out.println("ml " + user.getPmg_ml_group());
				sql = "select DISTINCT ML from BPIL_QMIS_PRD q where q.ML = '" + user.getPmg_ml_group()
						+ "' order by ML";
			} else {
				sql = "select DISTINCT ML from BPIL_QMIS_PRD order by ML";
			}
			List<Bpil_Qmis_Prd> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Qmis_Prd>() {

				@Override
				public Bpil_Qmis_Prd mapRow(ResultSet rs, int rowNum) throws SQLException {
					Bpil_Qmis_Prd aContact = new Bpil_Qmis_Prd();

					aContact.setMl(rs.getString("ML"));

					return aContact;
				}

			});

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

//			@RequestMapping(value = "/gettsischemename3", method = RequestMethod.GET)
	@RequestMapping(value = "/gethistrwtsischemename", method = RequestMethod.GET)
	public void gettsischemename3(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {
			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			if (profile_id == 6) {

				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and ( active_flag = 'Processed' or active_flag = 'Freezed' or active_flag = 'Closed') ");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and ( active_flag = 'Processed' or active_flag = 'Freezed' or active_flag = 'Closed') and scheme_type = 'TSI'  order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"from New_Scheme_mstr where ( active_flag = 'Processed' or active_flag = 'Freezed' or active_flag = 'Closed') and scheme_type = 'TSI'  order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// load LOV data
//			@RequestMapping(value = "/getschemename4", method = RequestMethod.GET)
	@RequestMapping(value = "/getadjustschemerw", method = RequestMethod.GET)
	public void getschemename4(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {
			int user_id = (Integer) request.getSession().getAttribute("userid");
			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			if (profile_id == 6) {
				String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("from New_Scheme_mstr where created_by = "+user_id + " and  active_flag = 'Processed' ");

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where scheme_business_line = '" + PMG_ML_Group
								+ "' and  active_flag = 'Processed' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {
				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("from New_Scheme_mstr where  active_flag = 'Processed' order by scheme_id");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getadjustschemedepo", method = RequestMethod.GET)
	public void getadjustschemedepo(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
					"select sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where sm.active_flag = 'Processed' and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
							+ userid + "  order by sm.scheme_id");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getrewardanalysisschemedepo", method = RequestMethod.GET)
	public void getrewardanalysisschemedepo(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
					"select sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where (sm.active_flag = 'Processed' or sm.active_flag = 'Closed' or sm.active_flag = 'Freezed') and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
							+ userid + "  order by sm.scheme_id");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getrewardschemedepo", method = RequestMethod.GET)
	public void getrewardschemedepo(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
					"select sm from New_Scheme_mstr sm, Bpil_Scheme_Depots_Details sd, Bpil_Users bu where (sm.active_flag = 'Processed' or sm.active_flag = 'Freezed' or sm.active_flag = 'Closed') and sm.scheme_id = sd.scheme_id and sd.sch_depot_code = bu.depot_code and bu.user_id = "
							+ userid + "  order by sm.scheme_id");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/getadjustschemeappr", method = RequestMethod.GET)
	public void getadjustschemeappr(HttpServletRequest request, Model model, HttpServletResponse response) {

		try {

			Integer userid = (Integer) request.getSession().getAttribute("userid");

			int profile_id = (Integer) request.getSession().getAttribute("profileid");

			if (profile_id == 7) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find(
						"select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.active_flag = 'Freezed' and sm.created_by = bu.user_id and bu.supervisor_id = "
								+ userid);

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 6) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("select sm from New_Scheme_mstr sm where sm.active_flag = 'Freezed' and sm.created_by =  "
								+ userid);

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			} else if (profile_id == 3) {

				ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
						.find("select sm from New_Scheme_mstr sm where sm.active_flag = 'Freezed' ");

				String json = null;

				json = new Gson().toJson(dml);
				response.setContentType("application/json");
				response.getWriter().write(json);

			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// download gift count report
	@RequestMapping("/downloadGiftCountReport")
	public ModelAndView downloadGiftCountReport(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "scheme_fin_yr") String scheme_fin_yr,
			@RequestParam(value = "scheme_fin_month") String scheme_fin_month, ModelMap map, Model model,
			HttpServletRequest request, HttpServletResponse response) {

		List<GiftCountReport> dml = new ArrayList<>();
		System.out.println("ml " + ml_group + " yr " + scheme_fin_yr + " month " + scheme_fin_month);
		try {

			String sql = "SELECT BPM.SCHEME_NAME SCH_NAME, RED.SCHEME_CODE SCH_CODE, RED.DEPOT DEPOT,"
					+ " RED.REWARD_DESCRIPTION REWARD, SUM(RED.TOT) TOTAL FROM BPIL_OPA_NOV_REDM_TBL RED,BPIL_SCHEME_MASTER BPM"
					+ " WHERE BPM.SCHEME_CODE=RED.SCHEME_CODE AND RED.SCHEME_CODE LIKE '%" + ml_group + "%' "
					+ " AND SCHEME_FIN_MONTH = '" + scheme_fin_month + "' AND SCHEM_FIN_YEAR = '" + scheme_fin_yr
					+ "' GROUP BY"
					+ " BPM.SCHEME_NAME, RED.SCHEME_CODE, RED.DEPOT, RED.REWARD_DESCRIPTION ORDER BY 1,2,3,4";
			dml = jdbcTemplate.query(sql, new RowMapper<GiftCountReport>() {

				@Override
				public GiftCountReport mapRow(ResultSet rs, int rowNum) throws SQLException {
					GiftCountReport aContact = new GiftCountReport();

					aContact.setScheme_name(rs.getString("SCH_NAME"));
					aContact.setScheme_code(rs.getString("SCH_CODE"));
					aContact.setDepot(rs.getString("DEPOT"));
					aContact.setReward(rs.getString("REWARD"));
					aContact.setTotal(rs.getInt("TOTAL"));

					return aContact;
				}

			});

		} catch (Exception e) {
			e.printStackTrace();
		}

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Gift Count Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("Scheme Name");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 6500);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("Scheme Code");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3500);

		cell = row.createCell(2);
		cell.setCellValue("Depot");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 4000);

		cell = row.createCell(3);
		cell.setCellValue("Reward");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 4000);

		cell = row.createCell(4);
		cell.setCellValue("Total");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 3000);

		int j = 1;

		Iterator<GiftCountReport> itr = dml.iterator();
		while (itr.hasNext()) {
			GiftCountReport ex = itr.next();

			row = spreadsheet.createRow(j);

			System.out.println("schemename " + ex.getScheme_name());

			cell = row.createCell(0);
			cell.setCellValue(ex.getScheme_name());

			cell = row.createCell(1);
			cell.setCellValue(ex.getScheme_code());

			cell = row.createCell(2);
			cell.setCellValue(ex.getDepot());

			cell = row.createCell(3);
			cell.setCellValue(ex.getReward());

			cell = row.createCell(4);
			cell.setCellValue(ex.getTotal());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Gift Count Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//	      		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Gift Count Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	                response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	                FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	                FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	                FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("Info_grid", dml);
		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("scheme_fin_yr", scheme_fin_yr);
		model.addAttribute("scheme_fin_month", scheme_fin_month);

		return new ModelAndView("GiftCountReport");
	}

	// Gift Count report
	@RequestMapping("/GiftCountReport")
	public ModelAndView GiftCountReport(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "scheme_fin_yr") String scheme_fin_yr,
			@RequestParam(value = "scheme_fin_month") String scheme_fin_month, ModelMap map, Model model,
			HttpServletRequest request) {

		List<GiftCountReport> dml = new ArrayList<>();
		System.out.println("ml " + ml_group + " yr " + scheme_fin_yr + " month " + scheme_fin_month);
		try {

			String sql = "SELECT BPM.SCHEME_NAME SCH_NAME, RED.SCHEME_CODE SCH_CODE, RED.DEPOT DEPOT,"
					+ " RED.REWARD_DESCRIPTION REWARD, SUM(RED.TOT) TOTAL FROM BPIL_OPA_NOV_REDM_TBL RED,BPIL_SCHEME_MASTER BPM"
					+ " WHERE BPM.SCHEME_CODE=RED.SCHEME_CODE AND RED.SCHEME_CODE LIKE '%" + ml_group + "%' "
					+ " AND SCHEME_FIN_MONTH = '" + scheme_fin_month + "' AND SCHEM_FIN_YEAR = '" + scheme_fin_yr
					+ "' GROUP BY"
					+ " BPM.SCHEME_NAME, RED.SCHEME_CODE, RED.DEPOT, RED.REWARD_DESCRIPTION ORDER BY 1,2,3,4";
			dml = jdbcTemplate.query(sql, new RowMapper<GiftCountReport>() {

				@Override
				public GiftCountReport mapRow(ResultSet rs, int rowNum) throws SQLException {
					GiftCountReport aContact = new GiftCountReport();

					aContact.setScheme_name(rs.getString("SCH_NAME"));
					aContact.setScheme_code(rs.getString("SCH_CODE"));
					aContact.setDepot(rs.getString("DEPOT"));
					aContact.setReward(rs.getString("REWARD"));
					aContact.setTotal(rs.getInt("TOTAL"));

					return aContact;
				}

			});

		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("Info_grid", dml);
		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("scheme_fin_yr", scheme_fin_yr);
		model.addAttribute("scheme_fin_month", scheme_fin_month);
		return new ModelAndView("GiftCountReport");
	}

	// MIS report Details
	@RequestMapping("/MISReportDetailsSP")
	public ModelAndView MISReportDetailsSP(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "from_date") String from_date, @RequestParam(value = "to_date") String to_date,
			ModelMap map, Model model, HttpServletRequest request) {

//			  		DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy"); 
//			    	Date fromdate = null, todate = null;
//					try {
//						fromdate = (Date)formatter.parse(from_date);
//						todate = (Date)formatter.parse(to_date);
//			    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//			    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yyyy");
//			    	String from_date1 = newFormat.format(fromdate);
//			    	String to_date1 = newFormat.format(todate);
		
		
		/*System.out.println("Start Date: " + from_date + " End Date: " + to_date);
		String from_date1 = from_date;
		String to_date1 = to_date;*/
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd"); 
    	Date fromdate = null, todate = null;
		try {
			fromdate = (Date)formatter.parse(from_date);
			todate = (Date)formatter.parse(to_date);
    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yy");
    	String from_date1 = newFormat.format(fromdate);
    	String to_date1 = newFormat.format(todate);
System.out.println("Start Date: " + from_date + " End Date: " + to_date);
//String from_date1 = from_date;
//String to_date1 = to_date;

System.out.println("from " + from_date1 + " to " + to_date1);

		System.out.println("call BPIL_ML_SCH_OUTFLOW");
		List<MISReportDetails> report = new ArrayList<>();
		CallableStatement cStmt;
		try {
			cStmt = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_SCH_OUTFLOW(?,?,?,?)}");
			cStmt.setString(1, ml_group);
			cStmt.setString(2, from_date1);
			cStmt.setString(3, to_date1);
			cStmt.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt.executeQuery();
			ResultSet rs1 = (ResultSet) cStmt.getObject(4);
			while (rs1.next()) {
				String data = rs1.getString(1);
				MISReportDetails repo = new MISReportDetails();
				repo.setScheme_id(rs1.getInt("SCHEME_ID"));
				repo.setScheme_code(rs1.getString("SCHEME_CODE"));
				repo.setScheme_name(rs1.getString("SCHEME_NAME"));
				repo.setScheme_outflow(rs1.getDouble("SCH_ADJUST_RW"));
				System.out.println("SCHEME_ID " + rs1.getInt("SCHEME_ID"));
				System.out.println("SCHEME_CODE " + rs1.getString("SCHEME_CODE"));
				System.out.println("SCHEME_NAME " + rs1.getString("SCHEME_NAME"));
				System.out.println("SCH_ADJUST_RW " + rs1.getDouble("SCH_ADJUST_RW"));

				report.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		model.addAttribute("Info_grid", report);
		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("From_Date", from_date);
		model.addAttribute("To_Date", to_date);
		return new ModelAndView("MISReportDetails");
	}

	// MIS report Details
	@RequestMapping("/MISReportDetails")
	public ModelAndView MISReportDetails(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "from_date") String from_date, @RequestParam(value = "to_date") String to_date,
			ModelMap map, Model model, HttpServletRequest request) {

//			    	DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy"); 
//			    	Date fromdate = null, todate = null;
//					try {
//						fromdate = (Date)formatter.parse(from_date);
//						todate = (Date)formatter.parse(to_date);
//			    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//			    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yyyy");
//			    	String from_date1 = newFormat.format(fromdate);
//			    	String to_date1 = newFormat.format(todate);
		System.out.println("Start Date: " + from_date + " End Date: " + to_date);
		String from_date1 = from_date;
		String to_date1 = to_date;

		System.out.println("call BPIL_ML_SCH_OUTFLOW");

		String sql = "SELECT SCHEME_ID, " + "       SCHEME_NAME, " + "       SCHEME_CODE, "
				+ "       SCHEME_BUSINESS_LINE, " + "       START_DATE, " + "       END_DATE, "
				+ "       SUM (TOTAL_AMOUNT) SCH_ADJUST_RW " + "FROM   (SELECT SCHEME_ID, "
				+ "               SCHEME_NAME, " + "               SCHEME_CODE, "
				+ "               SCHEME_BUSINESS_LINE, " + "               START_DATE, " + "               END_DATE, "
				+ "               TOTAL_AMOUNT " + "        FROM   (SELECT SCHEME_ID, "
				+ "                       SCHEME_NAME, " + "                       SCHEME_CODE, "
				+ "                       SCHEME_BUSINESS_LINE, " + "                       START_DATE, "
				+ "                       END_DATE, " + "                       CASE "
				+ "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               BSM.SCHEME_NAME, "
				+ "                               BSM.SCHEME_CODE, "
				+ "                               BSM.SCHEME_BUSINESS_LINE, "
				+ "                               BSM.START_DATE, " + "                               BSM.END_DATE, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                             OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                  AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//			    			   + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    			   + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                        		   AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                        		 ) "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                        		 RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                        		 SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                        		 BSM.SCHEME_NAME, " + "                        		 BSM.SCHEME_CODE, "
				+ "                        		 BSM.SCHEME_BUSINESS_LINE, "
				+ "                        		 BSM.START_DATE, " + "                        		 BSM.END_DATE, "
				+ "                        		 CASE "
				+ "                        		      WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                        		              OR RW.ATTRIBUTE1 = 'A') "
				+ "                        		                   AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                        		           THEN RW.REWARD_ADJUSTMENTS "
				+ "                        		      ELSE RW.REWARD_CONVERTED_CN "
				+ "                        		 END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                        		 BPIL_SCHEME_MASTER BSM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//			    			   + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    			   + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) " + "                       ) "
				+ "                GROUP BY SCHEME_ID, " + "                         SCHEME_NAME, "
				+ "                         SCHEME_CODE, " + "                         SCHEME_BUSINESS_LINE, "
				+ "                         START_DATE, " + "                         END_DATE "
				+ "                ORDER by SCHEME_ID " + "               ) " + "        UNION ALL "
				+ "        SELECT SCHEME_ID, " + "               SCHEME_NAME, " + "               SCHEME_CODE, "
				+ "               SCHEME_BUSINESS_LINE, " + "               START_DATE, " + "               END_DATE, "
				+ "               CASE " + "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT SCHEME_ID, "
				+ "                       SCHEME_NAME, " + "                       SCHEME_CODE, "
				+ "                       SCHEME_BUSINESS_LINE, " + "                       START_DATE, "
				+ "                       END_DATE, " + "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               BSM.SCHEME_CODE, "
				+ "                               BSM.SCHEME_BUSINESS_LINE, "
				+ "                               BSM.START_DATE, " + "                               BSM.END_DATE, "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//			    			   + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    			   + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               BSM.SCHEME_CODE, "
				+ "                               BSM.SCHEME_BUSINESS_LINE, "
				+ "                               BSM.START_DATE, " + "                               BSM.END_DATE, "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//			    			   + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    			   + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) " + "                       ) "
				+ "               ) " + "        GROUP BY SCHEME_ID, " + "                 SCHEME_NAME, "
				+ "                 SCHEME_CODE, " + "                 SCHEME_BUSINESS_LINE, "
				+ "                 START_DATE, " + "                 END_DATE " + "        ORDER by SCHEME_ID "
				+ "       ) " + "GROUP BY SCHEME_ID, " + "         SCHEME_NAME, " + "         SCHEME_CODE, "
				+ "         SCHEME_BUSINESS_LINE, " + "         START_DATE, " + "         END_DATE "
				+ "ORDER by SCHEME_ID ";

		List<MISReportDetails> report = jdbcTemplate.query(sql, new RowMapper<MISReportDetails>() {

			@Override
			public MISReportDetails mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReportDetails repo = new MISReportDetails();
				repo.setScheme_id(rs.getInt("SCHEME_ID"));
				repo.setScheme_name(rs.getString("SCHEME_NAME"));
				repo.setScheme_code(rs.getString("SCHEME_CODE"));
				repo.setScheme_outflow(rs.getDouble("SCH_ADJUST_RW"));
				System.out.println("SCHEME_ID " + rs.getInt("SCHEME_ID"));
				System.out.println("SCHEME_CODE " + rs.getString("SCHEME_CODE"));
				System.out.println("SCHEME_NAME " + rs.getString("SCHEME_NAME"));
				System.out.println("SCH_ADJUST_RW " + rs.getDouble("SCH_ADJUST_RW"));

				return repo;
			}

		});

//			    	List<MISReportDetails> report = new ArrayList<>();
//					CallableStatement cStmt;
//					try {
//						cStmt = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_SCH_OUTFLOW(?,?,?,?)}");
//						cStmt.setString(1,  ml_group );
//						cStmt.setString(2,  from_date1 );
//						cStmt.setString(3,  to_date1 );
//						cStmt.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt.executeQuery();
//						ResultSet rs1 = (ResultSet) cStmt.getObject(4);
//						while (rs1.next()) {
//							String data = rs1.getString(1);
//							MISReportDetails repo = new MISReportDetails();
//							repo.setScheme_id(rs1.getInt("SCHEME_ID"));
//							repo.setScheme_code(rs1.getString("SCHEME_CODE"));
//							repo.setScheme_name(rs1.getString("SCHEME_NAME"));
//							repo.setScheme_outflow(rs1.getDouble("SCH_ADJUST_RW"));
//							System.out.println("SCHEME_ID "+rs1.getInt("SCHEME_ID"));
//							System.out.println("SCHEME_CODE "+rs1.getString("SCHEME_CODE"));
//							System.out.println("SCHEME_NAME "+rs1.getString("SCHEME_NAME"));
//							System.out.println("SCH_ADJUST_RW "+rs1.getDouble("SCH_ADJUST_RW"));
//							   
//							   
//							report.add(repo);
//						}
//			
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		model.addAttribute("Info_grid", report);
		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("From_Date", from_date);
		model.addAttribute("To_Date", to_date);
		return new ModelAndView("MISReportDetails");
	}

	// MIS report
	@RequestMapping("/MISReportSP")
	public ModelAndView MISReportSP(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "from_date") String from_date, @RequestParam(value = "to_date") String to_date,
			ModelMap map, Model model, HttpServletRequest request) {
					System.out.println("ML group is " + ml_group );
			    	DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd"); 
			    	Date fromdate = null, todate = null;
					try {
						fromdate = (Date)formatter.parse(from_date);
						todate = (Date)formatter.parse(to_date);
			    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yyyy");
			    	String from_date1 = newFormat.format(fromdate);
			    	String to_date1 = newFormat.format(todate);
		System.out.println("Start Date: " + from_date + " End Date: " + to_date);
		//String from_date1 = from_date;
		//String to_date1 = to_date;

		System.out.println("from " + from_date1 + " to " + to_date1);

		// Scheme outflow details
		System.out.println("call BPIL_ML_LY_OUTFLOW");
		List<MISReport> dmlmlly = new ArrayList<MISReport>();
		CallableStatement cStmt1;
		try {
			cStmt1 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_LY_OUTFLOW(?,?,?,?)}");
			cStmt1.setString(1, ml_group);
			cStmt1.setString(2, from_date1);
			cStmt1.setString(3, to_date1);
			cStmt1.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt1.executeQuery();
			ResultSet rs1 = (ResultSet) cStmt1.getObject(4);
			while (rs1.next()) {
				MISReport repo = new MISReport();
				repo.setLy_vol(rs1.getDouble("LY_VOL"));
				repo.setLy_val(rs1.getDouble("LY_VAL"));
				System.out.println("LY_VOL " + rs1.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs1.getDouble("LY_VAL"));

				dmlmlly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_TY_OUTFLOW");
		List<MISReport> dmlmlty = new ArrayList<MISReport>();
		CallableStatement cStmt2;
		try {
			cStmt2 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_TY_OUTFLOW(?,?,?,?)}");
			cStmt2.setString(1, ml_group);
			cStmt2.setString(2, from_date1);
			cStmt2.setString(3, to_date1);
			cStmt2.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt2.executeQuery();
			ResultSet rs2 = (ResultSet) cStmt2.getObject(4);
			while (rs2.next()) {
				MISReport repo = new MISReport();
				repo.setTy_vol(rs2.getDouble("TY_VOL"));
				repo.setTy_val(rs2.getDouble("TY_VAL"));
//						   	repo.setTotal_scheme_outflow(rs2.getDouble("TOT_ADJUST_RW"));
				System.out.println("TY_VOL " + rs2.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs2.getDouble("TY_VAL"));
//						   	System.out.println("TOT_ADJUST_RW "+rs2.getDouble("TOT_ADJUST_RW"));

				dmlmlty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_TOTAL_OUTFLOW");
		List<MISReport> dmlmltotal = new ArrayList<MISReport>();
		CallableStatement cStmt3;
		try {
			cStmt3 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_TOTAL_OUTFLOW(?,?,?,?)}");
			cStmt3.setString(1, ml_group);
			cStmt3.setString(2, from_date1);
			cStmt3.setString(3, to_date1);
			cStmt3.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt3.executeQuery();
			ResultSet rs3 = (ResultSet) cStmt3.getObject(4);
			while (rs3.next()) {
				MISReport repo = new MISReport();
				repo.setTotal_scheme_outflow(rs3.getDouble("TOT_ADJUST_RW"));
				System.out.println("TOT_ADJUST_RW " + rs3.getDouble("TOT_ADJUST_RW"));

				dmlmltotal.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("scheme outflow");
		List<MISReport> dmlmloutflow = new ArrayList<>();
		MISReport dmlobj = new MISReport();
		dmlobj.setLy_vol(dmlmlly.get(0).getLy_vol());
		dmlobj.setLy_val(dmlmlly.get(0).getLy_val());

		dmlobj.setTy_vol(dmlmlty.get(0).getTy_vol());
		dmlobj.setTy_val(dmlmlty.get(0).getTy_val());

		Double volgr = 0.0;
		if (dmlobj.getLy_vol() > 0.0) {
			volgr = ((dmlobj.getTy_vol() - dmlobj.getLy_vol()) / dmlobj.getLy_vol()) * 100;
		} else if (dmlobj.getLy_vol() == 0.0 && dmlobj.getTy_vol() > 0.0) {
			volgr = 100.0;
		}
		Double valgr = 0.0;
		if (dmlobj.getLy_val() > 0.0) {
			valgr = ((dmlobj.getTy_val() - dmlobj.getLy_val()) / dmlobj.getLy_val()) * 100;
		} else if (dmlobj.getLy_val() == 0.0 && dmlobj.getTy_val() > 0.0) {
			volgr = 100.0;
		}
		dmlobj.setVol_gr(Math.round(volgr * 100.0) / 100.0);
		dmlobj.setVal_gr(Math.round(valgr * 100.0) / 100.0);
		dmlobj.setTotal_scheme_outflow(dmlmltotal.get(0).getTotal_scheme_outflow());

		dmlmloutflow.add(dmlobj);

		// Club outflow details
		System.out.println("call BPIL_ML_CUST_CLUB_LY_OUTFLOW");
		List<MISReport> dmlcustly = new ArrayList<MISReport>();
		CallableStatement cStmt4;
		try {
			cStmt4 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_CUST_CLUB_LY_OUTFLOW(?,?,?,?)}");
			cStmt4.setString(1, ml_group);
			cStmt4.setString(2, from_date1);
			cStmt4.setString(3, to_date1);
			cStmt4.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt4.executeQuery();
			ResultSet rs4 = (ResultSet) cStmt4.getObject(4);
			while (rs4.next()) {
				MISReport repo = new MISReport();
				repo.setCust_club(rs4.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs4.getDouble("LY_VOL"));
				repo.setLy_val(rs4.getDouble("LY_VAL"));
				System.out.println("REPORT_CLUB_CLS " + rs4.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs4.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs4.getDouble("LY_VAL"));

				dmlcustly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_CUST_CLUB_TY_OUTFLOW");
		List<MISReport> dmlcustty = new ArrayList<MISReport>();
		CallableStatement cStmt5;
		try {
			cStmt5 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_CUST_CLUB_TY_OUTFLOW(?,?,?,?)}");
			cStmt5.setString(1, ml_group);
			cStmt5.setString(2, from_date1);
			cStmt5.setString(3, to_date1);
			cStmt5.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt5.executeQuery();
			ResultSet rs5 = (ResultSet) cStmt5.getObject(4);
			while (rs5.next()) {
				MISReport repo = new MISReport();
				repo.setCust_club(rs5.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs5.getDouble("TY_VOL"));
				repo.setTy_val(rs5.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs5.getDouble("TOT_ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs5.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs5.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs5.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs5.getDouble("TOT_ADJUST_RW"));

				dmlcustty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		System.out.println("Size of BPIL_ML_CUST_CLUB_TY_OUTFLOW "+dmlcustty.size());
		System.out.println("call BPIL_ML_CUST_CLUB_OUTFLOW");
		List<MISReport> dmlcustout = new ArrayList<MISReport>();
		CallableStatement cStmt6;
		try {
			cStmt6 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_CUST_CLUB_OUTFLOW(?,?,?,?)}");
			cStmt6.setString(1, ml_group);
			cStmt6.setString(2, from_date1);
			cStmt6.setString(3, to_date1);
			cStmt6.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt6.executeQuery();
			ResultSet rs6 = (ResultSet) cStmt6.getObject(4);
			while (rs6.next()) {
				MISReport repo = new MISReport();
				repo.setCust_club(rs6.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs6.getDouble("ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs6.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs6.getDouble("ADJUST_RW"));

				dmlcustout.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		System.out.println("Size of BPIL_ML_CUST_CLUB_OUTFLOW "+dmlcustout.size());
		System.out.println("cust club outflow");

		List<MISReport> dist_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlcustly.size(); i++) {
			MISReport Cust_club = new MISReport();
			Cust_club.setCust_club(dmlcustly.get(i).getCust_club());
			dist_Cust_club.add(Cust_club);
		}

		for (int i = 0; i < dmlcustty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustty.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustty.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		for (int i = 0; i < dmlcustout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustout.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustout.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		List<MISReport> dmlcustoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setCust_club(dist_Cust_club.get(k).getCust_club());

			for (int i = 0; i < dmlcustly.size(); i++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustly.get(i).getCust_club())) {
					repo.setLy_vol(dmlcustly.get(i).getLy_vol());
					repo.setLy_val(dmlcustly.get(i).getLy_val());
				}
			}

			for (int j = 0; j < dmlcustty.size(); j++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustty.get(j).getCust_club())) {
					repo.setTy_vol(dmlcustty.get(j).getTy_vol());
					repo.setTy_val(dmlcustty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlcustty.get(j).getTotal_scheme_outflow());
				}
			}

			for (int l = 0; l < dmlcustout.size(); l++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustout.get(l).getCust_club())) {
					repo.setTotal_scheme_outflow(dmlcustout.get(l).getTotal_scheme_outflow());
				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlcustoutflow.add(repo);

		}

		// Region outflow details
		System.out.println("call BPIL_ML_REGN_LY_OUTFLOW");
		List<MISReport> dmlregnly = new ArrayList<MISReport>();
		CallableStatement cStmt7;
		try {
			cStmt7 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_LY_OUTFLOW(?,?,?,?)}");
			cStmt7.setString(1, ml_group);
			cStmt7.setString(2, from_date1);
			cStmt7.setString(3, to_date1);
			cStmt7.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt7.executeQuery();
			ResultSet rs7 = (ResultSet) cStmt7.getObject(4);
			while (rs7.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs7.getString("REGN"));
				repo.setCust_club(rs7.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs7.getDouble("LY_VOL"));
				repo.setLy_val(rs7.getDouble("LY_VAL"));
				System.out.println("REGN " + rs7.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs7.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs7.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs7.getDouble("LY_VAL"));

				dmlregnly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_TY_OUTFLOW");
		List<MISReport> dmlregnty = new ArrayList<MISReport>();
		CallableStatement cStmt8;
		try {
			cStmt8 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_TY_OUTFLOW(?,?,?,?)}");
			cStmt8.setString(1, ml_group);
			cStmt8.setString(2, from_date1);
			cStmt8.setString(3, to_date1);
			cStmt8.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt8.executeQuery();
			ResultSet rs8 = (ResultSet) cStmt8.getObject(4);
			while (rs8.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs8.getString("REGN"));
				repo.setCust_club(rs8.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs8.getDouble("TY_VOL"));
				repo.setTy_val(rs8.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs8.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs8.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs8.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs8.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs8.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs8.getDouble("TOT_ADJUST_RW"));

				dmlregnty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_OUTFLOW");
		List<MISReport> dmlregnout = new ArrayList<MISReport>();
		CallableStatement cStmt9;
		try {
			cStmt9 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_OUTFLOW(?,?,?,?)}");
			cStmt9.setString(1, ml_group);
			cStmt9.setString(2, from_date1);
			cStmt9.setString(3, to_date1);
			cStmt9.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt9.executeQuery();
			ResultSet rs9 = (ResultSet) cStmt9.getObject(4);
			while (rs9.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs9.getString("REGN"));
				repo.setCust_club(rs9.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs9.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs9.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs9.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs9.getDouble("ADJUST_RW"));

				dmlregnout.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("regn outflow");
		List<MISReport> dist_Regn_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlregnly.size(); i++) {
			MISReport Regn_Cust_club = new MISReport();
			Regn_Cust_club.setRegn(dmlregnly.get(i).getRegn());
			Regn_Cust_club.setCust_club(dmlregnly.get(i).getCust_club());
			dist_Regn_Cust_club.add(Regn_Cust_club);
		}

		for (int i = 0; i < dmlregnty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnty.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnty.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnty.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnty.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		for (int i = 0; i < dmlregnout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnout.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnout.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnout.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnout.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		List<MISReport> dmlregnoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_Cust_club.get(k).getRegn());
			repo.setCust_club(dist_Regn_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmlregnly.size(); i++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnly.get(i).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnly.get(i).getCust_club())) {
					repo.setLy_vol(dmlregnly.get(i).getLy_vol());
					repo.setLy_val(dmlregnly.get(i).getLy_val());
				}

			}

			for (int j = 0; j < dmlregnty.size(); j++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnty.get(j).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnty.get(j).getCust_club())) {

					repo.setTy_vol(dmlregnty.get(j).getTy_vol());
					repo.setTy_val(dmlregnty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlregnty.get(j).getTotal_scheme_outflow());

				}
			}

			for (int l = 0; l < dmlregnout.size(); l++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnout.get(l).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmlregnout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlregnoutflow.add(repo);

		}

		// Depot outflow details

		System.out.println("call BPIL_ML_REGN_DEPO_LY_OUTFLOW");
		List<MISReport> dmldepoly = new ArrayList<MISReport>();
		CallableStatement cStmt10;
		try {
			cStmt10 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_DEPO_LY_OUTFLOW(?,?,?,?)}");
			cStmt10.setString(1, ml_group);
			cStmt10.setString(2, from_date1);
			cStmt10.setString(3, to_date1);
			cStmt10.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt10.executeQuery();
			ResultSet rs10 = (ResultSet) cStmt10.getObject(4);
			while (rs10.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs10.getString("REGN"));
				repo.setDepot_code(rs10.getString("DEPOT_CODE"));
				repo.setDepot(rs10.getString("DEPOT_NAME"));
				repo.setCust_club(rs10.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs10.getDouble("LY_VOL"));
				repo.setLy_val(rs10.getDouble("LY_VAL"));
				System.out.println("REGN " + rs10.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs10.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs10.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs10.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs10.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs10.getDouble("LY_VAL"));

				dmldepoly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_DEPO_TY_OUTFLOW");
		List<MISReport> dmldepoty = new ArrayList<MISReport>();
		CallableStatement cStmt11;
		try {
			cStmt11 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_DEPO_TY_OUTFLOW(?,?,?,?)}");
			cStmt11.setString(1, ml_group);
			cStmt11.setString(2, from_date1);
			cStmt11.setString(3, to_date1);
			cStmt11.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt11.executeQuery();
			ResultSet rs11 = (ResultSet) cStmt11.getObject(4);
			while (rs11.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs11.getString("REGN"));
				repo.setDepot_code(rs11.getString("DEPOT_CODE"));
				repo.setDepot(rs11.getString("DEPOT_NAME"));
				repo.setCust_club(rs11.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs11.getDouble("TY_VOL"));
				repo.setTy_val(rs11.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs11.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs11.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs11.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs11.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs11.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs11.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs11.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs11.getDouble("TOT_ADJUST_RW"));

				dmldepoty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_DEPO_OUTFLOW");
		List<MISReport> dmldepoout = new ArrayList<MISReport>();
		CallableStatement cStmt12;
		try {
			cStmt12 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_DEPO_OUTFLOW(?,?,?,?)}");
			cStmt12.setString(1, ml_group);
			cStmt12.setString(2, from_date1);
			cStmt12.setString(3, to_date1);
			cStmt12.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt12.executeQuery();
			ResultSet rs12 = (ResultSet) cStmt12.getObject(4);
			while (rs12.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs12.getString("REGN"));
				repo.setDepot_code(rs12.getString("DEPOT_CODE"));
				repo.setDepot(rs12.getString("DEPOT_NAME"));
				repo.setCust_club(rs12.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs12.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs12.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs12.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs12.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs12.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs12.getDouble("ADJUST_RW"));

				dmldepoout.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("depo outflow");
		List<MISReport> dist_Regn_depo_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmldepoly.size(); i++) {
			MISReport Regn_depo_Cust_club = new MISReport();
			Regn_depo_Cust_club.setRegn(dmldepoly.get(i).getRegn());
			Regn_depo_Cust_club.setDepot_code(dmldepoly.get(i).getDepot_code());
			Regn_depo_Cust_club.setDepot(dmldepoly.get(i).getDepot());
			Regn_depo_Cust_club.setCust_club(dmldepoly.get(i).getCust_club());
			dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
		}

		for (int i = 0; i < dmldepoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoty.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoty.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoty.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoty.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoty.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		for (int i = 0; i < dmldepoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoout.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoout.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoout.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoout.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoout.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		List<MISReport> dmldepooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_club.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_club.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_club.get(k).getDepot());
			repo.setCust_club(dist_Regn_depo_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmldepoly.size(); i++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldepoly.get(i).getLy_vol());
					repo.setLy_val(dmldepoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldepoty.size(); j++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldepoty.get(j).getTy_vol());
					repo.setTy_val(dmldepoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldepoty.get(j).getTotal_scheme_outflow());

				}
			}
			for (int l = 0; l < dmldepoout.size(); l++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldepoout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldepooutflow.add(repo);
		}

		// Customer outflow details
		System.out.println("call BPIL_ML_DLR_AC_NO_LY_OUTFLOW");
		List<MISReport> dmldlracnoly = new ArrayList<MISReport>();
		CallableStatement cStmt13;
		try {
			cStmt13 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_DLR_AC_NO_LY_OUTFLOW(?,?,?,?)}");
			cStmt13.setString(1, ml_group);
			cStmt13.setString(2, from_date1);
			cStmt13.setString(3, to_date1);
			cStmt13.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt13.executeQuery();
			ResultSet rs13 = (ResultSet) cStmt13.getObject(4);
			while (rs13.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs13.getString("REGN"));
				repo.setDepot_code(rs13.getString("DEPOT_CODE"));
				repo.setDepot(rs13.getString("DEPOT_NAME"));
				repo.setCust_code(rs13.getString("DLR_AC_NO"));
				repo.setCust_name(rs13.getString("DLR_AC_NAME"));
				repo.setCust_club(rs13.getString("DLR_CAT"));
				repo.setLy_vol(rs13.getDouble("LY_VOL"));
				repo.setLy_val(rs13.getDouble("LY_VAL"));
				System.out.println("REGN " + rs13.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs13.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs13.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs13.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs13.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs13.getString("DLR_CAT"));
				System.out.println("LY_VOL " + rs13.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs13.getDouble("LY_VAL"));

				dmldlracnoly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_DLR_AC_NO_TY_OUTFLOW");
		List<MISReport> dmldlracnoty = new ArrayList<MISReport>();
		CallableStatement cStmt14;
		try {
			cStmt14 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_DLR_AC_NO_TY_OUTFLOW(?,?,?,?)}");
			cStmt14.setString(1, ml_group);
			cStmt14.setString(2, from_date1);
			cStmt14.setString(3, to_date1);
			cStmt14.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt14.executeQuery();
			ResultSet rs14 = (ResultSet) cStmt14.getObject(4);
			while (rs14.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs14.getString("REGN"));
				repo.setDepot_code(rs14.getString("DEPOT_CODE"));
				repo.setDepot(rs14.getString("DEPOT_NAME"));
				repo.setCust_code(rs14.getString("DLR_AC_NO"));
				repo.setCust_name(rs14.getString("DLR_AC_NAME"));
				repo.setCust_club(rs14.getString("DLR_CAT"));
				repo.setTy_vol(rs14.getDouble("TY_VOL"));
				repo.setTy_val(rs14.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs14.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs14.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs14.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs14.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs14.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs14.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs14.getString("DLR_CAT"));
				System.out.println("TY_VOL " + rs14.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs14.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs14.getDouble("TOT_ADJUST_RW"));

				dmldlracnoty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_DLR_AC_NO_OUTFLOW");
		List<MISReport> dmldlracnoout = new ArrayList<MISReport>();
		CallableStatement cStmt15;
		try {
			cStmt15 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_DLR_AC_NO_OUTFLOW(?,?,?,?)}");
			cStmt15.setString(1, ml_group);
			cStmt15.setString(2, from_date1);
			cStmt15.setString(3, to_date1);
			cStmt15.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt15.executeQuery();
			ResultSet rs15 = (ResultSet) cStmt15.getObject(4);
			while (rs15.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs15.getString("REGN"));
				repo.setDepot_code(rs15.getString("DEPOT_CODE"));
				repo.setDepot(rs15.getString("DEPOT_NAME"));
				repo.setCust_code(rs15.getString("DLR_AC_NO"));
				repo.setCust_name(rs15.getString("DLR_AC_NAME"));
				repo.setCust_club(rs15.getString("DLR_CAT"));
				repo.setTotal_scheme_outflow(rs15.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs15.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs15.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs15.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs15.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs15.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs15.getString("DLR_CAT"));
				System.out.println("ADJUST_RW " + rs15.getDouble("ADJUST_RW"));

				dmldlracnoout.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("dlr outflow");

		List<MISReport> dist_Regn_depo_Cust_code = new ArrayList<>();
		for (int i = 0; i < dmldlracnoly.size(); i++) {
			MISReport Regn_depo_Cust_code = new MISReport();
			Regn_depo_Cust_code.setRegn(dmldlracnoly.get(i).getRegn());
			Regn_depo_Cust_code.setDepot_code(dmldlracnoly.get(i).getDepot_code());
			Regn_depo_Cust_code.setDepot(dmldlracnoly.get(i).getDepot());
			Regn_depo_Cust_code.setCust_code(dmldlracnoly.get(i).getCust_code());
			Regn_depo_Cust_code.setCust_name(dmldlracnoly.get(i).getCust_name());
			Regn_depo_Cust_code.setCust_club(dmldlracnoly.get(i).getCust_club());
			dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
		}

		for (int i = 0; i < dmldlracnoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoty.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoty.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoty.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoty.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoty.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoty.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoty.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoty.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		for (int i = 0; i < dmldlracnoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoout.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoout.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoout.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoout.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoout.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoout.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoout.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoout.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		List<MISReport> dmldlracnooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_code.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_code.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_code.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_code.get(k).getDepot());
			repo.setCust_code(dist_Regn_depo_Cust_code.get(k).getCust_code());
			repo.setCust_name(dist_Regn_depo_Cust_code.get(k).getCust_name());
			repo.setCust_club(dist_Regn_depo_Cust_code.get(k).getCust_club());
			for (int i = 0; i < dmldlracnoly.size(); i++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoly.get(i).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldlracnoly.get(i).getLy_vol());
					repo.setLy_val(dmldlracnoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldlracnoty.size(); j++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoty.get(j).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldlracnoty.get(j).getTy_vol());
					repo.setTy_val(dmldlracnoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldlracnoty.get(j).getTotal_scheme_outflow());

				}

			}
			for (int l = 0; l < dmldlracnoout.size(); l++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoout.get(l).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldlracnoout.get(l).getTotal_scheme_outflow());

				}

			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldlracnooutflow.add(repo);
		}

		System.out.println("MIS Report");

		model.addAttribute("Info_grid4", dmlmloutflow);
		model.addAttribute("Info_grid3", dmlcustoutflow);
		model.addAttribute("Info_grid2", dmlregnoutflow);
		model.addAttribute("Info_grid1", dmldepooutflow);
		model.addAttribute("Info_grid", dmldlracnooutflow);

		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("datepicker", from_date);
		model.addAttribute("datepicker1", to_date);
		return new ModelAndView("MISReportSP");
	}

	// MIS report
	@RequestMapping("/MISReport")
	public ModelAndView MISReport(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "from_date") String from_date, @RequestParam(value = "to_date") String to_date,
			ModelMap map, Model model, HttpServletRequest request) {

//			    	DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy"); 
//			    	Date fromdate = null, todate = null;
//					try {
//						fromdate = (Date)formatter.parse(from_date);
//						todate = (Date)formatter.parse(to_date);
//			    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//			    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yyyy");
//			    	String from_date1 = newFormat.format(fromdate);
//			    	String to_date1 = newFormat.format(todate);
		System.out.println("Start Date: " + from_date + " End Date: " + to_date);
		String from_date1 = from_date;
		String to_date1 = to_date;

		System.out.println("from " + from_date1 + " to " + to_date1);

		// Scheme outflow details
		System.out.println("call BPIL_ML_LY_OUTFLOW");

		String sql1 = "SELECT ML_LY.LY_VOL, " + "		  ML_LY.LY_VAL "
//			    				+ "		--,BPIL_ML_OUTFLOW('"+ml_group+"', '"+from_date1+"', '"+to_date1+"') TOT_ADJUST_RW "
				+ "FROM   (SELECT NVL(SUM(MTD_VOL),0) LY_VOL, " + "		  		  NVL(SUM(MTD_VAL),0) LY_VAL "
//			    				+ "		  		--INTO LY_VOL, LY_VAL "
				+ "		   FROM   (SELECT ML_LY.PRD_BILL_TO,    "
				+ "		  		  		  NVL(SUM(ML_LY.PRD_VOL),0) MTD_VOL,  "
				+ "		  		  		  NVL(SUM(ML_LY.PRD_VAL),0) MTD_VAL  "
				+ "		  		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		  		  		  		   ,BDM.BILL_TO_ID  "
				+ "		  		  		  		   ,PRD.PRODUCT PRD_NAME "
				+ "		  		  		  		   ,TRX.SLS_SKU_CODE "
				+ "		  		  		  		   ,PRD.PRD_CAT  "
				+ "		  		  		  		   ,PRD.PRD_CAT_DESC  "
				+ "		  		  		  		   ,PRD.PRD_GRP  " + "		  		  		  		   ,PRD.PRD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_SHD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_UOM  "
				+ "		  		  		  		   ,PRD.PRD_PCK_SIZE   "
				+ "		  		  		  		   ,TRX.SLS_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_INV_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_TRX_DATE  "
				+ "		  		  		  		   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		  		  		  		   ,TRX.SLS_TRX_IND  "
				+ "		  		  		  		   ,TRX.SLS_VOL PRD_VOL "
				+ "		  		  		  		   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		  		  		  		   ,TRX.SLS_VAL PRD_VAL "
				+ "		  		  		   FROM    BPIL_DEALER_MASTER_NEW BDM  "
				+ "		  		  		  		   ,BPIL_TRX_MASTER TRX  "
				+ "		  		  		  		   ,(SELECT  BPM.PRODUCT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT        PRD_CAT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT_DESC   PRD_CAT_DESC  "
				+ "		  		  		  		   			 ,BPM.PRD_GRP        PRD_GRP  "
				+ "		  		  		  		   			 ,BPM.PRD_CODE       PRD_CODE  "
				+ "		  		  		  		   			 ,BPM.SHD_CODE       PRD_SHD_CODE  "
				+ "		  		  		  		   			 ,BPM.PRD_UOM        PRD_UOM  "
				+ "		  		  		  		   			 ,BPM.PACK_SIZE      PRD_PCK_SIZE  "
				+ "		  		  		  		     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		  		  		  		   			 ,BPIL_QMIS_PRD BQP "
				+ "		  		  		  		     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		  		  		  		     AND     BQP.ML = '" + ml_group + "' "
				+ "		  		  		  		    ) PRD  "
				+ "		  		  		   WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT  "
//			    				+ "		  		  		 --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		  		  		   AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12))  "
				+ "		  		  		   			 AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12)))  " + "		  		  		           )  "
				+ "		  		  		   AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO  "
				+ "		  		  		  ) ML_LY " + "		  		   GROUP by ML_LY.PRD_BILL_TO "
				+ "		  		  ) " + "		  ) ML_LY ";

		List<MISReport> dmlmlly = jdbcTemplate.query(sql1, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//		 			List<MISReport> dmlmlly = new ArrayList<MISReport>();
//				   	CallableStatement cStmt1;
//				   	try {
//				   		cStmt1 = hibernateConfiguration.dataSource().getConnection()
//				   					.prepareCall("{call BPIL_ML_LY_OUTFLOW(?,?,?,?)}");
//				   		cStmt1.setString(1,  ml_group);
//				   		cStmt1.setString(2,  from_date1);
//				   		cStmt1.setString(3,  to_date1);
//				   		cStmt1.registerOutParameter(4, OracleTypes.CURSOR);
//				   		ResultSet result = cStmt1.executeQuery();
//				   		ResultSet rs1 = (ResultSet) cStmt1.getObject(4);
//				   		while (rs1.next()) {
//				   			MISReport repo = new MISReport();
//				   			repo.setLy_vol(rs1.getDouble("LY_VOL"));
//				   			repo.setLy_val(rs1.getDouble("LY_VAL"));
//				   			System.out.println("LY_VOL "+rs1.getDouble("LY_VOL"));
//				   			System.out.println("LY_VAL "+rs1.getDouble("LY_VAL"));
//						   
//				   			dmlmlly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_TY_OUTFLOW");

		String sql2 = "SELECT ML_TY.TY_VOL, " + "		  ML_TY.TY_VAL "
//			    				+ "	    --,BPIL_ML_OUTFLOW('"+ml_group+"', '"+from_date1+"', '"+to_date1+"') TOT_ADJUST_RW "
				+ "FROM   (SELECT NVL(SUM(MTD_VOL),0) TY_VOL, " + "		  		  NVL(SUM(MTD_VAL),0) TY_VAL "
//			    				+ "		  		--INTO TY_VOL, TY_VAL "
				+ "		   FROM   (SELECT ML_TY.PRD_BILL_TO,    "
				+ "		  		  		  NVL(SUM(ML_TY.PRD_VOL),0) MTD_VOL,  "
				+ "		  		  		  NVL(SUM(ML_TY.PRD_VAL),0) MTD_VAL  "
				+ "		  		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		  		  		  		   ,BDM.BILL_TO_ID  "
				+ "		  		  		  		   ,PRD.PRODUCT PRD_NAME "
				+ "		  		  		  		   ,TRX.SLS_SKU_CODE "
				+ "		  		  		  		   ,PRD.PRD_CAT  "
				+ "		  		  		  		   ,PRD.PRD_CAT_DESC  "
				+ "		  		  		  		   ,PRD.PRD_GRP  " + "		  		  		  		   ,PRD.PRD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_SHD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_UOM  "
				+ "		  		  		  		   ,PRD.PRD_PCK_SIZE   "
				+ "		  		  		  		   ,TRX.SLS_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_INV_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_TRX_DATE  "
				+ "		  		  		  		   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		  		  		  		   ,TRX.SLS_TRX_IND  "
				+ "		  		  		  		   ,TRX.SLS_VOL PRD_VOL "
				+ "		  		  		  		   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		  		  		  		   ,TRX.SLS_VAL PRD_VAL "
				+ "		  		  		   FROM    BPIL_DEALER_MASTER_NEW BDM  "
				+ "		  		  		  		   ,BPIL_TRX_MASTER TRX  "
				+ "		  		  		  		   ,(SELECT  BPM.PRODUCT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT        PRD_CAT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT_DESC   PRD_CAT_DESC  "
				+ "		  		  		  		   			 ,BPM.PRD_GRP        PRD_GRP  "
				+ "		  		  		  		   			 ,BPM.PRD_CODE       PRD_CODE  "
				+ "		  		  		  		   			 ,BPM.SHD_CODE       PRD_SHD_CODE  "
				+ "		  		  		  		   			 ,BPM.PRD_UOM        PRD_UOM  "
				+ "		  		  		  		   			 ,BPM.PACK_SIZE      PRD_PCK_SIZE  "
				+ "		  		  		  		     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		  		  		  		   			 ,BPIL_QMIS_PRD BQP "
				+ "		  		  		  		     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		  		  		  		     AND     BQP.ML = '" + ml_group + "' "
				+ "		  		  		  		    ) PRD  "
				+ "		  		  		   WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT  "
//			    				+ "		  		  		 --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		  		  		   AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "		  		  		   			 AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0)))  " + "		  		  		   		   )  "
				+ "		  		  		   AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO  "
				+ "		  		  		  ) ML_TY " + "		  		   GROUP by ML_TY.PRD_BILL_TO "
				+ "		  		  ) " + "		  ) ML_TY ";

		List<MISReport> dmlmlty = jdbcTemplate.query(sql2, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//			    	List<MISReport> dmlmlty = new ArrayList<MISReport>();
//			    	CallableStatement cStmt2;
//			    	try {
//			    		cStmt2 = hibernateConfiguration.dataSource().getConnection()
//			    					.prepareCall("{call BPIL_ML_TY_OUTFLOW(?,?,?,?)}");
//			    		cStmt2.setString(1,  ml_group);
//			    		cStmt2.setString(2,  from_date1);
//			    		cStmt2.setString(3,  to_date1);
//			    		cStmt2.registerOutParameter(4, OracleTypes.CURSOR);
//			    		ResultSet result = cStmt2.executeQuery();
//			    		ResultSet rs2 = (ResultSet) cStmt2.getObject(4);
//			    		while (rs2.next()) {
//			    			MISReport repo = new MISReport();
//			    			repo.setTy_vol(rs2.getDouble("TY_VOL"));
//			    			repo.setTy_val(rs2.getDouble("TY_VAL"));
////			    		repo.setTotal_scheme_outflow(rs2.getDouble("TOT_ADJUST_RW"));
//			    			System.out.println("TY_VOL "+rs2.getDouble("TY_VOL"));
//			    			System.out.println("TY_VAL "+rs2.getDouble("TY_VAL"));
////			    		System.out.println("TOT_ADJUST_RW "+rs2.getDouble("TOT_ADJUST_RW"));
//							   
//			    			dmlmlty.add(repo);
//			    		}
//			    	} catch (SQLException e) {
//			    		e.printStackTrace();
//			    	}
//			    	catch (Exception e) {
//			    		System.out.println(e.getMessage());
//			    	}

		System.out.println("call BPIL_ML_TOTAL_OUTFLOW");

		String sql3 = "SELECT SUM (TOTAL_AMOUNT) TOT_ADJUST_RW "
//			    				+ "     --INTO TOT_ADJUST_RW "
				+ "FROM   (SELECT CASE " + "		   		       WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "		                    THEN SUM(TOTAL_AMT) " + "		               ELSE 0 "
				+ "		          END  TOTAL_AMOUNT " + "		   FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "		                  RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "		                  SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "		                  CASE " + "		                       WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "		                               OR RW.ATTRIBUTE1 = 'A') "
				+ "		                                    AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "		                            THEN RW.REWARD_ADJUSTMENTS "
				+ "		                       ELSE RW.REWARD_TOTAL " + "		                  END  TOTAL_AMT "
				+ "		           FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "		                  BPIL_SCHEME_MASTER BSM "
				+ "		           WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "		           AND    RW.REWARD_I_STATUS = 'P' "
				+ "		           AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//			    				+ "		         --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "		         --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "		           AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "		           AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1 + "','DD-MM-YYYY'))) "
				+ "		                    AND (TRUNC(BSM.END_DATE) <= (TO_DATE('" + to_date1 + "','DD-MM-YYYY'))) "
				+ "                       ) " + "		           UNION ALL "
				+ "		           SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "		                  RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "		                  SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "		                  CASE " + "		                       WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "		                               OR RW.ATTRIBUTE1 = 'A') "
				+ "		                                    AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "		                            THEN RW.REWARD_ADJUSTMENTS "
				+ "		                       ELSE RW.REWARD_CONVERTED_CN "
				+ "		                  END  TOTAL_AMT " + "		           FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "		                  BPIL_SCHEME_MASTER BSM "
				+ "		           WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "		           AND    RW.REWARD_I_STATUS = 'P' "
				+ "		           AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "		           AND    RW.REWARD_GIFT_TO_CN = 'Y' " + "		           AND    RW.ATTRIBUTE1 <> 'R' "
//			    				+ "		         --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "		         --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "		           AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "		           AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1 + "','DD-MM-YYYY'))) "
				+ "		           			AND (TRUNC(BSM.END_DATE) <= (TO_DATE('" + to_date1 + "','DD-MM-YYYY'))) "
				+ "                       ) " + "		          ) " + "		   UNION ALL " + "		   SELECT CASE "
				+ "		   		       WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "		   		            THEN SUM(TOTAL_AMT) " + "		   		       ELSE 0 "
				+ "		   		  END  TOTAL_AMOUNT " + "		   FROM   (SELECT TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "		           FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "		   				          BSM.SCHEME_NAME SCHEME_NAME , "
				+ "		   				          RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "		   				          RW.REWARD_DLR_CODE CUST_CODE , "
				+ "		   				          BGM.GIFT_GROUP GIFT_TYPE , "
				+ "		   				          BGM.GIFT_CODE GIFT_CODE , "
				+ "		   				          RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "		   				          BGM.GIFT_NAME GIFT_NAME , "
				+ "		   				          BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "						          RW.REWARD_GIFT_ID GIFT_ID , " + "		   				          CASE "
				+ "		   				      	       WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "		   				      	               OR RW.ATTRIBUTE1 = 'A') "
				+ "		   				                            AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "		   				      	            THEN RW.REWARD_ADJUSTMENTS "
				+ "						      	       ELSE RW.REWARD_TOTAL "
				+ "	   					      	  END  TOTAL_QTY "
				+ "	   					   FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "	   					      	  BPIL_SCHEME_MASTER BSM, "
				+ "	   					      	  BPIL_GIFT_MASTER BGM "
				+ "	   					   WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "	   					   AND    RW.REWARD_I_STATUS = 'P' "
				+ "	   					   AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "	   					   AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "	   					   AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "	   					   AND    RW.REWARD_GIFT_TO_CN = 'N' "
//			    				+ "	   					 --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "	   					 --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "	   					   AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "	   					   AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "	   					            AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "	   					   UNION ALL " + "	   					   SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "	   					          BSM.SCHEME_NAME SCHEME_NAME , "
				+ "	   					          RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "	   					          RW.REWARD_DLR_CODE CUST_CODE , "
				+ "	   					          BGM.GIFT_GROUP GIFT_TYPE , "
				+ "	   					          BGM.GIFT_CODE GIFT_CODE , "
				+ "	   					          RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "	   					          BGM.GIFT_NAME GIFT_NAME , "
				+ "	   					          BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "	   					          RW.REWARD_GIFT_ID GIFT_ID , " + "	   					          CASE "
				+ "	   					               WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "	   					                       OR RW.ATTRIBUTE1 = 'A') "
				+ "	   					                            AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "	   					                    THEN RW.REWARD_ADJUSTMENTS "
				+ "	   					               ELSE RW.REWARD_TOTAL "
				+ "	   					          END  TOTAL_QTY "
				+ "	   					   FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "	   					          BPIL_SCHEME_MASTER BSM, "
				+ "	   					          BPIL_GIFT_MASTER BGM "
				+ "	   					   WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "	   					   AND    RW.REWARD_I_STATUS = 'P' "
				+ "	   					   AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "	   					   AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "	   					   AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "	   					   AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "	   					   AND    RW.ATTRIBUTE1 = 'R' "
//			    				+ "	   					 --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "	   					 --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "	   					   AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "	   					   AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "	   					   		    AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) " + "		                  ) "
				+ "		          ) " + "       ) ";

		List<MISReport> dmlmltotal = jdbcTemplate.query(sql3, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("TOT_ADJUST_RW " + rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//			    	List<MISReport> dmlmltotal = new ArrayList<MISReport>();
//			    	CallableStatement cStmt3;
//			    	try {
//			    		cStmt3 = hibernateConfiguration.dataSource().getConnection()
//			    					.prepareCall("{call BPIL_ML_TOTAL_OUTFLOW(?,?,?,?)}");
//			    		cStmt3.setString(1,  ml_group );
//			    		cStmt3.setString(2,  from_date1 );
//			    		cStmt3.setString(3,  to_date1 );
//			    		cStmt3.registerOutParameter(4, OracleTypes.CURSOR);
//			    		ResultSet result = cStmt3.executeQuery();
//			    		ResultSet rs3 = (ResultSet) cStmt3.getObject(4);
//			    		while (rs3.next()) {
//			    			MISReport repo = new MISReport();
//			    			repo.setTotal_scheme_outflow(rs3.getDouble("TOT_ADJUST_RW"));
//			    			System.out.println("TOT_ADJUST_RW "+rs3.getDouble("TOT_ADJUST_RW"));
//						   
//			    			dmlmltotal.add(repo);
//						}
//			    		
//		
//			    	} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("scheme outflow");
		List<MISReport> dmlmloutflow = new ArrayList<>();
		MISReport dmlobj = new MISReport();
		dmlobj.setLy_vol(dmlmlly.get(0).getLy_vol());
		dmlobj.setLy_val(dmlmlly.get(0).getLy_val());

		dmlobj.setTy_vol(dmlmlty.get(0).getTy_vol());
		dmlobj.setTy_val(dmlmlty.get(0).getTy_val());

		Double volgr = 0.0;
		if (dmlobj.getLy_vol() > 0.0) {
			volgr = ((dmlobj.getTy_vol() - dmlobj.getLy_vol()) / dmlobj.getLy_vol()) * 100;
		} else if (dmlobj.getLy_vol() == 0.0 && dmlobj.getTy_vol() > 0.0) {
			volgr = 100.0;
		}
		Double valgr = 0.0;
		if (dmlobj.getLy_val() > 0.0) {
			valgr = ((dmlobj.getTy_val() - dmlobj.getLy_val()) / dmlobj.getLy_val()) * 100;
		} else if (dmlobj.getLy_val() == 0.0 && dmlobj.getTy_val() > 0.0) {
			volgr = 100.0;
		}
		dmlobj.setVol_gr(Math.round(volgr * 100.0) / 100.0);
		dmlobj.setVal_gr(Math.round(valgr * 100.0) / 100.0);
		dmlobj.setTotal_scheme_outflow(dmlmltotal.get(0).getTotal_scheme_outflow());

		dmlmloutflow.add(dmlobj);

		// Club outflow details
		System.out.println("call BPIL_ML_CUST_CLUB_LY_OUTFLOW");

		String sql4 = "SELECT ML_CUST_CLUB_LY.REPORT_CLUB_CLS, " + "		  ML_CUST_CLUB_LY.LY_VOL, "
				+ "		  ML_CUST_CLUB_LY.LY_VAL "
//								+ "		--,BPIL_ML_CUST_CLUB_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_CUST_CLUB_LY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REPORT_CLUB_CLS,    " + "		          NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL, "
				+ "		          NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								+ "		        --INTO CUST_CLUB_CLS, LY_VOL, LY_VAL "
				+ "		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		                   ,BDM.BILL_TO_ID  " + "		                   ,DC.REPORT_CLUB_CLS "
				+ "		                   ,PRD.PRODUCT PRD_NAME " + "		                   ,TRX.SLS_SKU_CODE "
				+ "		                   ,PRD.PRD_CAT " + "		                   ,PRD.PRD_CAT_DESC "
				+ "		                   ,PRD.PRD_GRP  " + "		                   ,PRD.PRD_CODE  "
				+ "		                   ,PRD.PRD_SHD_CODE " + "		                   ,PRD.PRD_UOM  "
				+ "		                   ,PRD.PRD_PCK_SIZE " + "		                   ,TRX.SLS_TRX_ID "
				+ "		                   ,TRX.SLS_INV_TRX_ID " + "		                   ,TRX.SLS_TRX_DATE "
				+ "		                   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		                   ,TRX.SLS_TRX_IND  " + "		                   ,TRX.SLS_VOL PRD_VOL "
				+ "		                   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		                   ,TRX.SLS_VAL PRD_VAL "
				+ "		           FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "		                   ,BPIL_DLR_CLUB_CLS DC " + "		                   ,BPIL_TRX_MASTER TRX  "
				+ "		                   ,(SELECT  BPM.PRODUCT "
				+ "		                             ,BPM.PRD_CAT        PRD_CAT "
				+ "		                             ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "		                             ,BPM.PRD_GRP        PRD_GRP  "
				+ "		                             ,BPM.PRD_CODE       PRD_CODE  "
				+ "		                             ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "		                             ,BPM.PRD_UOM        PRD_UOM  "
				+ "		                             ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "		                     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		                             ,BPIL_QMIS_PRD BQP "
				+ "		                     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		                     AND     BQP.ML = '" + ml_group + "' " + "		                    ) PRD  "
				+ "		           WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "		         --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		           AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12)) "
				+ "		                     AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "		                   )  "
				+ "		           AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "		           AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS " + "		          ) ML_LY "
				+ "		   GROUP by ML_LY.REPORT_CLUB_CLS " + "		   ORDER by ML_LY.REPORT_CLUB_CLS "
				+ "		  ) ML_CUST_CLUB_LY ";

		List<MISReport> dmlcustly = jdbcTemplate.query(sql4, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmlcustly = new ArrayList<MISReport>();
//					CallableStatement cStmt4;
//					try {
//						cStmt4 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_CUST_CLUB_LY_OUTFLOW(?,?,?,?)}");
//						cStmt4.setString(1,  ml_group);
//						cStmt4.setString(2,  from_date1);
//						cStmt4.setString(3,  to_date1);
//						cStmt4.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt4.executeQuery();
//						ResultSet rs4 = (ResultSet) cStmt4.getObject(4);
//						while (rs4.next()) {
//							MISReport repo = new MISReport();
//							repo.setCust_club(rs4.getString("REPORT_CLUB_CLS"));
//							repo.setLy_vol(rs4.getDouble("LY_VOL"));
//							repo.setLy_val(rs4.getDouble("LY_VAL"));
//							System.out.println("REPORT_CLUB_CLS "+rs4.getString("REPORT_CLUB_CLS"));
//							System.out.println("LY_VOL "+rs4.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs4.getDouble("LY_VAL"));
//							   
//							dmlcustly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_CUST_CLUB_TY_OUTFLOW");

		String sql5 = "SELECT ML_CUST_CLUB_TY.REPORT_CLUB_CLS, " + "		  ML_CUST_CLUB_TY.TY_VOL, "
				+ "		  ML_CUST_CLUB_TY.TY_VAL "
//								+ "		--,BPIL_ML_CUST_CLUB_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_CUST_CLUB_TY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REPORT_CLUB_CLS,    " + "		          NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL, "
				+ "		          NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								+ "		        --INTO CUST_CLUB_CLS, TY_VOL, TY_VAL "
				+ "		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		                   ,BDM.BILL_TO_ID  " + "		                   ,DC.REPORT_CLUB_CLS "
				+ "		                   ,PRD.PRODUCT PRD_NAME " + "		                   ,TRX.SLS_SKU_CODE "
				+ "		                   ,PRD.PRD_CAT " + "		                   ,PRD.PRD_CAT_DESC "
				+ "		                   ,PRD.PRD_GRP  " + "		                   ,PRD.PRD_CODE  "
				+ "		                   ,PRD.PRD_SHD_CODE " + "		                   ,PRD.PRD_UOM  "
				+ "		                   ,PRD.PRD_PCK_SIZE " + "		                   ,TRX.SLS_TRX_ID "
				+ "		                   ,TRX.SLS_INV_TRX_ID " + "		                   ,TRX.SLS_TRX_DATE "
				+ "		                   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		                   ,TRX.SLS_TRX_IND  " + "		                   ,TRX.SLS_VOL PRD_VOL "
				+ "		                   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		                   ,TRX.SLS_VAL PRD_VAL "
				+ "		           FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "		                   ,BPIL_DLR_CLUB_CLS DC " + "		                   ,BPIL_TRX_MASTER TRX  "
				+ "		                   ,(SELECT  BPM.PRODUCT "
				+ "		                             ,BPM.PRD_CAT        PRD_CAT "
				+ "		                             ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "		                             ,BPM.PRD_GRP        PRD_GRP  "
				+ "		                             ,BPM.PRD_CODE       PRD_CODE  "
				+ "		                             ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "		                             ,BPM.PRD_UOM        PRD_UOM  "
				+ "		                             ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "		                     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		                             ,BPIL_QMIS_PRD BQP "
				+ "		                     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		                     AND     BQP.ML = '" + ml_group + "' " + "		                    ) PRD  "
				+ "		           WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "		         --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		           AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0)) "
				+ "		                     AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "		                   )  "
				+ "		           AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "		           AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS " + "		          ) ML_TY "
				+ "		   GROUP by ML_TY.REPORT_CLUB_CLS " + "		   ORDER by ML_TY.REPORT_CLUB_CLS "
				+ "       ) ML_CUST_CLUB_TY ";

		List<MISReport> dmlcustty = jdbcTemplate.query(sql5, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlcustty = new ArrayList<MISReport>();
//					CallableStatement cStmt5;
//					try {
//						cStmt5 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_CUST_CLUB_TY_OUTFLOW(?,?,?,?)}");
//						cStmt5.setString(1,  ml_group);
//						cStmt5.setString(2,  from_date1);
//						cStmt5.setString(3,  to_date1);
//						cStmt5.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt5.executeQuery();
//						ResultSet rs5 = (ResultSet) cStmt5.getObject(4);
//						while (rs5.next()) {
//							MISReport repo = new MISReport();
//							repo.setCust_club(rs5.getString("REPORT_CLUB_CLS"));
//							repo.setTy_vol(rs5.getDouble("TY_VOL"));
//							repo.setTy_val(rs5.getDouble("TY_VAL"));
////						repo.setTotal_scheme_outflow(rs5.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REPORT_CLUB_CLS "+rs5.getString("REPORT_CLUB_CLS"));
//							System.out.println("TY_VOL "+rs5.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs5.getDouble("TY_VAL"));
////						System.out.println("TOT_ADJUST_RW "+rs5.getDouble("TOT_ADJUST_RW"));
//								   
//							dmlcustty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_CUST_CLUB_OUTFLOW");

		String sql6 = "SELECT REPORT_CLUB_CLS, " + "       SUM (TOTAL_AMOUNT) ADJUST_RW "
				+ "FROM   (SELECT REPORT_CLUB_CLS, " + "               TOTAL_AMOUNT "
				+ "        FROM   (SELECT REPORT_CLUB_CLS, " + "                       CASE "
				+ "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM, "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM , "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                       )  " + "                GROUP BY REPORT_CLUB_CLS "
				+ "                ORDER BY REPORT_CLUB_CLS " + "               )  " + "        UNION ALL "
				+ "        SELECT REPORT_CLUB_CLS, " + "               CASE "
				+ "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REPORT_CLUB_CLS, "
				+ "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM , "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM , "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                       ) " + "               ) " + "        GROUP BY REPORT_CLUB_CLS "
				+ "        ORDER BY REPORT_CLUB_CLS " + "       ) " + "GROUP BY REPORT_CLUB_CLS "
				+ "ORDER BY REPORT_CLUB_CLS ";

		List<MISReport> dmlcustout = jdbcTemplate.query(sql6, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlcustout = new ArrayList<MISReport>();
//					CallableStatement cStmt6;
//					try {
//						cStmt6 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_CUST_CLUB_OUTFLOW(?,?,?,?)}");
//						cStmt6.setString(1,  ml_group );
//						cStmt6.setString(2,  from_date1 );
//						cStmt6.setString(3,  to_date1 );
//						cStmt6.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt6.executeQuery();
//						ResultSet rs6 = (ResultSet) cStmt6.getObject(4);
//						while (rs6.next()) {
//							MISReport repo = new MISReport();
//							repo.setCust_club(rs6.getString("REPORT_CLUB_CLS"));
//							repo.setTotal_scheme_outflow(rs6.getDouble("ADJUST_RW"));
//							System.out.println("REPORT_CLUB_CLS "+rs6.getString("REPORT_CLUB_CLS"));
//							System.out.println("ADJUST_RW "+rs6.getDouble("ADJUST_RW"));
//								   
//							dmlcustout.add(repo);
//						}
//							
//							
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}  

		System.out.println("cust club outflow");

		List<MISReport> dist_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlcustly.size(); i++) {
			MISReport Cust_club = new MISReport();
			Cust_club.setCust_club(dmlcustly.get(i).getCust_club());
			dist_Cust_club.add(Cust_club);
		}

		for (int i = 0; i < dmlcustty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustty.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustty.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		for (int i = 0; i < dmlcustout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustout.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustout.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		List<MISReport> dmlcustoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setCust_club(dist_Cust_club.get(k).getCust_club());

			for (int i = 0; i < dmlcustly.size(); i++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustly.get(i).getCust_club())) {
					repo.setLy_vol(dmlcustly.get(i).getLy_vol());
					repo.setLy_val(dmlcustly.get(i).getLy_val());
				}
			}

			for (int j = 0; j < dmlcustty.size(); j++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustty.get(j).getCust_club())) {
					repo.setTy_vol(dmlcustty.get(j).getTy_vol());
					repo.setTy_val(dmlcustty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlcustty.get(j).getTotal_scheme_outflow());
				}
			}

			for (int l = 0; l < dmlcustout.size(); l++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustout.get(l).getCust_club())) {
					repo.setTotal_scheme_outflow(dmlcustout.get(l).getTotal_scheme_outflow());
				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlcustoutflow.add(repo);

		}

		// Region outflow details
		System.out.println("call BPIL_ML_REGN_LY_OUTFLOW");

		String sql7 = "SELECT ML_REGN_LY.REGN, " + "       ML_REGN_LY.REPORT_CLUB_CLS, " + "       ML_REGN_LY.LY_VOL, "
				+ "       ML_REGN_LY.LY_VAL "
//								+ "     --,BPIL_ML_REGN_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_LY.REGN, ML_REGN_LY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REGN,    " + "               ML_LY.REPORT_CLUB_CLS, "
				+ "               NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL, "
				+ "               NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								+ "             --INTO REGN, CUST_CLUB_CLS, LY_VOL, LY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID  "
				+ "                        ,DPM.REGN " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12)) "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_LY "
				+ "        GROUP by ML_LY.REGN, " + "                 ML_LY.REPORT_CLUB_CLS  "
				+ "        ORDER by ML_LY.REGN, " + "                 ML_LY.REPORT_CLUB_CLS " + "       ) ML_REGN_LY ";

		List<MISReport> dmlregnly = jdbcTemplate.query(sql7, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmlregnly = new ArrayList<MISReport>();
//					CallableStatement cStmt7;
//					try {
//						cStmt7 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_LY_OUTFLOW(?,?,?,?)}");
//						cStmt7.setString(1,  ml_group);
//						cStmt7.setString(2,  from_date1);
//						cStmt7.setString(3,  to_date1);
//						cStmt7.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt7.executeQuery();
//						ResultSet rs7 = (ResultSet) cStmt7.getObject(4);
//						while (rs7.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs7.getString("REGN"));
//							repo.setCust_club(rs7.getString("REPORT_CLUB_CLS"));
//							repo.setLy_vol(rs7.getDouble("LY_VOL"));
//							repo.setLy_val(rs7.getDouble("LY_VAL"));
//							System.out.println("REGN "+rs7.getString("REGN"));
//							System.out.println("REPORT_CLUB_CLS "+rs7.getString("REPORT_CLUB_CLS"));
//							System.out.println("LY_VOL "+rs7.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs7.getDouble("LY_VAL"));
//							   
//							dmlregnly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_TY_OUTFLOW");

		String sql8 = "SELECT ML_REGN_TY.REGN, " + "       ML_REGN_TY.REPORT_CLUB_CLS, " + "       ML_REGN_TY.TY_VOL, "
				+ "       ML_REGN_TY.TY_VAL "
//								+ "     --,BPIL_ML_REGN_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_TY.REGN, ML_REGN_TY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REGN,    " + "               ML_TY.REPORT_CLUB_CLS,    "
				+ "               NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL,  "
				+ "               NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								+ "             --INTO REGN, CUST_CLUB_CLS, TY_VOL, TY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_TY "
				+ "        GROUP by ML_TY.REGN, " + "                 ML_TY.REPORT_CLUB_CLS "
				+ "        ORDER by ML_TY.REGN, " + "                 ML_TY.REPORT_CLUB_CLS " + "       ) ML_REGN_TY ";

		List<MISReport> dmlregnty = jdbcTemplate.query(sql8, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlregnty = new ArrayList<MISReport>();
//					CallableStatement cStmt8;
//					try {
//						cStmt8 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_TY_OUTFLOW(?,?,?,?)}");
//						cStmt8.setString(1,  ml_group);
//						cStmt8.setString(2,  from_date1);
//						cStmt8.setString(3,  to_date1);
//						cStmt8.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt8.executeQuery();
//						ResultSet rs8 = (ResultSet) cStmt8.getObject(4);
//						while (rs8.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs8.getString("REGN"));
//							repo.setCust_club(rs8.getString("REPORT_CLUB_CLS"));
//							repo.setTy_vol(rs8.getDouble("TY_VOL"));
//							repo.setTy_val(rs8.getDouble("TY_VAL"));
////						repo.setTotal_scheme_outflow(rs8.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REGN "+rs8.getString("REGN"));
//							System.out.println("REPORT_CLUB_CLS "+rs8.getString("REPORT_CLUB_CLS"));
//							System.out.println("TY_VOL "+rs8.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs8.getDouble("TY_VAL"));
////						System.out.println("TOT_ADJUST_RW "+rs8.getDouble("TOT_ADJUST_RW"));
//							   
//							dmlregnty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_OUTFLOW");

		String sql9 = "SELECT REGN, " + "       REPORT_CLUB_CLS, " + "       SUM (TOTAL_AMOUNT) ADJUST_RW "
				+ "FROM   (SELECT REGN,  " + "               REPORT_CLUB_CLS, " + "               TOTAL_AMOUNT "
				+ "        FROM   (SELECT REGN,  " + "                       REPORT_CLUB_CLS, "
				+ "                       CASE " + "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//                              + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                              + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//                              + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                              + "                      --AND    DPM.REGN = P_REGN "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//                              + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                              + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS "
//                              + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                              + "                      --AND    DPM.REGN = P_REGN "
				+ "                       ) " + "                GROUP BY REGN,  "
				+ "                         REPORT_CLUB_CLS " + "                ORDER BY REGN,  "
				+ "                         REPORT_CLUB_CLS " + "               ) " + "        UNION ALL "
				+ "        SELECT REGN,  " + "               REPORT_CLUB_CLS, " + "               CASE "
				+ "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REGN,  "
				+ "                       REPORT_CLUB_CLS, "
				+ "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//                              + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                              + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//                              + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                              + "                      --AND    DPM.REGN = P_REGN "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//                              + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                              + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//                              + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                              + "                      --AND    DPM.REGN = P_REGN "
				+ "                       ) " + "               ) " + "        GROUP BY REGN,  "
				+ "                 REPORT_CLUB_CLS " + "        ORDER BY REGN,  " + "                 REPORT_CLUB_CLS "
				+ "       ) " + "GROUP BY REGN,  " + "         REPORT_CLUB_CLS " + "ORDER BY REGN,  "
				+ "         REPORT_CLUB_CLS ";

		List<MISReport> dmlregnout = jdbcTemplate.query(sql9, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlregnout = new ArrayList<MISReport>();
//					CallableStatement cStmt9;
//					try {
//						cStmt9 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_OUTFLOW(?,?,?,?)}");
//						cStmt9.setString(1,  ml_group );
//						cStmt9.setString(2,  from_date1 );
//						cStmt9.setString(3,  to_date1 );
//						cStmt9.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt9.executeQuery();
//						ResultSet rs9 = (ResultSet) cStmt9.getObject(4);
//						while (rs9.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs9.getString("REGN"));
//							repo.setCust_club(rs9.getString("REPORT_CLUB_CLS"));
//							repo.setTotal_scheme_outflow(rs9.getDouble("ADJUST_RW"));
//							System.out.println("REGN "+rs9.getString("REGN"));
//							System.out.println("REPORT_CLUB_CLS "+rs9.getString("REPORT_CLUB_CLS"));
//							System.out.println("ADJUST_RW "+rs9.getDouble("ADJUST_RW"));
//									   
//							dmlregnout.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}										

		System.out.println("regn outflow");
		List<MISReport> dist_Regn_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlregnly.size(); i++) {
			MISReport Regn_Cust_club = new MISReport();
			Regn_Cust_club.setRegn(dmlregnly.get(i).getRegn());
			Regn_Cust_club.setCust_club(dmlregnly.get(i).getCust_club());
			dist_Regn_Cust_club.add(Regn_Cust_club);
		}

		for (int i = 0; i < dmlregnty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnty.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnty.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnty.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnty.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		for (int i = 0; i < dmlregnout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnout.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnout.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnout.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnout.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		List<MISReport> dmlregnoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_Cust_club.get(k).getRegn());
			repo.setCust_club(dist_Regn_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmlregnly.size(); i++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnly.get(i).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnly.get(i).getCust_club())) {
					repo.setLy_vol(dmlregnly.get(i).getLy_vol());
					repo.setLy_val(dmlregnly.get(i).getLy_val());
				}

			}

			for (int j = 0; j < dmlregnty.size(); j++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnty.get(j).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnty.get(j).getCust_club())) {

					repo.setTy_vol(dmlregnty.get(j).getTy_vol());
					repo.setTy_val(dmlregnty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlregnty.get(j).getTotal_scheme_outflow());

				}
			}

			for (int l = 0; l < dmlregnout.size(); l++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnout.get(l).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmlregnout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlregnoutflow.add(repo);

		}

		// Depot outflow details

		System.out.println("call BPIL_ML_REGN_DEPO_LY_OUTFLOW");

		String sql10 = "SELECT ML_REGN_DEPO_LY.REGN, " + "       ML_REGN_DEPO_LY.DEPOT_CODE, "
				+ "       ML_REGN_DEPO_LY.DEPOT_NAME, " + "       ML_REGN_DEPO_LY.REPORT_CLUB_CLS, "
				+ "       ML_REGN_DEPO_LY.LY_VOL, " + "       ML_REGN_DEPO_LY.LY_VAL "
//								 + "     --,BPIL_ML_REGN_DEPO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_DEPO_LY.REGN, ML_REGN_DEPO_LY.DEPOT_CODE, ML_REGN_DEPO_LY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REGN,   " + "               ML_LY.DEPOT_CODE, "
				+ "               ML_LY.DEPOT_NAME, " + "               ML_LY.REPORT_CLUB_CLS, "
				+ "               NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL,  "
				+ "               NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								 + "             --INTO REGN, DEPOT_CODE, DEPOT_NAME, CUST_CLUB_CLS, LY_VOL, LY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_LY "
				+ "        GROUP by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.REPORT_CLUB_CLS "
				+ "        ORDER by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.REPORT_CLUB_CLS "
				+ "       ) ML_REGN_DEPO_LY ";

		List<MISReport> dmldepoly = jdbcTemplate.query(sql10, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmldepoly = new ArrayList<MISReport>();
//					CallableStatement cStmt10;
//					try {
//						cStmt10 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_DEPO_LY_OUTFLOW(?,?,?,?)}");
//						cStmt10.setString(1,  ml_group);
//						cStmt10.setString(2,  from_date1);
//						cStmt10.setString(3,  to_date1);
//						cStmt10.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt10.executeQuery();
//						ResultSet rs10 = (ResultSet) cStmt10.getObject(4);
//						while (rs10.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs10.getString("REGN"));
//							repo.setDepot_code(rs10.getString("DEPOT_CODE"));
//							repo.setDepot(rs10.getString("DEPOT_NAME"));
//							repo.setCust_club(rs10.getString("REPORT_CLUB_CLS"));
//							repo.setLy_vol(rs10.getDouble("LY_VOL"));
//							repo.setLy_val(rs10.getDouble("LY_VAL"));
//							System.out.println("REGN "+rs10.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs10.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs10.getString("DEPOT_NAME"));
//							System.out.println("REPORT_CLUB_CLS "+rs10.getString("REPORT_CLUB_CLS"));
//							System.out.println("LY_VOL "+rs10.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs10.getDouble("LY_VAL"));
//							   
//							dmldepoly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_DEPO_TY_OUTFLOW");

		String sql11 = "SELECT ML_REGN_DEPO_TY.REGN, " + "       ML_REGN_DEPO_TY.DEPOT_CODE, "
				+ "       ML_REGN_DEPO_TY.DEPOT_NAME, " + "       ML_REGN_DEPO_TY.REPORT_CLUB_CLS, "
				+ "       ML_REGN_DEPO_TY.TY_VOL, " + "       ML_REGN_DEPO_TY.TY_VAL "
//								 + "     --,BPIL_ML_REGN_DEPO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_DEPO_TY.REGN, ML_REGN_DEPO_TY.DEPOT_CODE, ML_REGN_DEPO_TY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REGN,    " + "               ML_TY.DEPOT_CODE, "
				+ "               ML_TY.DEPOT_NAME, " + "               ML_TY.REPORT_CLUB_CLS,    "
				+ "               NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL,  "
				+ "               NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								 + "               --INTO REGN, DEPOT_CODE, DEPOT_NAME, CUST_CLUB_CLS, TY_VOL, TY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                 ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                 ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                 ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                 ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                 ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                 ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                 ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                         FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                 ,BPIL_QMIS_PRD BQP "
				+ "                         WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                         AND     BQP.ML = '" + ml_group + "' " + "                        ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_TY "
				+ "        GROUP by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.REPORT_CLUB_CLS "
				+ "        ORDER by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.REPORT_CLUB_CLS "
				+ "       ) ML_REGN_DEPO_TY ";

		List<MISReport> dmldepoty = jdbcTemplate.query(sql11, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldepoty = new ArrayList<MISReport>();
//					CallableStatement cStmt11;
//					try {
//						cStmt11 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_DEPO_TY_OUTFLOW(?,?,?,?)}");
//						cStmt11.setString(1,  ml_group);
//						cStmt11.setString(2,  from_date1);
//						cStmt11.setString(3,  to_date1);
//						cStmt11.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt11.executeQuery();
//						ResultSet rs11 = (ResultSet) cStmt11.getObject(4);
//						while (rs11.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs11.getString("REGN"));
//							repo.setDepot_code(rs11.getString("DEPOT_CODE"));
//							repo.setDepot(rs11.getString("DEPOT_NAME"));
//							repo.setCust_club(rs11.getString("REPORT_CLUB_CLS"));
//							repo.setTy_vol(rs11.getDouble("TY_VOL"));
//							repo.setTy_val(rs11.getDouble("TY_VAL"));
////						repo.setTotal_scheme_outflow(rs11.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REGN "+rs11.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs11.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs11.getString("DEPOT_NAME"));
//							System.out.println("REPORT_CLUB_CLS "+rs11.getString("REPORT_CLUB_CLS"));
//							System.out.println("TY_VOL "+rs11.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs11.getDouble("TY_VAL"));
////						System.out.println("TOT_ADJUST_RW "+rs11.getDouble("TOT_ADJUST_RW"));
//							   
//							dmldepoty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_DEPO_OUTFLOW");

		String sql12 = "SELECT REGN, " + "       DEPOT_CODE, " + "       DEPOT_NAME, " + "       REPORT_CLUB_CLS, "
				+ "       SUM (TOTAL_AMOUNT) ADJUST_RW " + "FROM   (SELECT REGN, " + "               DEPOT_CODE, "
				+ "               DEPOT_NAME, " + "               REPORT_CLUB_CLS, " + "               TOTAL_AMOUNT "
				+ "        FROM   (SELECT REGN, " + "                       DEPOT_CODE, "
				+ "                       DEPOT_NAME, " + "                       REPORT_CLUB_CLS, "
				+ "                       CASE " + "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       )  " + "                GROUP BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         REPORT_CLUB_CLS " + "                ORDER BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         REPORT_CLUB_CLS " + "               ) " + "        UNION ALL "
				+ "        SELECT REGN, " + "               DEPOT_CODE, " + "               DEPOT_NAME, "
				+ "               REPORT_CLUB_CLS, " + "               CASE "
				+ "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REGN, "
				+ "                       DEPOT_CODE, " + "                       DEPOT_NAME, "
				+ "                       REPORT_CLUB_CLS,  "
				+ "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       ) " + "               )  " + "        GROUP BY REGN, "
				+ "                 DEPOT_CODE, " + "                 DEPOT_NAME, "
				+ "                 REPORT_CLUB_CLS " + "        ORDER BY REGN, " + "                 DEPOT_CODE, "
				+ "                 DEPOT_NAME, " + "                 REPORT_CLUB_CLS " + "       ) "
				+ "GROUP BY REGN, " + "         DEPOT_CODE, " + "         DEPOT_NAME, " + "         REPORT_CLUB_CLS "
				+ "ORDER BY REGN, " + "         DEPOT_CODE, " + "         DEPOT_NAME, " + "         REPORT_CLUB_CLS ";

		List<MISReport> dmldepoout = jdbcTemplate.query(sql12, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldepoout = new ArrayList<MISReport>();
//					CallableStatement cStmt12;
//					try {
//						cStmt12 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_DEPO_OUTFLOW(?,?,?,?)}");
//						cStmt12.setString(1,  ml_group );
//						cStmt12.setString(2,  from_date1 );
//						cStmt12.setString(3,  to_date1 );
//						cStmt12.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt12.executeQuery();
//						ResultSet rs12 = (ResultSet) cStmt12.getObject(4);
//						while (rs12.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs12.getString("REGN"));
//							repo.setDepot_code(rs12.getString("DEPOT_CODE"));
//							repo.setDepot(rs12.getString("DEPOT_NAME"));
//							repo.setCust_club(rs12.getString("REPORT_CLUB_CLS"));
//							repo.setTotal_scheme_outflow(rs12.getDouble("ADJUST_RW"));
//							System.out.println("REGN "+rs12.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs12.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs12.getString("DEPOT_NAME"));
//							System.out.println("REPORT_CLUB_CLS "+rs12.getString("REPORT_CLUB_CLS"));
//							System.out.println("ADJUST_RW "+rs12.getDouble("ADJUST_RW"));
//									   
//							dmldepoout.add(repo);
//						}
//								
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("depo outflow");
		List<MISReport> dist_Regn_depo_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmldepoly.size(); i++) {
			MISReport Regn_depo_Cust_club = new MISReport();
			Regn_depo_Cust_club.setRegn(dmldepoly.get(i).getRegn());
			Regn_depo_Cust_club.setDepot_code(dmldepoly.get(i).getDepot_code());
			Regn_depo_Cust_club.setDepot(dmldepoly.get(i).getDepot());
			Regn_depo_Cust_club.setCust_club(dmldepoly.get(i).getCust_club());
			dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
		}

		for (int i = 0; i < dmldepoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoty.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoty.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoty.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoty.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoty.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		for (int i = 0; i < dmldepoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoout.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoout.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoout.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoout.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoout.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		List<MISReport> dmldepooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_club.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_club.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_club.get(k).getDepot());
			repo.setCust_club(dist_Regn_depo_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmldepoly.size(); i++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldepoly.get(i).getLy_vol());
					repo.setLy_val(dmldepoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldepoty.size(); j++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldepoty.get(j).getTy_vol());
					repo.setTy_val(dmldepoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldepoty.get(j).getTotal_scheme_outflow());

				}
			}
			for (int l = 0; l < dmldepoout.size(); l++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldepoout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldepooutflow.add(repo);
		}

		// Customer outflow details
		System.out.println("call BPIL_ML_DLR_AC_NO_LY_OUTFLOW");

		String sql13 = "SELECT ML_DLR_AC_NO_LY.REGN, " + "       ML_DLR_AC_NO_LY.DEPOT_CODE, "
				+ "       ML_DLR_AC_NO_LY.DEPOT_NAME, " + "       ML_DLR_AC_NO_LY.DLR_AC_NO, "
				+ "       ML_DLR_AC_NO_LY.DLR_AC_NAME, " + "       ML_DLR_AC_NO_LY.DLR_CAT, "
				+ "       ML_DLR_AC_NO_LY.LY_VOL, " + "       ML_DLR_AC_NO_LY.LY_VAL "
//								 + "     --,BPIL_ML_DLR_AC_NO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_DLR_AC_NO_LY.REGN, ML_DLR_AC_NO_LY.DEPOT_CODE, ML_DLR_AC_NO_LY.DLR_AC_NO, ML_DLR_AC_NO_LY.DLR_CAT) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REGN,   " + "               ML_LY.DEPOT_CODE, "
				+ "               ML_LY.DEPOT_NAME, " + "               ML_LY.DLR_AC_NO, "
				+ "               ML_LY.DLR_AC_NAME, " + "               ML_LY.DLR_CAT, "
				+ "               NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL,  "
				+ "               NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								 + "             --INTO REGN, DEPOT_CODE, DEPOT_NAME, DLR_AC_NO, DLR_AC_NAME, DLR_CAT, LY_VOL, LY_VAL " 
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME, " + "                        BDM.DLR_AC_NO, "
				+ "                        BDM.DLR_AC_NAME, " + "                        BDM.DLR_CAT "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DEPOT_MASTER DPM " + "                        ,BPIL_TRX_MASTER TRX  "
				+ "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_LY "
				+ "        GROUP by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.DLR_AC_NO, "
				+ "                 ML_LY.DLR_AC_NAME, " + "                 ML_LY.DLR_CAT "
				+ "        ORDER by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.DLR_AC_NO, "
				+ "                 ML_LY.DLR_AC_NAME, " + "                 ML_LY.DLR_CAT "
				+ "       ) ML_DLR_AC_NO_LY ";

		List<MISReport> dmldlracnoly = jdbcTemplate.query(sql13, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_code(rs.getString("DLR_AC_NO"));
				repo.setCust_name(rs.getString("DLR_AC_NAME"));
				repo.setCust_club(rs.getString("DLR_CAT"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs.getString("DLR_CAT"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmldlracnoly = new ArrayList<MISReport>();
//					CallableStatement cStmt13;
//					try {
//						cStmt13 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_DLR_AC_NO_LY_OUTFLOW(?,?,?,?)}");
//						cStmt13.setString(1,  ml_group);
//						cStmt13.setString(2,  from_date1);
//						cStmt13.setString(3,  to_date1);
//						cStmt13.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt13.executeQuery();
//						ResultSet rs13 = (ResultSet) cStmt13.getObject(4);
//						while (rs13.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs13.getString("REGN"));
//							repo.setDepot_code(rs13.getString("DEPOT_CODE"));
//							repo.setDepot(rs13.getString("DEPOT_NAME"));
//							repo.setCust_code(rs13.getString("DLR_AC_NO"));
//							repo.setCust_name(rs13.getString("DLR_AC_NAME"));
//							repo.setCust_club(rs13.getString("DLR_CAT"));
//							repo.setLy_vol(rs13.getDouble("LY_VOL"));
//							repo.setLy_val(rs13.getDouble("LY_VAL"));
//							System.out.println("REGN "+rs13.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs13.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs13.getString("DEPOT_NAME"));
//							System.out.println("DLR_AC_NO "+rs13.getString("DLR_AC_NO"));
//							System.out.println("DLR_AC_NAME "+rs13.getString("DLR_AC_NAME"));
//							System.out.println("DLR_CAT "+rs13.getString("DLR_CAT"));
//							System.out.println("LY_VOL "+rs13.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs13.getDouble("LY_VAL"));
//							
//							   
//							dmldlracnoly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_DLR_AC_NO_TY_OUTFLOW");

		String sql14 = "SELECT ML_DLR_AC_NO_TY.REGN, " + "       ML_DLR_AC_NO_TY.DEPOT_CODE, "
				+ "       ML_DLR_AC_NO_TY.DEPOT_NAME, " + "       ML_DLR_AC_NO_TY.DLR_AC_NO, "
				+ "       ML_DLR_AC_NO_TY.DLR_AC_NAME, " + "       ML_DLR_AC_NO_TY.DLR_CAT, "
				+ "       ML_DLR_AC_NO_TY.TY_VOL, " + "       ML_DLR_AC_NO_TY.TY_VAL "
//								 + "     --,BPIL_ML_DLR_AC_NO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_DLR_AC_NO_TY.REGN, ML_DLR_AC_NO_TY.DEPOT_CODE, ML_DLR_AC_NO_TY.DLR_AC_NO, ML_DLR_AC_NO_TY.DLR_CAT) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REGN,    " + "               ML_TY.DEPOT_CODE, "
				+ "               ML_TY.DEPOT_NAME, " + "               ML_TY.DLR_AC_NO, "
				+ "               ML_TY.DLR_AC_NAME, " + "               ML_TY.DLR_CAT, "
				+ "               NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL,  "
				+ "               NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								 + "             --INTO REGN, DEPOT_CODE, DEPOT_NAME, DLR_AC_NO, DLR_AC_NAME, DLR_CAT, TY_VOL, TY_VAL " 
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME, " + "                        BDM.DLR_AC_NO, "
				+ "                        BDM.DLR_AC_NAME, " + "                        BDM.DLR_CAT "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DEPOT_MASTER DPM " + "                        ,BPIL_TRX_MASTER TRX  "
				+ "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "                        )  "
				+ "                AND   BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_TY "
				+ "        GROUP by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.DLR_AC_NO, "
				+ "                 ML_TY.DLR_AC_NAME, " + "                 ML_TY.DLR_CAT "
				+ "        ORDER by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.DLR_AC_NO, "
				+ "                 ML_TY.DLR_AC_NAME, " + "                 ML_TY.DLR_CAT "
				+ "       ) ML_DLR_AC_NO_TY ";

		List<MISReport> dmldlracnoty = jdbcTemplate.query(sql14, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_code(rs.getString("DLR_AC_NO"));
				repo.setCust_name(rs.getString("DLR_AC_NAME"));
				repo.setCust_club(rs.getString("DLR_CAT"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs.getString("DLR_CAT"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldlracnoty = new ArrayList<MISReport>();
//					CallableStatement cStmt14;
//					try {
//						cStmt14 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_DLR_AC_NO_TY_OUTFLOW(?,?,?,?)}");
//						cStmt14.setString(1,  ml_group);
//						cStmt14.setString(2,  from_date1);
//						cStmt14.setString(3,  to_date1);
//						cStmt14.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt14.executeQuery();
//						ResultSet rs14 = (ResultSet) cStmt14.getObject(4);
//						while (rs14.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs14.getString("REGN"));
//							repo.setDepot_code(rs14.getString("DEPOT_CODE"));
//							repo.setDepot(rs14.getString("DEPOT_NAME"));
//							repo.setCust_code(rs14.getString("DLR_AC_NO"));
//							repo.setCust_name(rs14.getString("DLR_AC_NAME"));
//							repo.setCust_club(rs14.getString("DLR_CAT"));
//							repo.setTy_vol(rs14.getDouble("TY_VOL"));
//							repo.setTy_val(rs14.getDouble("TY_VAL"));
////							repo.setTotal_scheme_outflow(rs14.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REGN "+rs14.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs14.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs14.getString("DEPOT_NAME"));
//							System.out.println("DLR_AC_NO "+rs14.getString("DLR_AC_NO"));
//							System.out.println("DLR_AC_NAME "+rs14.getString("DLR_AC_NAME"));
//							System.out.println("DLR_CAT "+rs14.getString("DLR_CAT"));
//							System.out.println("TY_VOL "+rs14.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs14.getDouble("TY_VAL"));
////							System.out.println("TOT_ADJUST_RW "+rs14.getDouble("TOT_ADJUST_RW"));
//							   
//							dmldlracnoty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_DLR_AC_NO_OUTFLOW");

		String sql15 = "SELECT REGN, " + "       DEPOT_CODE, " + "       DEPOT_NAME, " + "       DLR_AC_NO, "
				+ "       DLR_AC_NAME, " + "       DLR_CAT, " + "       SUM (TOTAL_AMOUNT) ADJUST_RW "
				+ "FROM   (SELECT REGN, " + "               DEPOT_CODE, " + "               DEPOT_NAME, "
				+ "               DLR_AC_NO, " + "               DLR_AC_NAME, " + "               DLR_CAT, "
				+ "               TOTAL_AMOUNT " + "        FROM   (SELECT REGN, "
				+ "                       DEPOT_CODE, " + "                       DEPOT_NAME, "
				+ "                       DLR_AC_NO, " + "                       DLR_AC_NAME, "
				+ "                       DLR_CAT, " + "                       CASE "
				+ "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//								 + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//								 + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//                               + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                               + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//                               + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//                               + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                               + "                      --AND    DPM.REGN = P_REGN "
//                               + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       ) " + "                GROUP BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         DLR_AC_NO, " + "                         DLR_AC_NAME, "
				+ "                         DLR_CAT " + "                ORDER BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         DLR_AC_NO, " + "                         DLR_AC_NAME, "
				+ "                         DLR_CAT " + "               ) " + "        UNION ALL "
				+ "        SELECT REGN, " + "               DEPOT_CODE, " + "               DEPOT_NAME, "
				+ "               DLR_AC_NO, " + "               DLR_AC_NAME, " + "               DLR_CAT, "
				+ "               CASE " + "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REGN, "
				+ "                       DEPOT_CODE, " + "                       DEPOT_NAME, "
				+ "                       DLR_AC_NO, " + "                       DLR_AC_NAME, "
				+ "                       DLR_CAT, " + "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//                               + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                               + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//                               + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//                               + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                               + "                      --AND    DPM.REGN = P_REGN "
//                               + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT, "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//                               + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                               + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//                               + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//                               + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                               + "                      --AND    DPM.REGN = P_REGN "
//                               + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       ) " + "               ) " + "        GROUP BY REGN, "
				+ "                 DEPOT_CODE, " + "                 DEPOT_NAME, " + "                 DLR_AC_NO, "
				+ "                 DLR_AC_NAME, " + "                 DLR_CAT " + "        ORDER BY REGN, "
				+ "                 DEPOT_CODE, " + "                 DEPOT_NAME, " + "                 DLR_AC_NO, "
				+ "                 DLR_AC_NAME, " + "                 DLR_CAT " + "       ) " + "GROUP BY REGN, "
				+ "         DEPOT_CODE, " + "         DEPOT_NAME, " + "         DLR_AC_NO, " + "         DLR_AC_NAME, "
				+ "         DLR_CAT " + "ORDER BY REGN, " + "         DEPOT_CODE, " + "         DEPOT_NAME, "
				+ "         DLR_AC_NO, " + "         DLR_AC_NAME, " + "         DLR_CAT ";

		List<MISReport> dmldlracnoout = jdbcTemplate.query(sql15, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_code(rs.getString("DLR_AC_NO"));
				repo.setCust_name(rs.getString("DLR_AC_NAME"));
				repo.setCust_club(rs.getString("DLR_CAT"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs.getString("DLR_CAT"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldlracnoout = new ArrayList<MISReport>();
//					CallableStatement cStmt15;
//					try {
//						cStmt15 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_DLR_AC_NO_OUTFLOW(?,?,?,?)}");
//						cStmt15.setString(1,  ml_group );
//						cStmt15.setString(2,  from_date1 );
//						cStmt15.setString(3,  to_date1 );
//						cStmt15.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt15.executeQuery();
//						ResultSet rs15 = (ResultSet) cStmt15.getObject(4);
//						while (rs15.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs15.getString("REGN"));
//							repo.setDepot_code(rs15.getString("DEPOT_CODE"));
//							repo.setDepot(rs15.getString("DEPOT_NAME"));
//							repo.setCust_code(rs15.getString("DLR_AC_NO"));
//							repo.setCust_name(rs15.getString("DLR_AC_NAME"));
//							repo.setCust_club(rs15.getString("DLR_CAT"));
//							repo.setTotal_scheme_outflow(rs15.getDouble("ADJUST_RW"));
//							System.out.println("REGN "+rs15.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs15.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs15.getString("DEPOT_NAME"));
//							System.out.println("DLR_AC_NO "+rs15.getString("DLR_AC_NO"));
//							System.out.println("DLR_AC_NAME "+rs15.getString("DLR_AC_NAME"));
//							System.out.println("DLR_CAT "+rs15.getString("DLR_CAT"));
//							System.out.println("ADJUST_RW "+rs15.getDouble("ADJUST_RW"));
//							
//							dmldlracnoout.add(repo);
//						}
//								
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("dlr outflow");

		List<MISReport> dist_Regn_depo_Cust_code = new ArrayList<>();
		for (int i = 0; i < dmldlracnoly.size(); i++) {
			MISReport Regn_depo_Cust_code = new MISReport();
			Regn_depo_Cust_code.setRegn(dmldlracnoly.get(i).getRegn());
			Regn_depo_Cust_code.setDepot_code(dmldlracnoly.get(i).getDepot_code());
			Regn_depo_Cust_code.setDepot(dmldlracnoly.get(i).getDepot());
			Regn_depo_Cust_code.setCust_code(dmldlracnoly.get(i).getCust_code());
			Regn_depo_Cust_code.setCust_name(dmldlracnoly.get(i).getCust_name());
			Regn_depo_Cust_code.setCust_club(dmldlracnoly.get(i).getCust_club());
			dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
		}

		for (int i = 0; i < dmldlracnoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoty.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoty.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoty.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoty.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoty.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoty.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoty.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoty.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		for (int i = 0; i < dmldlracnoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoout.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoout.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoout.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoout.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoout.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoout.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoout.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoout.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		List<MISReport> dmldlracnooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_code.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_code.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_code.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_code.get(k).getDepot());
			repo.setCust_code(dist_Regn_depo_Cust_code.get(k).getCust_code());
			repo.setCust_name(dist_Regn_depo_Cust_code.get(k).getCust_name());
			repo.setCust_club(dist_Regn_depo_Cust_code.get(k).getCust_club());
			for (int i = 0; i < dmldlracnoly.size(); i++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoly.get(i).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldlracnoly.get(i).getLy_vol());
					repo.setLy_val(dmldlracnoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldlracnoty.size(); j++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoty.get(j).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldlracnoty.get(j).getTy_vol());
					repo.setTy_val(dmldlracnoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldlracnoty.get(j).getTotal_scheme_outflow());

				}

			}
			for (int l = 0; l < dmldlracnoout.size(); l++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoout.get(l).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldlracnoout.get(l).getTotal_scheme_outflow());

				}

			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldlracnooutflow.add(repo);
		}

		System.out.println("MIS Report");

		model.addAttribute("Info_grid4", dmlmloutflow);
		model.addAttribute("Info_grid3", dmlcustoutflow);
		model.addAttribute("Info_grid2", dmlregnoutflow);
		model.addAttribute("Info_grid1", dmldepooutflow);
		model.addAttribute("Info_grid", dmldlracnooutflow);

		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("datepicker", from_date);
		model.addAttribute("datepicker1", to_date);
		return new ModelAndView("MISReport");
	}

	// download MIS report
	@RequestMapping("/downloadMISReportSP")
	public ModelAndView downloadMISReportSP(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "from_date") String from_date, @RequestParam(value = "to_date") String to_date,
			ModelMap map, Model model, HttpServletRequest request, HttpServletResponse response) {
/*//			    	DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy"); 
//			    	Date fromdate = null, todate = null;
//					try {
//						fromdate = (Date)formatter.parse(from_date);
//						todate = (Date)formatter.parse(to_date);
//			    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//			    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yyyy");
//			    	String from_date1 = newFormat.format(fromdate);
//			    	String to_date1 = newFormat.format(todate);
*/		System.out.println("Start Date: " + from_date + " End Date: " + to_date);
		String from_date1 = from_date;
		String to_date1 = to_date;

		System.out.println("from " + from_date1 + " to " + to_date1);

		// Scheme outflow details
		System.out.println("call BPIL_ML_LY_OUTFLOW");
		List<MISReport> dmlmlly = new ArrayList<MISReport>();
		CallableStatement cStmt1;
		try {
			cStmt1 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_LY_OUTFLOW(?,?,?,?)}");
			cStmt1.setString(1, ml_group);
			cStmt1.setString(2, from_date1);
			cStmt1.setString(3, to_date1);
			cStmt1.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt1.executeQuery();
			ResultSet rs1 = (ResultSet) cStmt1.getObject(4);
			while (rs1.next()) {
				MISReport repo = new MISReport();
				repo.setLy_vol(rs1.getDouble("LY_VOL"));
				repo.setLy_val(rs1.getDouble("LY_VAL"));
				System.out.println("LY_VOL " + rs1.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs1.getDouble("LY_VAL"));

				dmlmlly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_TY_OUTFLOW");
		List<MISReport> dmlmlty = new ArrayList<MISReport>();
		CallableStatement cStmt2;
		try {
			cStmt2 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_TY_OUTFLOW(?,?,?,?)}");
			cStmt2.setString(1, ml_group);
			cStmt2.setString(2, from_date1);
			cStmt2.setString(3, to_date1);
			cStmt2.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt2.executeQuery();
			ResultSet rs2 = (ResultSet) cStmt2.getObject(4);
			while (rs2.next()) {
				MISReport repo = new MISReport();
				repo.setTy_vol(rs2.getDouble("TY_VOL"));
				repo.setTy_val(rs2.getDouble("TY_VAL"));
//						   	repo.setTotal_scheme_outflow(rs2.getDouble("TOT_ADJUST_RW"));
				System.out.println("TY_VOL " + rs2.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs2.getDouble("TY_VAL"));
//						   	System.out.println("TOT_ADJUST_RW "+rs2.getDouble("TOT_ADJUST_RW"));

				dmlmlty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_TOTAL_OUTFLOW");
		List<MISReport> dmlmltotal = new ArrayList<MISReport>();
		CallableStatement cStmt3;
		try {
			cStmt3 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_TOTAL_OUTFLOW(?,?,?,?)}");
			cStmt3.setString(1, ml_group);
			cStmt3.setString(2, from_date1);
			cStmt3.setString(3, to_date1);
			cStmt3.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt3.executeQuery();
			ResultSet rs3 = (ResultSet) cStmt3.getObject(4);
			while (rs3.next()) {
				MISReport repo = new MISReport();
				repo.setTotal_scheme_outflow(rs3.getDouble("TOT_ADJUST_RW"));
				System.out.println("TOT_ADJUST_RW " + rs3.getDouble("TOT_ADJUST_RW"));

				dmlmltotal.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("scheme outflow");
		List<MISReport> dmlmloutflow = new ArrayList<>();
		MISReport dmlobj = new MISReport();
		dmlobj.setLy_vol(dmlmlly.get(0).getLy_vol());
		dmlobj.setLy_val(dmlmlly.get(0).getLy_val());

		dmlobj.setTy_vol(dmlmlty.get(0).getTy_vol());
		dmlobj.setTy_val(dmlmlty.get(0).getTy_val());

		Double volgr = 0.0;
		if (dmlobj.getLy_vol() > 0.0) {
			volgr = ((dmlobj.getTy_vol() - dmlobj.getLy_vol()) / dmlobj.getLy_vol()) * 100;
		} else if (dmlobj.getLy_vol() == 0.0 && dmlobj.getTy_vol() > 0.0) {
			volgr = 100.0;
		}
		Double valgr = 0.0;
		if (dmlobj.getLy_val() > 0.0) {
			valgr = ((dmlobj.getTy_val() - dmlobj.getLy_val()) / dmlobj.getLy_val()) * 100;
		} else if (dmlobj.getLy_val() == 0.0 && dmlobj.getTy_val() > 0.0) {
			volgr = 100.0;
		}
		dmlobj.setVol_gr(Math.round(volgr * 100.0) / 100.0);
		dmlobj.setVal_gr(Math.round(valgr * 100.0) / 100.0);
		dmlobj.setTotal_scheme_outflow(dmlmltotal.get(0).getTotal_scheme_outflow());

		dmlmloutflow.add(dmlobj);

		// Club outflow details
		System.out.println("call BPIL_ML_CUST_CLUB_LY_OUTFLOW");
		List<MISReport> dmlcustly = new ArrayList<MISReport>();
		CallableStatement cStmt4;
		try {
			cStmt4 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_CUST_CLUB_LY_OUTFLOW(?,?,?,?)}");
			cStmt4.setString(1, ml_group);
			cStmt4.setString(2, from_date1);
			cStmt4.setString(3, to_date1);
			cStmt4.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt4.executeQuery();
			ResultSet rs4 = (ResultSet) cStmt4.getObject(4);
			while (rs4.next()) {
				MISReport repo = new MISReport();
				repo.setCust_club(rs4.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs4.getDouble("LY_VOL"));
				repo.setLy_val(rs4.getDouble("LY_VAL"));
				System.out.println("REPORT_CLUB_CLS " + rs4.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs4.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs4.getDouble("LY_VAL"));

				dmlcustly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_CUST_CLUB_TY_OUTFLOW");
		List<MISReport> dmlcustty = new ArrayList<MISReport>();
		CallableStatement cStmt5;
		try {
			cStmt5 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_CUST_CLUB_TY_OUTFLOW(?,?,?,?)}");
			cStmt5.setString(1, ml_group);
			cStmt5.setString(2, from_date1);
			cStmt5.setString(3, to_date1);
			cStmt5.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt5.executeQuery();
			ResultSet rs5 = (ResultSet) cStmt5.getObject(4);
			while (rs5.next()) {
				MISReport repo = new MISReport();
				repo.setCust_club(rs5.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs5.getDouble("TY_VOL"));
				repo.setTy_val(rs5.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs5.getDouble("TOT_ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs5.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs5.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs5.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs5.getDouble("TOT_ADJUST_RW"));

				dmlcustty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_CUST_CLUB_OUTFLOW");
		List<MISReport> dmlcustout = new ArrayList<MISReport>();
		CallableStatement cStmt6;
		try {
			cStmt6 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_CUST_CLUB_OUTFLOW(?,?,?,?)}");
			cStmt6.setString(1, ml_group);
			cStmt6.setString(2, from_date1);
			cStmt6.setString(3, to_date1);
			cStmt6.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt6.executeQuery();
			ResultSet rs6 = (ResultSet) cStmt6.getObject(4);
			while (rs6.next()) {
				MISReport repo = new MISReport();
				repo.setCust_club(rs6.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs6.getDouble("ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs6.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs6.getDouble("ADJUST_RW"));

				dmlcustout.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("cust club outflow");

		List<MISReport> dist_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlcustly.size(); i++) {
			MISReport Cust_club = new MISReport();
			Cust_club.setCust_club(dmlcustly.get(i).getCust_club());
			dist_Cust_club.add(Cust_club);
		}

		for (int i = 0; i < dmlcustty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustty.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustty.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		for (int i = 0; i < dmlcustout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustout.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustout.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		List<MISReport> dmlcustoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setCust_club(dist_Cust_club.get(k).getCust_club());

			for (int i = 0; i < dmlcustly.size(); i++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustly.get(i).getCust_club())) {
					repo.setLy_vol(dmlcustly.get(i).getLy_vol());
					repo.setLy_val(dmlcustly.get(i).getLy_val());
				}
			}

			for (int j = 0; j < dmlcustty.size(); j++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustty.get(j).getCust_club())) {
					repo.setTy_vol(dmlcustty.get(j).getTy_vol());
					repo.setTy_val(dmlcustty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlcustty.get(j).getTotal_scheme_outflow());
				}
			}

			for (int l = 0; l < dmlcustout.size(); l++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustout.get(l).getCust_club())) {
					repo.setTotal_scheme_outflow(dmlcustout.get(l).getTotal_scheme_outflow());
				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlcustoutflow.add(repo);

		}

		// Region outflow details
		System.out.println("call BPIL_ML_REGN_LY_OUTFLOW");
		List<MISReport> dmlregnly = new ArrayList<MISReport>();
		CallableStatement cStmt7;
		try {
			cStmt7 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_LY_OUTFLOW(?,?,?,?)}");
			cStmt7.setString(1, ml_group);
			cStmt7.setString(2, from_date1);
			cStmt7.setString(3, to_date1);
			cStmt7.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt7.executeQuery();
			ResultSet rs7 = (ResultSet) cStmt7.getObject(4);
			while (rs7.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs7.getString("REGN"));
				repo.setCust_club(rs7.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs7.getDouble("LY_VOL"));
				repo.setLy_val(rs7.getDouble("LY_VAL"));
				System.out.println("REGN " + rs7.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs7.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs7.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs7.getDouble("LY_VAL"));

				dmlregnly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_TY_OUTFLOW");
		List<MISReport> dmlregnty = new ArrayList<MISReport>();
		CallableStatement cStmt8;
		try {
			cStmt8 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_TY_OUTFLOW(?,?,?,?)}");
			cStmt8.setString(1, ml_group);
			cStmt8.setString(2, from_date1);
			cStmt8.setString(3, to_date1);
			cStmt8.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt8.executeQuery();
			ResultSet rs8 = (ResultSet) cStmt8.getObject(4);
			while (rs8.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs8.getString("REGN"));
				repo.setCust_club(rs8.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs8.getDouble("TY_VOL"));
				repo.setTy_val(rs8.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs8.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs8.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs8.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs8.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs8.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs8.getDouble("TOT_ADJUST_RW"));

				dmlregnty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_OUTFLOW");
		List<MISReport> dmlregnout = new ArrayList<MISReport>();
		CallableStatement cStmt9;
		try {
			cStmt9 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_OUTFLOW(?,?,?,?)}");
			cStmt9.setString(1, ml_group);
			cStmt9.setString(2, from_date1);
			cStmt9.setString(3, to_date1);
			cStmt9.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt9.executeQuery();
			ResultSet rs9 = (ResultSet) cStmt9.getObject(4);
			while (rs9.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs9.getString("REGN"));
				repo.setCust_club(rs9.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs9.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs9.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs9.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs9.getDouble("ADJUST_RW"));

				dmlregnout.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("regn outflow");
		List<MISReport> dist_Regn_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlregnly.size(); i++) {
			MISReport Regn_Cust_club = new MISReport();
			Regn_Cust_club.setRegn(dmlregnly.get(i).getRegn());
			Regn_Cust_club.setCust_club(dmlregnly.get(i).getCust_club());
			dist_Regn_Cust_club.add(Regn_Cust_club);
		}

		for (int i = 0; i < dmlregnty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnty.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnty.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnty.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnty.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		for (int i = 0; i < dmlregnout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnout.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnout.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnout.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnout.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		List<MISReport> dmlregnoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_Cust_club.get(k).getRegn());
			repo.setCust_club(dist_Regn_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmlregnly.size(); i++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnly.get(i).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnly.get(i).getCust_club())) {
					repo.setLy_vol(dmlregnly.get(i).getLy_vol());
					repo.setLy_val(dmlregnly.get(i).getLy_val());
				}

			}

			for (int j = 0; j < dmlregnty.size(); j++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnty.get(j).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnty.get(j).getCust_club())) {

					repo.setTy_vol(dmlregnty.get(j).getTy_vol());
					repo.setTy_val(dmlregnty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlregnty.get(j).getTotal_scheme_outflow());

				}
			}

			for (int l = 0; l < dmlregnout.size(); l++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnout.get(l).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmlregnout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlregnoutflow.add(repo);

		}

		// Depot outflow details

		System.out.println("call BPIL_ML_REGN_DEPO_LY_OUTFLOW");
		List<MISReport> dmldepoly = new ArrayList<MISReport>();
		CallableStatement cStmt10;
		try {
			cStmt10 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_DEPO_LY_OUTFLOW(?,?,?,?)}");
			cStmt10.setString(1, ml_group);
			cStmt10.setString(2, from_date1);
			cStmt10.setString(3, to_date1);
			cStmt10.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt10.executeQuery();
			ResultSet rs10 = (ResultSet) cStmt10.getObject(4);
			while (rs10.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs10.getString("REGN"));
				repo.setDepot_code(rs10.getString("DEPOT_CODE"));
				repo.setDepot(rs10.getString("DEPOT_NAME"));
				repo.setCust_club(rs10.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs10.getDouble("LY_VOL"));
				repo.setLy_val(rs10.getDouble("LY_VAL"));
				System.out.println("REGN " + rs10.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs10.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs10.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs10.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs10.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs10.getDouble("LY_VAL"));

				dmldepoly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_DEPO_TY_OUTFLOW");
		List<MISReport> dmldepoty = new ArrayList<MISReport>();
		CallableStatement cStmt11;
		try {
			cStmt11 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_DEPO_TY_OUTFLOW(?,?,?,?)}");
			cStmt11.setString(1, ml_group);
			cStmt11.setString(2, from_date1);
			cStmt11.setString(3, to_date1);
			cStmt11.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt11.executeQuery();
			ResultSet rs11 = (ResultSet) cStmt11.getObject(4);
			while (rs11.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs11.getString("REGN"));
				repo.setDepot_code(rs11.getString("DEPOT_CODE"));
				repo.setDepot(rs11.getString("DEPOT_NAME"));
				repo.setCust_club(rs11.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs11.getDouble("TY_VOL"));
				repo.setTy_val(rs11.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs11.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs11.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs11.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs11.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs11.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs11.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs11.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs11.getDouble("TOT_ADJUST_RW"));

				dmldepoty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_REGN_DEPO_OUTFLOW");
		List<MISReport> dmldepoout = new ArrayList<MISReport>();
		CallableStatement cStmt12;
		try {
			cStmt12 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_REGN_DEPO_OUTFLOW(?,?,?,?)}");
			cStmt12.setString(1, ml_group);
			cStmt12.setString(2, from_date1);
			cStmt12.setString(3, to_date1);
			cStmt12.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt12.executeQuery();
			ResultSet rs12 = (ResultSet) cStmt12.getObject(4);
			while (rs12.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs12.getString("REGN"));
				repo.setDepot_code(rs12.getString("DEPOT_CODE"));
				repo.setDepot(rs12.getString("DEPOT_NAME"));
				repo.setCust_club(rs12.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs12.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs12.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs12.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs12.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs12.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs12.getDouble("ADJUST_RW"));

				dmldepoout.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("depo outflow");
		List<MISReport> dist_Regn_depo_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmldepoly.size(); i++) {
			MISReport Regn_depo_Cust_club = new MISReport();
			Regn_depo_Cust_club.setRegn(dmldepoly.get(i).getRegn());
			Regn_depo_Cust_club.setDepot_code(dmldepoly.get(i).getDepot_code());
			Regn_depo_Cust_club.setDepot(dmldepoly.get(i).getDepot());
			Regn_depo_Cust_club.setCust_club(dmldepoly.get(i).getCust_club());
			dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
		}

		for (int i = 0; i < dmldepoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoty.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoty.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoty.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoty.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoty.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		for (int i = 0; i < dmldepoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoout.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoout.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoout.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoout.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoout.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		List<MISReport> dmldepooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_club.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_club.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_club.get(k).getDepot());
			repo.setCust_club(dist_Regn_depo_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmldepoly.size(); i++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldepoly.get(i).getLy_vol());
					repo.setLy_val(dmldepoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldepoty.size(); j++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldepoty.get(j).getTy_vol());
					repo.setTy_val(dmldepoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldepoty.get(j).getTotal_scheme_outflow());

				}
			}
			for (int l = 0; l < dmldepoout.size(); l++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldepoout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldepooutflow.add(repo);
		}

		// Customer outflow details
		System.out.println("call BPIL_ML_DLR_AC_NO_LY_OUTFLOW");
		List<MISReport> dmldlracnoly = new ArrayList<MISReport>();
		CallableStatement cStmt13;
		try {
			cStmt13 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_DLR_AC_NO_LY_OUTFLOW(?,?,?,?)}");
			cStmt13.setString(1, ml_group);
			cStmt13.setString(2, from_date1);
			cStmt13.setString(3, to_date1);
			cStmt13.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt13.executeQuery();
			ResultSet rs13 = (ResultSet) cStmt13.getObject(4);
			while (rs13.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs13.getString("REGN"));
				repo.setDepot_code(rs13.getString("DEPOT_CODE"));
				repo.setDepot(rs13.getString("DEPOT_NAME"));
				repo.setCust_code(rs13.getString("DLR_AC_NO"));
				repo.setCust_name(rs13.getString("DLR_AC_NAME"));
				repo.setCust_club(rs13.getString("DLR_CAT"));
				repo.setLy_vol(rs13.getDouble("LY_VOL"));
				repo.setLy_val(rs13.getDouble("LY_VAL"));
				System.out.println("REGN " + rs13.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs13.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs13.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs13.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs13.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs13.getString("DLR_CAT"));
				System.out.println("LY_VOL " + rs13.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs13.getDouble("LY_VAL"));

				dmldlracnoly.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_DLR_AC_NO_TY_OUTFLOW");
		List<MISReport> dmldlracnoty = new ArrayList<MISReport>();
		CallableStatement cStmt14;
		try {
			cStmt14 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_DLR_AC_NO_TY_OUTFLOW(?,?,?,?)}");
			cStmt14.setString(1, ml_group);
			cStmt14.setString(2, from_date1);
			cStmt14.setString(3, to_date1);
			cStmt14.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt14.executeQuery();
			ResultSet rs14 = (ResultSet) cStmt14.getObject(4);
			while (rs14.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs14.getString("REGN"));
				repo.setDepot_code(rs14.getString("DEPOT_CODE"));
				repo.setDepot(rs14.getString("DEPOT_NAME"));
				repo.setCust_code(rs14.getString("DLR_AC_NO"));
				repo.setCust_name(rs14.getString("DLR_AC_NAME"));
				repo.setCust_club(rs14.getString("DLR_CAT"));
				repo.setTy_vol(rs14.getDouble("TY_VOL"));
				repo.setTy_val(rs14.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs14.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs14.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs14.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs14.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs14.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs14.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs14.getString("DLR_CAT"));
				System.out.println("TY_VOL " + rs14.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs14.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs14.getDouble("TOT_ADJUST_RW"));

				dmldlracnoty.add(repo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("call BPIL_ML_DLR_AC_NO_OUTFLOW");
		List<MISReport> dmldlracnoout = new ArrayList<MISReport>();
		CallableStatement cStmt15;
		try {
			cStmt15 = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_ML_DLR_AC_NO_OUTFLOW(?,?,?,?)}");
			cStmt15.setString(1, ml_group);
			cStmt15.setString(2, from_date1);
			cStmt15.setString(3, to_date1);
			cStmt15.registerOutParameter(4, OracleTypes.CURSOR);
			ResultSet result = cStmt15.executeQuery();
			ResultSet rs15 = (ResultSet) cStmt15.getObject(4);
			while (rs15.next()) {
				MISReport repo = new MISReport();
				repo.setRegn(rs15.getString("REGN"));
				repo.setDepot_code(rs15.getString("DEPOT_CODE"));
				repo.setDepot(rs15.getString("DEPOT_NAME"));
				repo.setCust_code(rs15.getString("DLR_AC_NO"));
				repo.setCust_name(rs15.getString("DLR_AC_NAME"));
				repo.setCust_club(rs15.getString("DLR_CAT"));
				repo.setTotal_scheme_outflow(rs15.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs15.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs15.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs15.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs15.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs15.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs15.getString("DLR_CAT"));
				System.out.println("ADJUST_RW " + rs15.getDouble("ADJUST_RW"));

				dmldlracnoout.add(repo);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("dlr outflow");

		List<MISReport> dist_Regn_depo_Cust_code = new ArrayList<>();
		for (int i = 0; i < dmldlracnoly.size(); i++) {
			MISReport Regn_depo_Cust_code = new MISReport();
			Regn_depo_Cust_code.setRegn(dmldlracnoly.get(i).getRegn());
			Regn_depo_Cust_code.setDepot_code(dmldlracnoly.get(i).getDepot_code());
			Regn_depo_Cust_code.setDepot(dmldlracnoly.get(i).getDepot());
			Regn_depo_Cust_code.setCust_code(dmldlracnoly.get(i).getCust_code());
			Regn_depo_Cust_code.setCust_name(dmldlracnoly.get(i).getCust_name());
			Regn_depo_Cust_code.setCust_club(dmldlracnoly.get(i).getCust_club());
			dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
		}

		for (int i = 0; i < dmldlracnoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoty.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoty.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoty.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoty.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoty.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoty.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoty.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoty.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		for (int i = 0; i < dmldlracnoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoout.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoout.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoout.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoout.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoout.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoout.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoout.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoout.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		List<MISReport> dmldlracnooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_code.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_code.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_code.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_code.get(k).getDepot());
			repo.setCust_code(dist_Regn_depo_Cust_code.get(k).getCust_code());
			repo.setCust_name(dist_Regn_depo_Cust_code.get(k).getCust_name());
			repo.setCust_club(dist_Regn_depo_Cust_code.get(k).getCust_club());
			for (int i = 0; i < dmldlracnoly.size(); i++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoly.get(i).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldlracnoly.get(i).getLy_vol());
					repo.setLy_val(dmldlracnoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldlracnoty.size(); j++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoty.get(j).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldlracnoty.get(j).getTy_vol());
					repo.setTy_val(dmldlracnoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldlracnoty.get(j).getTotal_scheme_outflow());

				}

			}
			for (int l = 0; l < dmldlracnoout.size(); l++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoout.get(l).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldlracnoout.get(l).getTotal_scheme_outflow());

				}

			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldlracnooutflow.add(repo);
		}

		System.out.println("MIS Report");

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("MIS Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		// Scheme Outflow details
		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("TY Vol");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 2500);

		cell = row.createCell(2);
		cell.setCellValue("Vol GR%");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 6000);

		cell = row.createCell(3);
		cell.setCellValue("LY Val");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 7000);

		cell = row.createCell(4);
		cell.setCellValue("TY Val");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 4000);

		cell = row.createCell(5);
		cell.setCellValue("Val GR%");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 6000);

		cell = row.createCell(6);
		cell.setCellValue("Total Scheme Outflow");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 2000);

		int j = 1;

		Iterator<MISReport> itr = dmlmloutflow.iterator();
		while (itr.hasNext()) {
			MISReport ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getLy_vol());

			cell = row.createCell(1);
			cell.setCellValue(ex.getTy_vol());

			cell = row.createCell(2);
			cell.setCellValue(ex.getVol_gr());

			cell = row.createCell(3);
			cell.setCellValue(ex.getLy_val());

			cell = row.createCell(4);
			cell.setCellValue(ex.getTy_val());

			cell = row.createCell(5);
			cell.setCellValue(ex.getVal_gr());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTotal_scheme_outflow());

			j++;
		}

		// Club Outflow details
		XSSFRow row1 = spreadsheet.createRow(j + 2);
		XSSFCell cell1;

		cell1 = row1.createCell(0);
		cell1.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell1 = row1.createCell(1);
		cell1.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell1 = row1.createCell(2);
		cell1.setCellValue("TY Vol");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 2500);

		cell1 = row1.createCell(3);
		cell1.setCellValue("Vol GR%");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 6000);

		cell1 = row1.createCell(4);
		cell1.setCellValue("LY Val");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 7000);

		cell1 = row1.createCell(5);
		cell1.setCellValue("TY Val");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 4000);

		cell1 = row1.createCell(6);
		cell1.setCellValue("Val GR%");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell1 = row1.createCell(7);
		cell1.setCellValue("Total Scheme Outflow");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 2000);

		int j1 = j + 3;

		Iterator<MISReport> itr1 = dmlcustoutflow.iterator();
		while (itr1.hasNext()) {
			MISReport ex = itr1.next();

			row1 = spreadsheet.createRow(j1);

			cell1 = row1.createCell(0);
			cell1.setCellValue(ex.getCust_club());

			cell1 = row1.createCell(1);
			cell1.setCellValue(ex.getLy_vol());

			cell1 = row1.createCell(2);
			cell1.setCellValue(ex.getTy_vol());

			cell1 = row1.createCell(3);
			cell1.setCellValue(ex.getVol_gr());

			cell1 = row1.createCell(4);
			cell1.setCellValue(ex.getLy_val());

			cell1 = row1.createCell(5);
			cell1.setCellValue(ex.getTy_val());

			cell1 = row1.createCell(6);
			cell1.setCellValue(ex.getVal_gr());

			cell1 = row1.createCell(7);
			cell1.setCellValue(ex.getTotal_scheme_outflow());

			j1++;
		}

		// Regn Outflow details
		XSSFRow row2 = spreadsheet.createRow(j1 + 2);
		XSSFCell cell2;

		cell2 = row2.createCell(0);
		cell2.setCellValue("Regn");
		cellstyle.setLocked(true);
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell2 = row2.createCell(1);
		cell2.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell2 = row2.createCell(2);
		cell2.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 3200);

		cell2 = row2.createCell(3);
		cell2.setCellValue("TY Vol");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2500);

		cell2 = row2.createCell(4);
		cell2.setCellValue("Vol GR%");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell2 = row2.createCell(5);
		cell2.setCellValue("LY Val");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 7000);

		cell2 = row2.createCell(6);
		cell2.setCellValue("TY Val");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 4000);

		cell2 = row2.createCell(7);
		cell2.setCellValue("Val GR%");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 6000);

		cell2 = row2.createCell(8);
		cell2.setCellValue("Total Scheme Outflow");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 2000);

		int j2 = j1 + 3;

		Iterator<MISReport> itr2 = dmlregnoutflow.iterator();
		while (itr2.hasNext()) {
			MISReport ex = itr2.next();

			row2 = spreadsheet.createRow(j2);

			cell2 = row2.createCell(0);
			cell2.setCellValue(ex.getRegn());

			cell2 = row2.createCell(1);
			cell2.setCellValue(ex.getCust_club());

			cell2 = row2.createCell(2);
			cell2.setCellValue(ex.getLy_vol());

			cell2 = row2.createCell(3);
			cell2.setCellValue(ex.getTy_vol());

			cell2 = row2.createCell(4);
			cell2.setCellValue(ex.getVol_gr());

			cell2 = row2.createCell(5);
			cell2.setCellValue(ex.getLy_val());

			cell2 = row2.createCell(6);
			cell2.setCellValue(ex.getTy_val());

			cell2 = row2.createCell(7);
			cell2.setCellValue(ex.getVal_gr());

			cell2 = row2.createCell(8);
			cell2.setCellValue(ex.getTotal_scheme_outflow());

			j2++;
		}

		// Depot Outflow details
		XSSFRow row3 = spreadsheet.createRow(j2 + 2);
		XSSFCell cell3;

		cell3 = row3.createCell(0);
		cell3.setCellValue("Regn");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell3 = row3.createCell(1);
		cell3.setCellValue("Depot");
		cellstyle.setLocked(true);
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell3 = row3.createCell(2);
		cell3.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 3200);

		cell3 = row3.createCell(3);
		cell3.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 3200);

		cell3 = row3.createCell(4);
		cell3.setCellValue("TY Vol");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 2500);

		cell3 = row3.createCell(5);
		cell3.setCellValue("Vol GR%");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 6000);

		cell3 = row3.createCell(6);
		cell3.setCellValue("LY Val");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 7000);

		cell3 = row3.createCell(7);
		cell3.setCellValue("TY Val");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 4000);

		cell3 = row3.createCell(8);
		cell3.setCellValue("Val GR%");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 6000);

		cell3 = row3.createCell(9);
		cell3.setCellValue("Total Scheme Outflow");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 2000);

		int j3 = j2 + 3;

		Iterator<MISReport> itr3 = dmldepooutflow.iterator();
		while (itr3.hasNext()) {
			MISReport ex = itr3.next();

			row3 = spreadsheet.createRow(j3);

			cell3 = row3.createCell(0);
			cell3.setCellValue(ex.getRegn());

			cell3 = row3.createCell(1);
			cell3.setCellValue(ex.getDepot());

			cell3 = row3.createCell(2);
			cell3.setCellValue(ex.getCust_club());

			cell3 = row3.createCell(3);
			cell3.setCellValue(ex.getLy_vol());

			cell3 = row3.createCell(4);
			cell3.setCellValue(ex.getTy_vol());

			cell3 = row3.createCell(5);
			cell3.setCellValue(ex.getVol_gr());

			cell3 = row3.createCell(6);
			cell3.setCellValue(ex.getLy_val());

			cell3 = row3.createCell(7);
			cell3.setCellValue(ex.getTy_val());

			cell3 = row3.createCell(8);
			cell3.setCellValue(ex.getVal_gr());

			cell3 = row3.createCell(9);
			cell3.setCellValue(ex.getTotal_scheme_outflow());

			j3++;
		}

		// Cust Outflow details
		XSSFRow row4 = spreadsheet.createRow(j3 + 2);
		XSSFCell cell4;

		cell4 = row4.createCell(0);
		cell4.setCellValue("Regn");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell4 = row4.createCell(1);
		cell4.setCellValue("Depot");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell4 = row4.createCell(2);
		cell4.setCellValue("Cust Code");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 3200);

		cell4 = row4.createCell(3);
		cell4.setCellValue("Cust Name");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 3200);

		cell4 = row4.createCell(4);
		cell4.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 3200);

		cell4 = row4.createCell(5);
		cell4.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 3200);

		cell4 = row4.createCell(6);
		cell4.setCellValue("TY Vol");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 2500);

		cell4 = row4.createCell(7);
		cell4.setCellValue("Vol GR%");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 6000);

		cell4 = row4.createCell(8);
		cell4.setCellValue("LY Val");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 7000);

		cell4 = row4.createCell(9);
		cell4.setCellValue("TY Val");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 4000);

		cell4 = row4.createCell(10);
		cell4.setCellValue("Val GR%");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 6000);

		cell4 = row4.createCell(11);
		cell4.setCellValue("Total Scheme Outflow");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 2000);

		int j4 = j3 + 3;

		Iterator<MISReport> itr4 = dmldlracnooutflow.iterator();
		while (itr4.hasNext()) {
			MISReport ex = itr4.next();

			row4 = spreadsheet.createRow(j4);

			cell4 = row4.createCell(0);
			cell4.setCellValue(ex.getRegn());

			cell4 = row4.createCell(1);
			cell4.setCellValue(ex.getDepot());

			cell4 = row4.createCell(2);
			cell4.setCellValue(ex.getCust_code());

			cell4 = row4.createCell(3);
			cell4.setCellValue(ex.getCust_name());

			cell4 = row4.createCell(4);
			cell4.setCellValue(ex.getCust_club());

			cell4 = row4.createCell(5);
			cell4.setCellValue(ex.getLy_vol());

			cell4 = row4.createCell(6);
			cell4.setCellValue(ex.getTy_vol());

			cell4 = row4.createCell(7);
			cell4.setCellValue(ex.getVol_gr());

			cell4 = row4.createCell(8);
			cell4.setCellValue(ex.getLy_val());

			cell4 = row4.createCell(9);
			cell4.setCellValue(ex.getTy_val());

			cell4 = row4.createCell(10);
			cell4.setCellValue(ex.getVal_gr());

			cell4 = row4.createCell(11);
			cell4.setCellValue(ex.getTotal_scheme_outflow());

			j4++;
		}

		try {
			// to upload excel file
			String filename = "MIS Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//	      		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "MIS Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	                response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	                FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	                FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	                FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("datepicker", from_date);
		model.addAttribute("datepicker1", to_date);

		return new ModelAndView("MISReportSP");
	}

	// download MIS report
	@RequestMapping("/downloadMISReport")
	public ModelAndView downloadMISReport(@RequestParam(value = "ml_group") String ml_group,
			@RequestParam(value = "from_date") String from_date, @RequestParam(value = "to_date") String to_date,
			ModelMap map, Model model, HttpServletRequest request, HttpServletResponse response) {
//			    	DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy"); 
//			    	Date fromdate = null, todate = null;
//					try {
//						fromdate = (Date)formatter.parse(from_date);
//						todate = (Date)formatter.parse(to_date);
//			    		System.out.println("Start Date: "+fromdate+" End Date: "+todate);
//					} catch (ParseException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//			    	SimpleDateFormat newFormat = new SimpleDateFormat("dd-MM-yyyy");
//			    	String from_date1 = newFormat.format(fromdate);
//			    	String to_date1 = newFormat.format(todate);
		System.out.println("Start Date: " + from_date + " End Date: " + to_date);
		String from_date1 = from_date;
		String to_date1 = to_date;

		System.out.println("from " + from_date1 + " to " + to_date1);

		// Scheme outflow details
		System.out.println("call BPIL_ML_LY_OUTFLOW");

		String sql1 = "SELECT ML_LY.LY_VOL, " + "		  ML_LY.LY_VAL "
//			    				+ "		--,BPIL_ML_OUTFLOW('"+ml_group+"', '"+from_date1+"', '"+to_date1+"') TOT_ADJUST_RW "
				+ "FROM   (SELECT NVL(SUM(MTD_VOL),0) LY_VOL, " + "		  		  NVL(SUM(MTD_VAL),0) LY_VAL "
//			    				+ "		  		--INTO LY_VOL, LY_VAL "
				+ "		   FROM   (SELECT ML_LY.PRD_BILL_TO,    "
				+ "		  		  		  NVL(SUM(ML_LY.PRD_VOL),0) MTD_VOL,  "
				+ "		  		  		  NVL(SUM(ML_LY.PRD_VAL),0) MTD_VAL  "
				+ "		  		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		  		  		  		   ,BDM.BILL_TO_ID  "
				+ "		  		  		  		   ,PRD.PRODUCT PRD_NAME "
				+ "		  		  		  		   ,TRX.SLS_SKU_CODE "
				+ "		  		  		  		   ,PRD.PRD_CAT  "
				+ "		  		  		  		   ,PRD.PRD_CAT_DESC  "
				+ "		  		  		  		   ,PRD.PRD_GRP  " + "		  		  		  		   ,PRD.PRD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_SHD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_UOM  "
				+ "		  		  		  		   ,PRD.PRD_PCK_SIZE   "
				+ "		  		  		  		   ,TRX.SLS_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_INV_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_TRX_DATE  "
				+ "		  		  		  		   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		  		  		  		   ,TRX.SLS_TRX_IND  "
				+ "		  		  		  		   ,TRX.SLS_VOL PRD_VOL "
				+ "		  		  		  		   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		  		  		  		   ,TRX.SLS_VAL PRD_VAL "
				+ "		  		  		   FROM    BPIL_DEALER_MASTER_NEW BDM  "
				+ "		  		  		  		   ,BPIL_TRX_MASTER TRX  "
				+ "		  		  		  		   ,(SELECT  BPM.PRODUCT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT        PRD_CAT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT_DESC   PRD_CAT_DESC  "
				+ "		  		  		  		   			 ,BPM.PRD_GRP        PRD_GRP  "
				+ "		  		  		  		   			 ,BPM.PRD_CODE       PRD_CODE  "
				+ "		  		  		  		   			 ,BPM.SHD_CODE       PRD_SHD_CODE  "
				+ "		  		  		  		   			 ,BPM.PRD_UOM        PRD_UOM  "
				+ "		  		  		  		   			 ,BPM.PACK_SIZE      PRD_PCK_SIZE  "
				+ "		  		  		  		     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		  		  		  		   			 ,BPIL_QMIS_PRD BQP "
				+ "		  		  		  		     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		  		  		  		     AND     BQP.ML = '" + ml_group + "' "
				+ "		  		  		  		    ) PRD  "
				+ "		  		  		   WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT  "
//			    				+ "		  		  		 --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		  		  		   AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12))  "
				+ "		  		  		   			 AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12)))  " + "		  		  		           )  "
				+ "		  		  		   AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO  "
				+ "		  		  		  ) ML_LY " + "		  		   GROUP by ML_LY.PRD_BILL_TO "
				+ "		  		  ) " + "		  ) ML_LY ";

		List<MISReport> dmlmlly = jdbcTemplate.query(sql1, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//		 			List<MISReport> dmlmlly = new ArrayList<MISReport>();
//				   	CallableStatement cStmt1;
//				   	try {
//				   		cStmt1 = hibernateConfiguration.dataSource().getConnection()
//				   					.prepareCall("{call BPIL_ML_LY_OUTFLOW(?,?,?,?)}");
//				   		cStmt1.setString(1,  ml_group);
//				   		cStmt1.setString(2,  from_date1);
//				   		cStmt1.setString(3,  to_date1);
//				   		cStmt1.registerOutParameter(4, OracleTypes.CURSOR);
//				   		ResultSet result = cStmt1.executeQuery();
//				   		ResultSet rs1 = (ResultSet) cStmt1.getObject(4);
//				   		while (rs1.next()) {
//				   			MISReport repo = new MISReport();
//				   			repo.setLy_vol(rs1.getDouble("LY_VOL"));
//				   			repo.setLy_val(rs1.getDouble("LY_VAL"));
//				   			System.out.println("LY_VOL "+rs1.getDouble("LY_VOL"));
//				   			System.out.println("LY_VAL "+rs1.getDouble("LY_VAL"));
//						   
//				   			dmlmlly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_TY_OUTFLOW");

		String sql2 = "SELECT ML_TY.TY_VOL, " + "		  ML_TY.TY_VAL "
//			    				+ "	    --,BPIL_ML_OUTFLOW('"+ml_group+"', '"+from_date1+"', '"+to_date1+"') TOT_ADJUST_RW "
				+ "FROM   (SELECT NVL(SUM(MTD_VOL),0) TY_VOL, " + "		  		  NVL(SUM(MTD_VAL),0) TY_VAL "
//			    				+ "		  		--INTO TY_VOL, TY_VAL "
				+ "		   FROM   (SELECT ML_TY.PRD_BILL_TO,    "
				+ "		  		  		  NVL(SUM(ML_TY.PRD_VOL),0) MTD_VOL,  "
				+ "		  		  		  NVL(SUM(ML_TY.PRD_VAL),0) MTD_VAL  "
				+ "		  		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		  		  		  		   ,BDM.BILL_TO_ID  "
				+ "		  		  		  		   ,PRD.PRODUCT PRD_NAME "
				+ "		  		  		  		   ,TRX.SLS_SKU_CODE "
				+ "		  		  		  		   ,PRD.PRD_CAT  "
				+ "		  		  		  		   ,PRD.PRD_CAT_DESC  "
				+ "		  		  		  		   ,PRD.PRD_GRP  " + "		  		  		  		   ,PRD.PRD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_SHD_CODE  "
				+ "		  		  		  		   ,PRD.PRD_UOM  "
				+ "		  		  		  		   ,PRD.PRD_PCK_SIZE   "
				+ "		  		  		  		   ,TRX.SLS_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_INV_TRX_ID "
				+ "		  		  		  		   ,TRX.SLS_TRX_DATE  "
				+ "		  		  		  		   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		  		  		  		   ,TRX.SLS_TRX_IND  "
				+ "		  		  		  		   ,TRX.SLS_VOL PRD_VOL "
				+ "		  		  		  		   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		  		  		  		   ,TRX.SLS_VAL PRD_VAL "
				+ "		  		  		   FROM    BPIL_DEALER_MASTER_NEW BDM  "
				+ "		  		  		  		   ,BPIL_TRX_MASTER TRX  "
				+ "		  		  		  		   ,(SELECT  BPM.PRODUCT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT        PRD_CAT  "
				+ "		  		  		  		   			 ,BPM.PRD_CAT_DESC   PRD_CAT_DESC  "
				+ "		  		  		  		   			 ,BPM.PRD_GRP        PRD_GRP  "
				+ "		  		  		  		   			 ,BPM.PRD_CODE       PRD_CODE  "
				+ "		  		  		  		   			 ,BPM.SHD_CODE       PRD_SHD_CODE  "
				+ "		  		  		  		   			 ,BPM.PRD_UOM        PRD_UOM  "
				+ "		  		  		  		   			 ,BPM.PACK_SIZE      PRD_PCK_SIZE  "
				+ "		  		  		  		     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		  		  		  		   			 ,BPIL_QMIS_PRD BQP "
				+ "		  		  		  		     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		  		  		  		     AND     BQP.ML = '" + ml_group + "' "
				+ "		  		  		  		    ) PRD  "
				+ "		  		  		   WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT  "
//			    				+ "		  		  		 --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		  		  		   AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "		  		  		   			 AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0)))  " + "		  		  		   		   )  "
				+ "		  		  		   AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO  "
				+ "		  		  		  ) ML_TY " + "		  		   GROUP by ML_TY.PRD_BILL_TO "
				+ "		  		  ) " + "		  ) ML_TY ";

		List<MISReport> dmlmlty = jdbcTemplate.query(sql2, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//			    	List<MISReport> dmlmlty = new ArrayList<MISReport>();
//			    	CallableStatement cStmt2;
//			    	try {
//			    		cStmt2 = hibernateConfiguration.dataSource().getConnection()
//			    					.prepareCall("{call BPIL_ML_TY_OUTFLOW(?,?,?,?)}");
//			    		cStmt2.setString(1,  ml_group);
//			    		cStmt2.setString(2,  from_date1);
//			    		cStmt2.setString(3,  to_date1);
//			    		cStmt2.registerOutParameter(4, OracleTypes.CURSOR);
//			    		ResultSet result = cStmt2.executeQuery();
//			    		ResultSet rs2 = (ResultSet) cStmt2.getObject(4);
//			    		while (rs2.next()) {
//			    			MISReport repo = new MISReport();
//			    			repo.setTy_vol(rs2.getDouble("TY_VOL"));
//			    			repo.setTy_val(rs2.getDouble("TY_VAL"));
////			    		repo.setTotal_scheme_outflow(rs2.getDouble("TOT_ADJUST_RW"));
//			    			System.out.println("TY_VOL "+rs2.getDouble("TY_VOL"));
//			    			System.out.println("TY_VAL "+rs2.getDouble("TY_VAL"));
////			    		System.out.println("TOT_ADJUST_RW "+rs2.getDouble("TOT_ADJUST_RW"));
//							   
//			    			dmlmlty.add(repo);
//			    		}
//			    	} catch (SQLException e) {
//			    		e.printStackTrace();
//			    	}
//			    	catch (Exception e) {
//			    		System.out.println(e.getMessage());
//			    	}

		System.out.println("call BPIL_ML_TOTAL_OUTFLOW");

		String sql3 = "SELECT SUM (TOTAL_AMOUNT) TOT_ADJUST_RW "
//			    				+ "     --INTO TOT_ADJUST_RW "
				+ "FROM   (SELECT CASE " + "		   		       WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "		                    THEN SUM(TOTAL_AMT) " + "		               ELSE 0 "
				+ "		          END  TOTAL_AMOUNT " + "		   FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "		                  RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "		                  SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "		                  CASE " + "		                       WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "		                               OR RW.ATTRIBUTE1 = 'A') "
				+ "		                                    AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "		                            THEN RW.REWARD_ADJUSTMENTS "
				+ "		                       ELSE RW.REWARD_TOTAL " + "		                  END  TOTAL_AMT "
				+ "		           FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "		                  BPIL_SCHEME_MASTER BSM "
				+ "		           WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "		           AND    RW.REWARD_I_STATUS = 'P' "
				+ "		           AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//			    				+ "		         --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "		         --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "		           AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "		           AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1 + "','DD-MM-YYYY'))) "
				+ "		                    AND (TRUNC(BSM.END_DATE) <= (TO_DATE('" + to_date1 + "','DD-MM-YYYY'))) "
				+ "                       ) " + "		           UNION ALL "
				+ "		           SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "		                  RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "		                  SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "		                  CASE " + "		                       WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "		                               OR RW.ATTRIBUTE1 = 'A') "
				+ "		                                    AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "		                            THEN RW.REWARD_ADJUSTMENTS "
				+ "		                       ELSE RW.REWARD_CONVERTED_CN "
				+ "		                  END  TOTAL_AMT " + "		           FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "		                  BPIL_SCHEME_MASTER BSM "
				+ "		           WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "		           AND    RW.REWARD_I_STATUS = 'P' "
				+ "		           AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "		           AND    RW.REWARD_GIFT_TO_CN = 'Y' " + "		           AND    RW.ATTRIBUTE1 <> 'R' "
//			    				+ "		         --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "		         --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "		           AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "		           AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1 + "','DD-MM-YYYY'))) "
				+ "		           			AND (TRUNC(BSM.END_DATE) <= (TO_DATE('" + to_date1 + "','DD-MM-YYYY'))) "
				+ "                       ) " + "		          ) " + "		   UNION ALL " + "		   SELECT CASE "
				+ "		   		       WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "		   		            THEN SUM(TOTAL_AMT) " + "		   		       ELSE 0 "
				+ "		   		  END  TOTAL_AMOUNT " + "		   FROM   (SELECT TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "		           FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "		   				          BSM.SCHEME_NAME SCHEME_NAME , "
				+ "		   				          RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "		   				          RW.REWARD_DLR_CODE CUST_CODE , "
				+ "		   				          BGM.GIFT_GROUP GIFT_TYPE , "
				+ "		   				          BGM.GIFT_CODE GIFT_CODE , "
				+ "		   				          RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "		   				          BGM.GIFT_NAME GIFT_NAME , "
				+ "		   				          BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "						          RW.REWARD_GIFT_ID GIFT_ID , " + "		   				          CASE "
				+ "		   				      	       WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "		   				      	               OR RW.ATTRIBUTE1 = 'A') "
				+ "		   				                            AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "		   				      	            THEN RW.REWARD_ADJUSTMENTS "
				+ "						      	       ELSE RW.REWARD_TOTAL "
				+ "	   					      	  END  TOTAL_QTY "
				+ "	   					   FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "	   					      	  BPIL_SCHEME_MASTER BSM, "
				+ "	   					      	  BPIL_GIFT_MASTER BGM "
				+ "	   					   WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "	   					   AND    RW.REWARD_I_STATUS = 'P' "
				+ "	   					   AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "	   					   AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "	   					   AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "	   					   AND    RW.REWARD_GIFT_TO_CN = 'N' "
//			    				+ "	   					 --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "	   					 --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "	   					   AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "	   					   AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "	   					            AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "	   					   UNION ALL " + "	   					   SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "	   					          BSM.SCHEME_NAME SCHEME_NAME , "
				+ "	   					          RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "	   					          RW.REWARD_DLR_CODE CUST_CODE , "
				+ "	   					          BGM.GIFT_GROUP GIFT_TYPE , "
				+ "	   					          BGM.GIFT_CODE GIFT_CODE , "
				+ "	   					          RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "	   					          BGM.GIFT_NAME GIFT_NAME , "
				+ "	   					          BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "	   					          RW.REWARD_GIFT_ID GIFT_ID , " + "	   					          CASE "
				+ "	   					               WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "	   					                       OR RW.ATTRIBUTE1 = 'A') "
				+ "	   					                            AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "	   					                    THEN RW.REWARD_ADJUSTMENTS "
				+ "	   					               ELSE RW.REWARD_TOTAL "
				+ "	   					          END  TOTAL_QTY "
				+ "	   					   FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "	   					          BPIL_SCHEME_MASTER BSM, "
				+ "	   					          BPIL_GIFT_MASTER BGM "
				+ "	   					   WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "	   					   AND    RW.REWARD_I_STATUS = 'P' "
				+ "	   					   AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "	   					   AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "	   					   AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "	   					   AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "	   					   AND    RW.ATTRIBUTE1 = 'R' "
//			    				+ "	   					 --AND    BSM.ACTIVE_FLAG = 'Closed' "
//			    				+ "	   					 --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "	   					   AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "	   					   AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "	   					   		    AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) " + "		                  ) "
				+ "		          ) " + "       ) ";

		List<MISReport> dmlmltotal = jdbcTemplate.query(sql3, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("TOT_ADJUST_RW " + rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//			    	List<MISReport> dmlmltotal = new ArrayList<MISReport>();
//			    	CallableStatement cStmt3;
//			    	try {
//			    		cStmt3 = hibernateConfiguration.dataSource().getConnection()
//			    					.prepareCall("{call BPIL_ML_TOTAL_OUTFLOW(?,?,?,?)}");
//			    		cStmt3.setString(1,  ml_group );
//			    		cStmt3.setString(2,  from_date1 );
//			    		cStmt3.setString(3,  to_date1 );
//			    		cStmt3.registerOutParameter(4, OracleTypes.CURSOR);
//			    		ResultSet result = cStmt3.executeQuery();
//			    		ResultSet rs3 = (ResultSet) cStmt3.getObject(4);
//			    		while (rs3.next()) {
//			    			MISReport repo = new MISReport();
//			    			repo.setTotal_scheme_outflow(rs3.getDouble("TOT_ADJUST_RW"));
//			    			System.out.println("TOT_ADJUST_RW "+rs3.getDouble("TOT_ADJUST_RW"));
//						   
//			    			dmlmltotal.add(repo);
//						}
//			    		
//		
//			    	} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("scheme outflow");
		List<MISReport> dmlmloutflow = new ArrayList<>();
		MISReport dmlobj = new MISReport();
		dmlobj.setLy_vol(dmlmlly.get(0).getLy_vol());
		dmlobj.setLy_val(dmlmlly.get(0).getLy_val());

		dmlobj.setTy_vol(dmlmlty.get(0).getTy_vol());
		dmlobj.setTy_val(dmlmlty.get(0).getTy_val());

		Double volgr = 0.0;
		if (dmlobj.getLy_vol() > 0.0) {
			volgr = ((dmlobj.getTy_vol() - dmlobj.getLy_vol()) / dmlobj.getLy_vol()) * 100;
		} else if (dmlobj.getLy_vol() == 0.0 && dmlobj.getTy_vol() > 0.0) {
			volgr = 100.0;
		}
		Double valgr = 0.0;
		if (dmlobj.getLy_val() > 0.0) {
			valgr = ((dmlobj.getTy_val() - dmlobj.getLy_val()) / dmlobj.getLy_val()) * 100;
		} else if (dmlobj.getLy_val() == 0.0 && dmlobj.getTy_val() > 0.0) {
			volgr = 100.0;
		}
		dmlobj.setVol_gr(Math.round(volgr * 100.0) / 100.0);
		dmlobj.setVal_gr(Math.round(valgr * 100.0) / 100.0);
		dmlobj.setTotal_scheme_outflow(dmlmltotal.get(0).getTotal_scheme_outflow());

		dmlmloutflow.add(dmlobj);

		// Club outflow details
		System.out.println("call BPIL_ML_CUST_CLUB_LY_OUTFLOW");

		String sql4 = "SELECT ML_CUST_CLUB_LY.REPORT_CLUB_CLS, " + "		  ML_CUST_CLUB_LY.LY_VOL, "
				+ "		  ML_CUST_CLUB_LY.LY_VAL "
//								+ "		--,BPIL_ML_CUST_CLUB_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_CUST_CLUB_LY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REPORT_CLUB_CLS,    " + "		          NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL, "
				+ "		          NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								+ "		        --INTO CUST_CLUB_CLS, LY_VOL, LY_VAL "
				+ "		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		                   ,BDM.BILL_TO_ID  " + "		                   ,DC.REPORT_CLUB_CLS "
				+ "		                   ,PRD.PRODUCT PRD_NAME " + "		                   ,TRX.SLS_SKU_CODE "
				+ "		                   ,PRD.PRD_CAT " + "		                   ,PRD.PRD_CAT_DESC "
				+ "		                   ,PRD.PRD_GRP  " + "		                   ,PRD.PRD_CODE  "
				+ "		                   ,PRD.PRD_SHD_CODE " + "		                   ,PRD.PRD_UOM  "
				+ "		                   ,PRD.PRD_PCK_SIZE " + "		                   ,TRX.SLS_TRX_ID "
				+ "		                   ,TRX.SLS_INV_TRX_ID " + "		                   ,TRX.SLS_TRX_DATE "
				+ "		                   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		                   ,TRX.SLS_TRX_IND  " + "		                   ,TRX.SLS_VOL PRD_VOL "
				+ "		                   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		                   ,TRX.SLS_VAL PRD_VAL "
				+ "		           FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "		                   ,BPIL_DLR_CLUB_CLS DC " + "		                   ,BPIL_TRX_MASTER TRX  "
				+ "		                   ,(SELECT  BPM.PRODUCT "
				+ "		                             ,BPM.PRD_CAT        PRD_CAT "
				+ "		                             ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "		                             ,BPM.PRD_GRP        PRD_GRP  "
				+ "		                             ,BPM.PRD_CODE       PRD_CODE  "
				+ "		                             ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "		                             ,BPM.PRD_UOM        PRD_UOM  "
				+ "		                             ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "		                     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		                             ,BPIL_QMIS_PRD BQP "
				+ "		                     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		                     AND     BQP.ML = '" + ml_group + "' " + "		                    ) PRD  "
				+ "		           WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "		         --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		           AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12)) "
				+ "		                     AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "		                   )  "
				+ "		           AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "		           AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS " + "		          ) ML_LY "
				+ "		   GROUP by ML_LY.REPORT_CLUB_CLS " + "		   ORDER by ML_LY.REPORT_CLUB_CLS "
				+ "		  ) ML_CUST_CLUB_LY ";

		List<MISReport> dmlcustly = jdbcTemplate.query(sql4, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmlcustly = new ArrayList<MISReport>();
//					CallableStatement cStmt4;
//					try {
//						cStmt4 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_CUST_CLUB_LY_OUTFLOW(?,?,?,?)}");
//						cStmt4.setString(1,  ml_group);
//						cStmt4.setString(2,  from_date1);
//						cStmt4.setString(3,  to_date1);
//						cStmt4.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt4.executeQuery();
//						ResultSet rs4 = (ResultSet) cStmt4.getObject(4);
//						while (rs4.next()) {
//							MISReport repo = new MISReport();
//							repo.setCust_club(rs4.getString("REPORT_CLUB_CLS"));
//							repo.setLy_vol(rs4.getDouble("LY_VOL"));
//							repo.setLy_val(rs4.getDouble("LY_VAL"));
//							System.out.println("REPORT_CLUB_CLS "+rs4.getString("REPORT_CLUB_CLS"));
//							System.out.println("LY_VOL "+rs4.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs4.getDouble("LY_VAL"));
//							   
//							dmlcustly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_CUST_CLUB_TY_OUTFLOW");

		String sql5 = "SELECT ML_CUST_CLUB_TY.REPORT_CLUB_CLS, " + "		  ML_CUST_CLUB_TY.TY_VOL, "
				+ "		  ML_CUST_CLUB_TY.TY_VAL "
//								+ "		--,BPIL_ML_CUST_CLUB_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_CUST_CLUB_TY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REPORT_CLUB_CLS,    " + "		          NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL, "
				+ "		          NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								+ "		        --INTO CUST_CLUB_CLS, TY_VOL, TY_VAL "
				+ "		   FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO "
				+ "		                   ,BDM.BILL_TO_ID  " + "		                   ,DC.REPORT_CLUB_CLS "
				+ "		                   ,PRD.PRODUCT PRD_NAME " + "		                   ,TRX.SLS_SKU_CODE "
				+ "		                   ,PRD.PRD_CAT " + "		                   ,PRD.PRD_CAT_DESC "
				+ "		                   ,PRD.PRD_GRP  " + "		                   ,PRD.PRD_CODE  "
				+ "		                   ,PRD.PRD_SHD_CODE " + "		                   ,PRD.PRD_UOM  "
				+ "		                   ,PRD.PRD_PCK_SIZE " + "		                   ,TRX.SLS_TRX_ID "
				+ "		                   ,TRX.SLS_INV_TRX_ID " + "		                   ,TRX.SLS_TRX_DATE "
				+ "		                   ,TRX.SLS_INV_DATE PRD_INV_DT "
				+ "		                   ,TRX.SLS_TRX_IND  " + "		                   ,TRX.SLS_VOL PRD_VOL "
				+ "		                   ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "		                   ,TRX.SLS_VAL PRD_VAL "
				+ "		           FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "		                   ,BPIL_DLR_CLUB_CLS DC " + "		                   ,BPIL_TRX_MASTER TRX  "
				+ "		                   ,(SELECT  BPM.PRODUCT "
				+ "		                             ,BPM.PRD_CAT        PRD_CAT "
				+ "		                             ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "		                             ,BPM.PRD_GRP        PRD_GRP  "
				+ "		                             ,BPM.PRD_CODE       PRD_CODE  "
				+ "		                             ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "		                             ,BPM.PRD_UOM        PRD_UOM  "
				+ "		                             ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "		                     FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "		                             ,BPIL_QMIS_PRD BQP "
				+ "		                     WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "		                     AND     BQP.ML = '" + ml_group + "' " + "		                    ) PRD  "
				+ "		           WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "		         --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "		           AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0)) "
				+ "		                     AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "		                   )  "
				+ "		           AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "		           AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS " + "		          ) ML_TY "
				+ "		   GROUP by ML_TY.REPORT_CLUB_CLS " + "		   ORDER by ML_TY.REPORT_CLUB_CLS "
				+ "       ) ML_CUST_CLUB_TY ";

		List<MISReport> dmlcustty = jdbcTemplate.query(sql5, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlcustty = new ArrayList<MISReport>();
//					CallableStatement cStmt5;
//					try {
//						cStmt5 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_CUST_CLUB_TY_OUTFLOW(?,?,?,?)}");
//						cStmt5.setString(1,  ml_group);
//						cStmt5.setString(2,  from_date1);
//						cStmt5.setString(3,  to_date1);
//						cStmt5.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt5.executeQuery();
//						ResultSet rs5 = (ResultSet) cStmt5.getObject(4);
//						while (rs5.next()) {
//							MISReport repo = new MISReport();
//							repo.setCust_club(rs5.getString("REPORT_CLUB_CLS"));
//							repo.setTy_vol(rs5.getDouble("TY_VOL"));
//							repo.setTy_val(rs5.getDouble("TY_VAL"));
////						repo.setTotal_scheme_outflow(rs5.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REPORT_CLUB_CLS "+rs5.getString("REPORT_CLUB_CLS"));
//							System.out.println("TY_VOL "+rs5.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs5.getDouble("TY_VAL"));
////						System.out.println("TOT_ADJUST_RW "+rs5.getDouble("TOT_ADJUST_RW"));
//								   
//							dmlcustty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_CUST_CLUB_OUTFLOW");

		String sql6 = "SELECT REPORT_CLUB_CLS, " + "       SUM (TOTAL_AMOUNT) ADJUST_RW "
				+ "FROM   (SELECT REPORT_CLUB_CLS, " + "               TOTAL_AMOUNT "
				+ "        FROM   (SELECT REPORT_CLUB_CLS, " + "                       CASE "
				+ "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM, "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM , "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                       )  " + "                GROUP BY REPORT_CLUB_CLS "
				+ "                ORDER BY REPORT_CLUB_CLS " + "               )  " + "        UNION ALL "
				+ "        SELECT REPORT_CLUB_CLS, " + "               CASE "
				+ "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REPORT_CLUB_CLS, "
				+ "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM , "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               BDM.DLR_CAT, " + "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM , "
				+ "                               BPIL_DLR_CLUB_CLS DC "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//								+ "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								+ "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'))) " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY')))  " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								+ "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                       ) " + "               ) " + "        GROUP BY REPORT_CLUB_CLS "
				+ "        ORDER BY REPORT_CLUB_CLS " + "       ) " + "GROUP BY REPORT_CLUB_CLS "
				+ "ORDER BY REPORT_CLUB_CLS ";

		List<MISReport> dmlcustout = jdbcTemplate.query(sql6, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlcustout = new ArrayList<MISReport>();
//					CallableStatement cStmt6;
//					try {
//						cStmt6 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_CUST_CLUB_OUTFLOW(?,?,?,?)}");
//						cStmt6.setString(1,  ml_group );
//						cStmt6.setString(2,  from_date1 );
//						cStmt6.setString(3,  to_date1 );
//						cStmt6.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt6.executeQuery();
//						ResultSet rs6 = (ResultSet) cStmt6.getObject(4);
//						while (rs6.next()) {
//							MISReport repo = new MISReport();
//							repo.setCust_club(rs6.getString("REPORT_CLUB_CLS"));
//							repo.setTotal_scheme_outflow(rs6.getDouble("ADJUST_RW"));
//							System.out.println("REPORT_CLUB_CLS "+rs6.getString("REPORT_CLUB_CLS"));
//							System.out.println("ADJUST_RW "+rs6.getDouble("ADJUST_RW"));
//								   
//							dmlcustout.add(repo);
//						}
//							
//							
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}  

		System.out.println("cust club outflow");

		List<MISReport> dist_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlcustly.size(); i++) {
			MISReport Cust_club = new MISReport();
			Cust_club.setCust_club(dmlcustly.get(i).getCust_club());
			dist_Cust_club.add(Cust_club);
		}

		for (int i = 0; i < dmlcustty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustty.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustty.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		for (int i = 0; i < dmlcustout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Cust_club.size(); j++) {
				if (dmlcustout.get(i).getCust_club().equals(dist_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Cust_club = new MISReport();
				Cust_club.setCust_club(dmlcustout.get(i).getCust_club());
				dist_Cust_club.add(Cust_club);
			}
		}

		List<MISReport> dmlcustoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setCust_club(dist_Cust_club.get(k).getCust_club());

			for (int i = 0; i < dmlcustly.size(); i++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustly.get(i).getCust_club())) {
					repo.setLy_vol(dmlcustly.get(i).getLy_vol());
					repo.setLy_val(dmlcustly.get(i).getLy_val());
				}
			}

			for (int j = 0; j < dmlcustty.size(); j++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustty.get(j).getCust_club())) {
					repo.setTy_vol(dmlcustty.get(j).getTy_vol());
					repo.setTy_val(dmlcustty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlcustty.get(j).getTotal_scheme_outflow());
				}
			}

			for (int l = 0; l < dmlcustout.size(); l++) {
				if (dist_Cust_club.get(k).getCust_club().equals(dmlcustout.get(l).getCust_club())) {
					repo.setTotal_scheme_outflow(dmlcustout.get(l).getTotal_scheme_outflow());
				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlcustoutflow.add(repo);

		}

		// Region outflow details
		System.out.println("call BPIL_ML_REGN_LY_OUTFLOW");

		String sql7 = "SELECT ML_REGN_LY.REGN, " + "       ML_REGN_LY.REPORT_CLUB_CLS, " + "       ML_REGN_LY.LY_VOL, "
				+ "       ML_REGN_LY.LY_VAL "
//								+ "     --,BPIL_ML_REGN_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_LY.REGN, ML_REGN_LY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REGN,    " + "               ML_LY.REPORT_CLUB_CLS, "
				+ "               NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL, "
				+ "               NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								+ "             --INTO REGN, CUST_CLUB_CLS, LY_VOL, LY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID  "
				+ "                        ,DPM.REGN " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM  "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12)) "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_LY "
				+ "        GROUP by ML_LY.REGN, " + "                 ML_LY.REPORT_CLUB_CLS  "
				+ "        ORDER by ML_LY.REGN, " + "                 ML_LY.REPORT_CLUB_CLS " + "       ) ML_REGN_LY ";

		List<MISReport> dmlregnly = jdbcTemplate.query(sql7, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmlregnly = new ArrayList<MISReport>();
//					CallableStatement cStmt7;
//					try {
//						cStmt7 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_LY_OUTFLOW(?,?,?,?)}");
//						cStmt7.setString(1,  ml_group);
//						cStmt7.setString(2,  from_date1);
//						cStmt7.setString(3,  to_date1);
//						cStmt7.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt7.executeQuery();
//						ResultSet rs7 = (ResultSet) cStmt7.getObject(4);
//						while (rs7.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs7.getString("REGN"));
//							repo.setCust_club(rs7.getString("REPORT_CLUB_CLS"));
//							repo.setLy_vol(rs7.getDouble("LY_VOL"));
//							repo.setLy_val(rs7.getDouble("LY_VAL"));
//							System.out.println("REGN "+rs7.getString("REGN"));
//							System.out.println("REPORT_CLUB_CLS "+rs7.getString("REPORT_CLUB_CLS"));
//							System.out.println("LY_VOL "+rs7.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs7.getDouble("LY_VAL"));
//							   
//							dmlregnly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_TY_OUTFLOW");

		String sql8 = "SELECT ML_REGN_TY.REGN, " + "       ML_REGN_TY.REPORT_CLUB_CLS, " + "       ML_REGN_TY.TY_VOL, "
				+ "       ML_REGN_TY.TY_VAL "
//								+ "     --,BPIL_ML_REGN_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_TY.REGN, ML_REGN_TY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REGN,    " + "               ML_TY.REPORT_CLUB_CLS,    "
				+ "               NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL,  "
				+ "               NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								+ "             --INTO REGN, CUST_CLUB_CLS, TY_VOL, TY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								+ "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_TY "
				+ "        GROUP by ML_TY.REGN, " + "                 ML_TY.REPORT_CLUB_CLS "
				+ "        ORDER by ML_TY.REGN, " + "                 ML_TY.REPORT_CLUB_CLS " + "       ) ML_REGN_TY ";

		List<MISReport> dmlregnty = jdbcTemplate.query(sql8, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlregnty = new ArrayList<MISReport>();
//					CallableStatement cStmt8;
//					try {
//						cStmt8 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_TY_OUTFLOW(?,?,?,?)}");
//						cStmt8.setString(1,  ml_group);
//						cStmt8.setString(2,  from_date1);
//						cStmt8.setString(3,  to_date1);
//						cStmt8.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt8.executeQuery();
//						ResultSet rs8 = (ResultSet) cStmt8.getObject(4);
//						while (rs8.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs8.getString("REGN"));
//							repo.setCust_club(rs8.getString("REPORT_CLUB_CLS"));
//							repo.setTy_vol(rs8.getDouble("TY_VOL"));
//							repo.setTy_val(rs8.getDouble("TY_VAL"));
////						repo.setTotal_scheme_outflow(rs8.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REGN "+rs8.getString("REGN"));
//							System.out.println("REPORT_CLUB_CLS "+rs8.getString("REPORT_CLUB_CLS"));
//							System.out.println("TY_VOL "+rs8.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs8.getDouble("TY_VAL"));
////						System.out.println("TOT_ADJUST_RW "+rs8.getDouble("TOT_ADJUST_RW"));
//							   
//							dmlregnty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_OUTFLOW");

		String sql9 = "SELECT REGN, " + "       REPORT_CLUB_CLS, " + "       SUM (TOTAL_AMOUNT) ADJUST_RW "
				+ "FROM   (SELECT REGN,  " + "               REPORT_CLUB_CLS, " + "               TOTAL_AMOUNT "
				+ "        FROM   (SELECT REGN,  " + "                       REPORT_CLUB_CLS, "
				+ "                       CASE " + "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//                            + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                            + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//                            + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                            + "                      --AND    DPM.REGN = P_REGN "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//                            + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                            + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS "
//                            + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                            + "                      --AND    DPM.REGN = P_REGN "
				+ "                       ) " + "                GROUP BY REGN,  "
				+ "                         REPORT_CLUB_CLS " + "                ORDER BY REGN,  "
				+ "                         REPORT_CLUB_CLS " + "               ) " + "        UNION ALL "
				+ "        SELECT REGN,  " + "               REPORT_CLUB_CLS, " + "               CASE "
				+ "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REGN,  "
				+ "                       REPORT_CLUB_CLS, "
				+ "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//                            + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                            + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//                            + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                            + "                      --AND    DPM.REGN = P_REGN "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT DEPOT_CODE , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//                            + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                            + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//                            + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                            + "                      --AND    DPM.REGN = P_REGN "
				+ "                       ) " + "               ) " + "        GROUP BY REGN,  "
				+ "                 REPORT_CLUB_CLS " + "        ORDER BY REGN,  " + "                 REPORT_CLUB_CLS "
				+ "       ) " + "GROUP BY REGN,  " + "         REPORT_CLUB_CLS " + "ORDER BY REGN,  "
				+ "         REPORT_CLUB_CLS ";

		List<MISReport> dmlregnout = jdbcTemplate.query(sql9, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmlregnout = new ArrayList<MISReport>();
//					CallableStatement cStmt9;
//					try {
//						cStmt9 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_OUTFLOW(?,?,?,?)}");
//						cStmt9.setString(1,  ml_group );
//						cStmt9.setString(2,  from_date1 );
//						cStmt9.setString(3,  to_date1 );
//						cStmt9.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt9.executeQuery();
//						ResultSet rs9 = (ResultSet) cStmt9.getObject(4);
//						while (rs9.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs9.getString("REGN"));
//							repo.setCust_club(rs9.getString("REPORT_CLUB_CLS"));
//							repo.setTotal_scheme_outflow(rs9.getDouble("ADJUST_RW"));
//							System.out.println("REGN "+rs9.getString("REGN"));
//							System.out.println("REPORT_CLUB_CLS "+rs9.getString("REPORT_CLUB_CLS"));
//							System.out.println("ADJUST_RW "+rs9.getDouble("ADJUST_RW"));
//									   
//							dmlregnout.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}										

		System.out.println("regn outflow");
		List<MISReport> dist_Regn_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmlregnly.size(); i++) {
			MISReport Regn_Cust_club = new MISReport();
			Regn_Cust_club.setRegn(dmlregnly.get(i).getRegn());
			Regn_Cust_club.setCust_club(dmlregnly.get(i).getCust_club());
			dist_Regn_Cust_club.add(Regn_Cust_club);
		}

		for (int i = 0; i < dmlregnty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnty.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnty.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnty.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnty.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		for (int i = 0; i < dmlregnout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_Cust_club.size(); j++) {
				if (dmlregnout.get(i).getRegn().equals(dist_Regn_Cust_club.get(j).getRegn())
						&& dmlregnout.get(i).getCust_club().equals(dist_Regn_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_Cust_club = new MISReport();
				Regn_Cust_club.setRegn(dmlregnout.get(i).getRegn());
				Regn_Cust_club.setCust_club(dmlregnout.get(i).getCust_club());
				dist_Regn_Cust_club.add(Regn_Cust_club);
			}
		}

		List<MISReport> dmlregnoutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_Cust_club.get(k).getRegn());
			repo.setCust_club(dist_Regn_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmlregnly.size(); i++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnly.get(i).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnly.get(i).getCust_club())) {
					repo.setLy_vol(dmlregnly.get(i).getLy_vol());
					repo.setLy_val(dmlregnly.get(i).getLy_val());
				}

			}

			for (int j = 0; j < dmlregnty.size(); j++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnty.get(j).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnty.get(j).getCust_club())) {

					repo.setTy_vol(dmlregnty.get(j).getTy_vol());
					repo.setTy_val(dmlregnty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmlregnty.get(j).getTotal_scheme_outflow());

				}
			}

			for (int l = 0; l < dmlregnout.size(); l++) {
				if (dist_Regn_Cust_club.get(k).getRegn().equals(dmlregnout.get(l).getRegn())
						&& dist_Regn_Cust_club.get(k).getCust_club().equals(dmlregnout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmlregnout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmlregnoutflow.add(repo);

		}

		// Depot outflow details

		System.out.println("call BPIL_ML_REGN_DEPO_LY_OUTFLOW");

		String sql10 = "SELECT ML_REGN_DEPO_LY.REGN, " + "       ML_REGN_DEPO_LY.DEPOT_CODE, "
				+ "       ML_REGN_DEPO_LY.DEPOT_NAME, " + "       ML_REGN_DEPO_LY.REPORT_CLUB_CLS, "
				+ "       ML_REGN_DEPO_LY.LY_VOL, " + "       ML_REGN_DEPO_LY.LY_VAL "
//								 + "     --,BPIL_ML_REGN_DEPO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_DEPO_LY.REGN, ML_REGN_DEPO_LY.DEPOT_CODE, ML_REGN_DEPO_LY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REGN,   " + "               ML_LY.DEPOT_CODE, "
				+ "               ML_LY.DEPOT_NAME, " + "               ML_LY.REPORT_CLUB_CLS, "
				+ "               NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL,  "
				+ "               NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								 + "             --INTO REGN, DEPOT_CODE, DEPOT_NAME, CUST_CLUB_CLS, LY_VOL, LY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_LY "
				+ "        GROUP by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.REPORT_CLUB_CLS "
				+ "        ORDER by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.REPORT_CLUB_CLS "
				+ "       ) ML_REGN_DEPO_LY ";

		List<MISReport> dmldepoly = jdbcTemplate.query(sql10, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmldepoly = new ArrayList<MISReport>();
//					CallableStatement cStmt10;
//					try {
//						cStmt10 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_DEPO_LY_OUTFLOW(?,?,?,?)}");
//						cStmt10.setString(1,  ml_group);
//						cStmt10.setString(2,  from_date1);
//						cStmt10.setString(3,  to_date1);
//						cStmt10.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt10.executeQuery();
//						ResultSet rs10 = (ResultSet) cStmt10.getObject(4);
//						while (rs10.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs10.getString("REGN"));
//							repo.setDepot_code(rs10.getString("DEPOT_CODE"));
//							repo.setDepot(rs10.getString("DEPOT_NAME"));
//							repo.setCust_club(rs10.getString("REPORT_CLUB_CLS"));
//							repo.setLy_vol(rs10.getDouble("LY_VOL"));
//							repo.setLy_val(rs10.getDouble("LY_VAL"));
//							System.out.println("REGN "+rs10.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs10.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs10.getString("DEPOT_NAME"));
//							System.out.println("REPORT_CLUB_CLS "+rs10.getString("REPORT_CLUB_CLS"));
//							System.out.println("LY_VOL "+rs10.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs10.getDouble("LY_VAL"));
//							   
//							dmldepoly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_DEPO_TY_OUTFLOW");

		String sql11 = "SELECT ML_REGN_DEPO_TY.REGN, " + "       ML_REGN_DEPO_TY.DEPOT_CODE, "
				+ "       ML_REGN_DEPO_TY.DEPOT_NAME, " + "       ML_REGN_DEPO_TY.REPORT_CLUB_CLS, "
				+ "       ML_REGN_DEPO_TY.TY_VOL, " + "       ML_REGN_DEPO_TY.TY_VAL "
//								 + "     --,BPIL_ML_REGN_DEPO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_REGN_DEPO_TY.REGN, ML_REGN_DEPO_TY.DEPOT_CODE, ML_REGN_DEPO_TY.REPORT_CLUB_CLS) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REGN,    " + "               ML_TY.DEPOT_CODE, "
				+ "               ML_TY.DEPOT_NAME, " + "               ML_TY.REPORT_CLUB_CLS,    "
				+ "               NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL,  "
				+ "               NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								 + "               --INTO REGN, DEPOT_CODE, DEPOT_NAME, CUST_CLUB_CLS, TY_VOL, TY_VAL "
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME " + "                        ,DC.REPORT_CLUB_CLS "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DLR_CLUB_CLS DC " + "                        ,BPIL_DEPOT_MASTER DPM "
				+ "                        ,BPIL_TRX_MASTER TRX  " + "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                 ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                 ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                 ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                 ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                 ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                 ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                 ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                         FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                 ,BPIL_QMIS_PRD BQP "
				+ "                         WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                         AND     BQP.ML = '" + ml_group + "' " + "                        ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     BDM.DLR_CAT = DC.CUST_CLUB_CLS "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_TY "
				+ "        GROUP by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.REPORT_CLUB_CLS "
				+ "        ORDER by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.REPORT_CLUB_CLS "
				+ "       ) ML_REGN_DEPO_TY ";

		List<MISReport> dmldepoty = jdbcTemplate.query(sql11, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldepoty = new ArrayList<MISReport>();
//					CallableStatement cStmt11;
//					try {
//						cStmt11 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_DEPO_TY_OUTFLOW(?,?,?,?)}");
//						cStmt11.setString(1,  ml_group);
//						cStmt11.setString(2,  from_date1);
//						cStmt11.setString(3,  to_date1);
//						cStmt11.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt11.executeQuery();
//						ResultSet rs11 = (ResultSet) cStmt11.getObject(4);
//						while (rs11.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs11.getString("REGN"));
//							repo.setDepot_code(rs11.getString("DEPOT_CODE"));
//							repo.setDepot(rs11.getString("DEPOT_NAME"));
//							repo.setCust_club(rs11.getString("REPORT_CLUB_CLS"));
//							repo.setTy_vol(rs11.getDouble("TY_VOL"));
//							repo.setTy_val(rs11.getDouble("TY_VAL"));
////						repo.setTotal_scheme_outflow(rs11.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REGN "+rs11.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs11.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs11.getString("DEPOT_NAME"));
//							System.out.println("REPORT_CLUB_CLS "+rs11.getString("REPORT_CLUB_CLS"));
//							System.out.println("TY_VOL "+rs11.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs11.getDouble("TY_VAL"));
////						System.out.println("TOT_ADJUST_RW "+rs11.getDouble("TOT_ADJUST_RW"));
//							   
//							dmldepoty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_REGN_DEPO_OUTFLOW");

		String sql12 = "SELECT REGN, " + "       DEPOT_CODE, " + "       DEPOT_NAME, " + "       REPORT_CLUB_CLS, "
				+ "       SUM (TOTAL_AMOUNT) ADJUST_RW " + "FROM   (SELECT REGN, " + "               DEPOT_CODE, "
				+ "               DEPOT_NAME, " + "               REPORT_CLUB_CLS, " + "               TOTAL_AMOUNT "
				+ "        FROM   (SELECT REGN, " + "                       DEPOT_CODE, "
				+ "                       DEPOT_NAME, " + "                       REPORT_CLUB_CLS, "
				+ "                       CASE " + "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       )  " + "                GROUP BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         REPORT_CLUB_CLS " + "                ORDER BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         REPORT_CLUB_CLS " + "               ) " + "        UNION ALL "
				+ "        SELECT REGN, " + "               DEPOT_CODE, " + "               DEPOT_NAME, "
				+ "               REPORT_CLUB_CLS, " + "               CASE "
				+ "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REGN, "
				+ "                       DEPOT_CODE, " + "                       DEPOT_NAME, "
				+ "                       REPORT_CLUB_CLS,  "
				+ "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               DC.REPORT_CLUB_CLS, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DLR_CLUB_CLS DC "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
				+ "                        AND    BDM.DLR_CAT = DC.CUST_CLUB_CLS  "
//								 + "                      --AND    DC.REPORT_CLUB_CLS = P_CLUB_CLS "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       ) " + "               )  " + "        GROUP BY REGN, "
				+ "                 DEPOT_CODE, " + "                 DEPOT_NAME, "
				+ "                 REPORT_CLUB_CLS " + "        ORDER BY REGN, " + "                 DEPOT_CODE, "
				+ "                 DEPOT_NAME, " + "                 REPORT_CLUB_CLS " + "       ) "
				+ "GROUP BY REGN, " + "         DEPOT_CODE, " + "         DEPOT_NAME, " + "         REPORT_CLUB_CLS "
				+ "ORDER BY REGN, " + "         DEPOT_CODE, " + "         DEPOT_NAME, " + "         REPORT_CLUB_CLS ";

		List<MISReport> dmldepoout = jdbcTemplate.query(sql12, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_club(rs.getString("REPORT_CLUB_CLS"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("REPORT_CLUB_CLS " + rs.getString("REPORT_CLUB_CLS"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldepoout = new ArrayList<MISReport>();
//					CallableStatement cStmt12;
//					try {
//						cStmt12 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_REGN_DEPO_OUTFLOW(?,?,?,?)}");
//						cStmt12.setString(1,  ml_group );
//						cStmt12.setString(2,  from_date1 );
//						cStmt12.setString(3,  to_date1 );
//						cStmt12.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt12.executeQuery();
//						ResultSet rs12 = (ResultSet) cStmt12.getObject(4);
//						while (rs12.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs12.getString("REGN"));
//							repo.setDepot_code(rs12.getString("DEPOT_CODE"));
//							repo.setDepot(rs12.getString("DEPOT_NAME"));
//							repo.setCust_club(rs12.getString("REPORT_CLUB_CLS"));
//							repo.setTotal_scheme_outflow(rs12.getDouble("ADJUST_RW"));
//							System.out.println("REGN "+rs12.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs12.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs12.getString("DEPOT_NAME"));
//							System.out.println("REPORT_CLUB_CLS "+rs12.getString("REPORT_CLUB_CLS"));
//							System.out.println("ADJUST_RW "+rs12.getDouble("ADJUST_RW"));
//									   
//							dmldepoout.add(repo);
//						}
//								
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("depo outflow");
		List<MISReport> dist_Regn_depo_Cust_club = new ArrayList<>();
		for (int i = 0; i < dmldepoly.size(); i++) {
			MISReport Regn_depo_Cust_club = new MISReport();
			Regn_depo_Cust_club.setRegn(dmldepoly.get(i).getRegn());
			Regn_depo_Cust_club.setDepot_code(dmldepoly.get(i).getDepot_code());
			Regn_depo_Cust_club.setDepot(dmldepoly.get(i).getDepot());
			Regn_depo_Cust_club.setCust_club(dmldepoly.get(i).getCust_club());
			dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
		}

		for (int i = 0; i < dmldepoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoty.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoty.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoty.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoty.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoty.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		for (int i = 0; i < dmldepoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_club.size(); j++) {
				if (dmldepoout.get(i).getRegn().equals(dist_Regn_depo_Cust_club.get(j).getRegn())
						&& dmldepoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_club.get(j).getDepot_code())
						&& dmldepoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_club.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_club = new MISReport();
				Regn_depo_Cust_club.setRegn(dmldepoout.get(i).getRegn());
				Regn_depo_Cust_club.setDepot_code(dmldepoout.get(i).getDepot_code());
				Regn_depo_Cust_club.setDepot(dmldepoout.get(i).getDepot());
				Regn_depo_Cust_club.setCust_club(dmldepoout.get(i).getCust_club());
				dist_Regn_depo_Cust_club.add(Regn_depo_Cust_club);
			}
		}

		List<MISReport> dmldepooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_club.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_club.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_club.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_club.get(k).getDepot());
			repo.setCust_club(dist_Regn_depo_Cust_club.get(k).getCust_club());
			for (int i = 0; i < dmldepoly.size(); i++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldepoly.get(i).getLy_vol());
					repo.setLy_val(dmldepoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldepoty.size(); j++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldepoty.get(j).getTy_vol());
					repo.setTy_val(dmldepoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldepoty.get(j).getTotal_scheme_outflow());

				}
			}
			for (int l = 0; l < dmldepoout.size(); l++) {
				if (dist_Regn_depo_Cust_club.get(k).getRegn().equals(dmldepoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_club.get(k).getDepot_code().equals(dmldepoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_club.get(k).getCust_club().equals(dmldepoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldepoout.get(l).getTotal_scheme_outflow());

				}
			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldepooutflow.add(repo);
		}

		// Customer outflow details
		System.out.println("call BPIL_ML_DLR_AC_NO_LY_OUTFLOW");

		String sql13 = "SELECT ML_DLR_AC_NO_LY.REGN, " + "       ML_DLR_AC_NO_LY.DEPOT_CODE, "
				+ "       ML_DLR_AC_NO_LY.DEPOT_NAME, " + "       ML_DLR_AC_NO_LY.DLR_AC_NO, "
				+ "       ML_DLR_AC_NO_LY.DLR_AC_NAME, " + "       ML_DLR_AC_NO_LY.DLR_CAT, "
				+ "       ML_DLR_AC_NO_LY.LY_VOL, " + "       ML_DLR_AC_NO_LY.LY_VAL "
//								 + "     --,BPIL_ML_DLR_AC_NO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_DLR_AC_NO_LY.REGN, ML_DLR_AC_NO_LY.DEPOT_CODE, ML_DLR_AC_NO_LY.DLR_AC_NO, ML_DLR_AC_NO_LY.DLR_CAT) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_LY.REGN,   " + "               ML_LY.DEPOT_CODE, "
				+ "               ML_LY.DEPOT_NAME, " + "               ML_LY.DLR_AC_NO, "
				+ "               ML_LY.DLR_AC_NAME, " + "               ML_LY.DLR_CAT, "
				+ "               NVL(SUM(ML_LY.PRD_VOL),0) LY_VOL,  "
				+ "               NVL(SUM(ML_LY.PRD_VAL),0) LY_VAL  "
//								 + "             --INTO REGN, DEPOT_CODE, DEPOT_NAME, DLR_AC_NO, DLR_AC_NAME, DLR_CAT, LY_VOL, LY_VAL " 
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME, " + "                        BDM.DLR_AC_NO, "
				+ "                        BDM.DLR_AC_NAME, " + "                        BDM.DLR_CAT "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DEPOT_MASTER DPM " + "                        ,BPIL_TRX_MASTER TRX  "
				+ "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),-12))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),-12))) " + "                        )  "
				+ "                AND     BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND     DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_LY "
				+ "        GROUP by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.DLR_AC_NO, "
				+ "                 ML_LY.DLR_AC_NAME, " + "                 ML_LY.DLR_CAT "
				+ "        ORDER by ML_LY.REGN, " + "                 ML_LY.DEPOT_CODE, "
				+ "                 ML_LY.DEPOT_NAME, " + "                 ML_LY.DLR_AC_NO, "
				+ "                 ML_LY.DLR_AC_NAME, " + "                 ML_LY.DLR_CAT "
				+ "       ) ML_DLR_AC_NO_LY ";

		List<MISReport> dmldlracnoly = jdbcTemplate.query(sql13, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_code(rs.getString("DLR_AC_NO"));
				repo.setCust_name(rs.getString("DLR_AC_NAME"));
				repo.setCust_club(rs.getString("DLR_CAT"));
				repo.setLy_vol(rs.getDouble("LY_VOL"));
				repo.setLy_val(rs.getDouble("LY_VAL"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs.getString("DLR_CAT"));
				System.out.println("LY_VOL " + rs.getDouble("LY_VOL"));
				System.out.println("LY_VAL " + rs.getDouble("LY_VAL"));

				return repo;
			}

		});

//					List<MISReport> dmldlracnoly = new ArrayList<MISReport>();
//					CallableStatement cStmt13;
//					try {
//						cStmt13 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_DLR_AC_NO_LY_OUTFLOW(?,?,?,?)}");
//						cStmt13.setString(1,  ml_group);
//						cStmt13.setString(2,  from_date1);
//						cStmt13.setString(3,  to_date1);
//						cStmt13.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt13.executeQuery();
//						ResultSet rs13 = (ResultSet) cStmt13.getObject(4);
//						while (rs13.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs13.getString("REGN"));
//							repo.setDepot_code(rs13.getString("DEPOT_CODE"));
//							repo.setDepot(rs13.getString("DEPOT_NAME"));
//							repo.setCust_code(rs13.getString("DLR_AC_NO"));
//							repo.setCust_name(rs13.getString("DLR_AC_NAME"));
//							repo.setCust_club(rs13.getString("DLR_CAT"));
//							repo.setLy_vol(rs13.getDouble("LY_VOL"));
//							repo.setLy_val(rs13.getDouble("LY_VAL"));
//							System.out.println("REGN "+rs13.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs13.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs13.getString("DEPOT_NAME"));
//							System.out.println("DLR_AC_NO "+rs13.getString("DLR_AC_NO"));
//							System.out.println("DLR_AC_NAME "+rs13.getString("DLR_AC_NAME"));
//							System.out.println("DLR_CAT "+rs13.getString("DLR_CAT"));
//							System.out.println("LY_VOL "+rs13.getDouble("LY_VOL"));
//							System.out.println("LY_VAL "+rs13.getDouble("LY_VAL"));
//							
//							   
//							dmldlracnoly.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_DLR_AC_NO_TY_OUTFLOW");

		String sql14 = "SELECT ML_DLR_AC_NO_TY.REGN, " + "       ML_DLR_AC_NO_TY.DEPOT_CODE, "
				+ "       ML_DLR_AC_NO_TY.DEPOT_NAME, " + "       ML_DLR_AC_NO_TY.DLR_AC_NO, "
				+ "       ML_DLR_AC_NO_TY.DLR_AC_NAME, " + "       ML_DLR_AC_NO_TY.DLR_CAT, "
				+ "       ML_DLR_AC_NO_TY.TY_VOL, " + "       ML_DLR_AC_NO_TY.TY_VAL "
//								 + "     --,BPIL_ML_DLR_AC_NO_OUTFLOW_F('"+ml_group+"', '"+from_date1+"', '"+to_date1+"', ML_DLR_AC_NO_TY.REGN, ML_DLR_AC_NO_TY.DEPOT_CODE, ML_DLR_AC_NO_TY.DLR_AC_NO, ML_DLR_AC_NO_TY.DLR_CAT) TOT_ADJUST_RW "
				+ "FROM   (SELECT ML_TY.REGN,    " + "               ML_TY.DEPOT_CODE, "
				+ "               ML_TY.DEPOT_NAME, " + "               ML_TY.DLR_AC_NO, "
				+ "               ML_TY.DLR_AC_NAME, " + "               ML_TY.DLR_CAT, "
				+ "               NVL(SUM(ML_TY.PRD_VOL),0) TY_VOL,  "
				+ "               NVL(SUM(ML_TY.PRD_VAL),0) TY_VAL  "
//								 + "             --INTO REGN, DEPOT_CODE, DEPOT_NAME, DLR_AC_NO, DLR_AC_NAME, DLR_CAT, TY_VOL, TY_VAL " 
				+ "        FROM   (SELECT  TRX.SLS_BILL_TO PRD_BILL_TO " + "                        ,BDM.BILL_TO_ID "
				+ "                        ,DPM.REGN " + "                        ,DPM.DEPOT_CODE, "
				+ "                        DPM.DEPOT_NAME, " + "                        BDM.DLR_AC_NO, "
				+ "                        BDM.DLR_AC_NAME, " + "                        BDM.DLR_CAT "
				+ "                        ,PRD.PRODUCT PRD_NAME " + "                        ,TRX.SLS_SKU_CODE "
				+ "                        ,PRD.PRD_CAT  " + "                        ,PRD.PRD_CAT_DESC "
				+ "                        ,PRD.PRD_GRP  " + "                        ,PRD.PRD_CODE  "
				+ "                        ,PRD.PRD_SHD_CODE " + "                        ,PRD.PRD_UOM  "
				+ "                        ,PRD.PRD_PCK_SIZE " + "                        ,TRX.SLS_TRX_ID "
				+ "                        ,TRX.SLS_INV_TRX_ID " + "                        ,TRX.SLS_TRX_DATE  "
				+ "                        ,TRX.SLS_INV_DATE PRD_INV_DT " + "                        ,TRX.SLS_TRX_IND  "
				+ "                        ,TRX.SLS_VOL PRD_VOL "
				+ "                        ,TRX.SLS_FNL_VOL  PRD_FNL_VOL "
				+ "                        ,TRX.SLS_VAL PRD_VAL "
				+ "                FROM    BPIL_DEALER_MASTER_NEW BDM "
				+ "                        ,BPIL_DEPOT_MASTER DPM " + "                        ,BPIL_TRX_MASTER TRX  "
				+ "                        ,(SELECT  BPM.PRODUCT  "
				+ "                                  ,BPM.PRD_CAT        PRD_CAT  "
				+ "                                  ,BPM.PRD_CAT_DESC   PRD_CAT_DESC "
				+ "                                  ,BPM.PRD_GRP        PRD_GRP  "
				+ "                                  ,BPM.PRD_CODE       PRD_CODE  "
				+ "                                  ,BPM.SHD_CODE       PRD_SHD_CODE "
				+ "                                  ,BPM.PRD_UOM        PRD_UOM  "
				+ "                                  ,BPM.PACK_SIZE      PRD_PCK_SIZE "
				+ "                          FROM    BPIL_PRODUCT_MASTER BPM "
				+ "                                  ,BPIL_QMIS_PRD BQP "
				+ "                          WHERE   BPM.PRD_CODE = BQP.PRODUCT "
				+ "                          AND     BQP.ML = '" + ml_group + "' " + "                         ) PRD  "
				+ "                WHERE   TRX.SLS_SKU_CODE = PRD.PRODUCT "
//								 + "              --AND     BTM.SLS_TRX_TYPE = 'INV'  "
				+ "                AND     ((TRUNC(TRX.SLS_INV_DATE) >= (ADD_MONTHS(TO_DATE('" + from_date1
				+ "','DD-MM-YYYY'),0))  "
				+ "                          AND TRUNC(TRX.SLS_INV_DATE) <= (ADD_MONTHS(TO_DATE('" + to_date1
				+ "','DD-MM-YYYY'),0))) " + "                        )  "
				+ "                AND   BDM.BILL_TO_ID = TRX.SLS_BILL_TO "
				+ "                AND DPM.DEPOT_CODE = BDM.DEPOT_CODE " + "               ) ML_TY "
				+ "        GROUP by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.DLR_AC_NO, "
				+ "                 ML_TY.DLR_AC_NAME, " + "                 ML_TY.DLR_CAT "
				+ "        ORDER by ML_TY.REGN, " + "                 ML_TY.DEPOT_CODE, "
				+ "                 ML_TY.DEPOT_NAME, " + "                 ML_TY.DLR_AC_NO, "
				+ "                 ML_TY.DLR_AC_NAME, " + "                 ML_TY.DLR_CAT "
				+ "       ) ML_DLR_AC_NO_TY ";

		List<MISReport> dmldlracnoty = jdbcTemplate.query(sql14, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_code(rs.getString("DLR_AC_NO"));
				repo.setCust_name(rs.getString("DLR_AC_NAME"));
				repo.setCust_club(rs.getString("DLR_CAT"));
				repo.setTy_vol(rs.getDouble("TY_VOL"));
				repo.setTy_val(rs.getDouble("TY_VAL"));
//							repo.setTotal_scheme_outflow(rs.getDouble("TOT_ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs.getString("DLR_CAT"));
				System.out.println("TY_VOL " + rs.getDouble("TY_VOL"));
				System.out.println("TY_VAL " + rs.getDouble("TY_VAL"));
//							System.out.println("TOT_ADJUST_RW "+rs.getDouble("TOT_ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldlracnoty = new ArrayList<MISReport>();
//					CallableStatement cStmt14;
//					try {
//						cStmt14 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_DLR_AC_NO_TY_OUTFLOW(?,?,?,?)}");
//						cStmt14.setString(1,  ml_group);
//						cStmt14.setString(2,  from_date1);
//						cStmt14.setString(3,  to_date1);
//						cStmt14.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt14.executeQuery();
//						ResultSet rs14 = (ResultSet) cStmt14.getObject(4);
//						while (rs14.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs14.getString("REGN"));
//							repo.setDepot_code(rs14.getString("DEPOT_CODE"));
//							repo.setDepot(rs14.getString("DEPOT_NAME"));
//							repo.setCust_code(rs14.getString("DLR_AC_NO"));
//							repo.setCust_name(rs14.getString("DLR_AC_NAME"));
//							repo.setCust_club(rs14.getString("DLR_CAT"));
//							repo.setTy_vol(rs14.getDouble("TY_VOL"));
//							repo.setTy_val(rs14.getDouble("TY_VAL"));
////							repo.setTotal_scheme_outflow(rs14.getDouble("TOT_ADJUST_RW"));
//							System.out.println("REGN "+rs14.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs14.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs14.getString("DEPOT_NAME"));
//							System.out.println("DLR_AC_NO "+rs14.getString("DLR_AC_NO"));
//							System.out.println("DLR_AC_NAME "+rs14.getString("DLR_AC_NAME"));
//							System.out.println("DLR_CAT "+rs14.getString("DLR_CAT"));
//							System.out.println("TY_VOL "+rs14.getDouble("TY_VOL"));
//							System.out.println("TY_VAL "+rs14.getDouble("TY_VAL"));
////							System.out.println("TOT_ADJUST_RW "+rs14.getDouble("TOT_ADJUST_RW"));
//							   
//							dmldlracnoty.add(repo);
//						}
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("call BPIL_ML_DLR_AC_NO_OUTFLOW");

		String sql15 = "SELECT REGN, " + "       DEPOT_CODE, " + "       DEPOT_NAME, " + "       DLR_AC_NO, "
				+ "       DLR_AC_NAME, " + "       DLR_CAT, " + "       SUM (TOTAL_AMOUNT) ADJUST_RW "
				+ "FROM   (SELECT REGN, " + "               DEPOT_CODE, " + "               DEPOT_NAME, "
				+ "               DLR_AC_NO, " + "               DLR_AC_NAME, " + "               DLR_CAT, "
				+ "               TOTAL_AMOUNT " + "        FROM   (SELECT REGN, "
				+ "                       DEPOT_CODE, " + "                       DEPOT_NAME, "
				+ "                       DLR_AC_NO, " + "                       DLR_AC_NAME, "
				+ "                       DLR_CAT, " + "                       CASE "
				+ "                            WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                                 THEN SUM(TOTAL_AMT) " + "                            ELSE 0 "
				+ "                       END  TOTAL_AMOUNT "
				+ "                FROM   (SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'CN' "
//								 + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//								 + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//								 + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//								 + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//								 + "                      --AND    DPM.REGN = P_REGN "
//								 + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL "
				+ "                        SELECT RW.REWARD_SCHEME_ID SCHEME_ID , "
				+ "                               RW.REWARD_DLR_BILL_TO CUST_BILL_TO , "
				+ "                               SUBSTR(RW.REWARD_DLR_DEPOT,1,3) CUST_DEPOT_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_CONVERTED_CN "
				+ "                               END  TOTAL_AMT "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 <> 'R' "
//                             + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                             + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//                             + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//                             + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                             + "                      --AND    DPM.REGN = P_REGN "
//                             + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       ) " + "                GROUP BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         DLR_AC_NO, " + "                         DLR_AC_NAME, "
				+ "                         DLR_CAT " + "                ORDER BY REGN, "
				+ "                         DEPOT_CODE, " + "                         DEPOT_NAME, "
				+ "                         DLR_AC_NO, " + "                         DLR_AC_NAME, "
				+ "                         DLR_CAT " + "               ) " + "        UNION ALL "
				+ "        SELECT REGN, " + "               DEPOT_CODE, " + "               DEPOT_NAME, "
				+ "               DLR_AC_NO, " + "               DLR_AC_NAME, " + "               DLR_CAT, "
				+ "               CASE " + "                    WHEN SUM(TOTAL_AMT) IS NOT NULL "
				+ "                         THEN SUM(TOTAL_AMT) " + "                    ELSE 0 "
				+ "               END  TOTAL_AMOUNT " + "        FROM   (SELECT REGN, "
				+ "                       DEPOT_CODE, " + "                       DEPOT_NAME, "
				+ "                       DLR_AC_NO, " + "                       DLR_AC_NAME, "
				+ "                       DLR_CAT, " + "                       TOTAL_QTY * GIFT_PRICE TOTAL_AMT "
				+ "                FROM   (SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT , "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'N' "
//                             + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                             + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//                             + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//                             + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                             + "                      --AND    DPM.REGN = P_REGN "
//                             + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                        UNION ALL " + "                        SELECT BSM.SCHEME_ID SCHEME_ID , "
				+ "                               BSM.SCHEME_NAME SCHEME_NAME , "
				+ "                               RW.REWARD_DLR_DEPOT, "
				+ "                               RW.REWARD_DLR_CODE CUST_CODE , "
				+ "                               DPM.REGN, " + "                               DPM.DEPOT_CODE, "
				+ "                               DPM.DEPOT_NAME, " + "                               BDM.DLR_AC_NO, "
				+ "                               BDM.DLR_AC_NAME, " + "                               BDM.DLR_CAT, "
				+ "                               BGM.GIFT_GROUP GIFT_TYPE , "
				+ "                               BGM.GIFT_CODE GIFT_CODE , "
				+ "                               RW.REWARD_DESCRIPTION REWARD_DESCRIPTION , "
				+ "                               BGM.GIFT_NAME GIFT_NAME , "
				+ "                               BGM.EFFECTIVE_PRICE GIFT_PRICE , "
				+ "                               RW.REWARD_GIFT_ID GIFT_ID , " + "                               CASE "
				+ "                                    WHEN (RW.ATTRIBUTE1 = 'Y' "
				+ "                                            OR RW.ATTRIBUTE1 = 'A') "
				+ "                                                 AND RW.REWARD_ADJUSTMENTS > 0 "
				+ "                                         THEN RW.REWARD_ADJUSTMENTS "
				+ "                                    ELSE RW.REWARD_TOTAL "
				+ "                               END  TOTAL_QTY "
				+ "                        FROM   BPIL_OPA_RW_ANALYSIS_RW RW , "
				+ "                               BPIL_SCHEME_MASTER BSM, "
				+ "                               BPIL_GIFT_MASTER BGM, "
				+ "                               BPIL_DEALER_MASTER_NEW BDM "
				+ "                               ,BPIL_DEPOT_MASTER DPM "
				+ "                        WHERE  RW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
				+ "                        AND    RW.REWARD_I_STATUS = 'P' "
				+ "                        AND    UPPER(RW.REWARD_TYPE) = 'GIFT' "
				+ "                        AND    RW.REWARD_GIFT_ID IS NOT NULL "
				+ "                        AND    BGM.GIFT_ID = RW.REWARD_GIFT_ID "
				+ "                        AND    RW.REWARD_GIFT_TO_CN = 'Y' "
				+ "                        AND    RW.ATTRIBUTE1 = 'R' "
//                             + "                      --AND    BSM.ACTIVE_FLAG = 'Closed' "
//                             + "                      --AND    BSM.SCHEME_ID = P_SCHEME_ID "
				+ "                        AND    BSM.SCHEME_BUSINESS_LINE = '" + ml_group + "' "
				+ "                        AND    ((TRUNC(BSM.START_DATE) >= (TO_DATE('" + from_date1
				+ "','DD-MM-YYYY')))   " + "                                 AND (TRUNC(BSM.END_DATE) <= (TO_DATE('"
				+ to_date1 + "','DD-MM-YYYY'))) " + "                               ) "
				+ "                        AND    BDM.BILL_TO_ID = RW.REWARD_DLR_BILL_TO "
//                             + "                      --AND    BDM.DLR_AC_NO = P_DLR_AC_NO "
//                             + "                      --AND    BDM.DLR_CAT = P_DLR_CAT "
				+ "                        AND    DPM.DEPOT_CODE = BDM.DEPOT_CODE "
//                             + "                      --AND    DPM.REGN = P_REGN "
//                             + "                      --AND    DPM.DEPOT_CODE = P_DEPOT_CODE "
				+ "                       ) " + "               ) " + "        GROUP BY REGN, "
				+ "                 DEPOT_CODE, " + "                 DEPOT_NAME, " + "                 DLR_AC_NO, "
				+ "                 DLR_AC_NAME, " + "                 DLR_CAT " + "        ORDER BY REGN, "
				+ "                 DEPOT_CODE, " + "                 DEPOT_NAME, " + "                 DLR_AC_NO, "
				+ "                 DLR_AC_NAME, " + "                 DLR_CAT " + "       ) " + "GROUP BY REGN, "
				+ "         DEPOT_CODE, " + "         DEPOT_NAME, " + "         DLR_AC_NO, " + "         DLR_AC_NAME, "
				+ "         DLR_CAT " + "ORDER BY REGN, " + "         DEPOT_CODE, " + "         DEPOT_NAME, "
				+ "         DLR_AC_NO, " + "         DLR_AC_NAME, " + "         DLR_CAT ";

		List<MISReport> dmldlracnoout = jdbcTemplate.query(sql15, new RowMapper<MISReport>() {

			@Override
			public MISReport mapRow(ResultSet rs, int rowNum) throws SQLException {
				MISReport repo = new MISReport();
				repo.setRegn(rs.getString("REGN"));
				repo.setDepot_code(rs.getString("DEPOT_CODE"));
				repo.setDepot(rs.getString("DEPOT_NAME"));
				repo.setCust_code(rs.getString("DLR_AC_NO"));
				repo.setCust_name(rs.getString("DLR_AC_NAME"));
				repo.setCust_club(rs.getString("DLR_CAT"));
				repo.setTotal_scheme_outflow(rs.getDouble("ADJUST_RW"));
				System.out.println("REGN " + rs.getString("REGN"));
				System.out.println("DEPOT_CODE " + rs.getString("DEPOT_CODE"));
				System.out.println("DEPOT_NAME " + rs.getString("DEPOT_NAME"));
				System.out.println("DLR_AC_NO " + rs.getString("DLR_AC_NO"));
				System.out.println("DLR_AC_NAME " + rs.getString("DLR_AC_NAME"));
				System.out.println("DLR_CAT " + rs.getString("DLR_CAT"));
				System.out.println("ADJUST_RW " + rs.getDouble("ADJUST_RW"));

				return repo;
			}

		});

//					List<MISReport> dmldlracnoout = new ArrayList<MISReport>();
//					CallableStatement cStmt15;
//					try {
//						cStmt15 = hibernateConfiguration.dataSource().getConnection()
//									.prepareCall("{call BPIL_ML_DLR_AC_NO_OUTFLOW(?,?,?,?)}");
//						cStmt15.setString(1,  ml_group );
//						cStmt15.setString(2,  from_date1 );
//						cStmt15.setString(3,  to_date1 );
//						cStmt15.registerOutParameter(4, OracleTypes.CURSOR);
//						ResultSet result = cStmt15.executeQuery();
//						ResultSet rs15 = (ResultSet) cStmt15.getObject(4);
//						while (rs15.next()) {
//							MISReport repo = new MISReport();
//							repo.setRegn(rs15.getString("REGN"));
//							repo.setDepot_code(rs15.getString("DEPOT_CODE"));
//							repo.setDepot(rs15.getString("DEPOT_NAME"));
//							repo.setCust_code(rs15.getString("DLR_AC_NO"));
//							repo.setCust_name(rs15.getString("DLR_AC_NAME"));
//							repo.setCust_club(rs15.getString("DLR_CAT"));
//							repo.setTotal_scheme_outflow(rs15.getDouble("ADJUST_RW"));
//							System.out.println("REGN "+rs15.getString("REGN"));
//							System.out.println("DEPOT_CODE "+rs15.getString("DEPOT_CODE"));
//							System.out.println("DEPOT_NAME "+rs15.getString("DEPOT_NAME"));
//							System.out.println("DLR_AC_NO "+rs15.getString("DLR_AC_NO"));
//							System.out.println("DLR_AC_NAME "+rs15.getString("DLR_AC_NAME"));
//							System.out.println("DLR_CAT "+rs15.getString("DLR_CAT"));
//							System.out.println("ADJUST_RW "+rs15.getDouble("ADJUST_RW"));
//							
//							dmldlracnoout.add(repo);
//						}
//								
//					} catch (SQLException e) {
//						e.printStackTrace();
//					}
//					catch (Exception e) {
//						System.out.println(e.getMessage());
//					}

		System.out.println("dlr outflow");

		List<MISReport> dist_Regn_depo_Cust_code = new ArrayList<>();
		for (int i = 0; i < dmldlracnoly.size(); i++) {
			MISReport Regn_depo_Cust_code = new MISReport();
			Regn_depo_Cust_code.setRegn(dmldlracnoly.get(i).getRegn());
			Regn_depo_Cust_code.setDepot_code(dmldlracnoly.get(i).getDepot_code());
			Regn_depo_Cust_code.setDepot(dmldlracnoly.get(i).getDepot());
			Regn_depo_Cust_code.setCust_code(dmldlracnoly.get(i).getCust_code());
			Regn_depo_Cust_code.setCust_name(dmldlracnoly.get(i).getCust_name());
			Regn_depo_Cust_code.setCust_club(dmldlracnoly.get(i).getCust_club());
			dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
		}

		for (int i = 0; i < dmldlracnoty.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoty.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoty.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoty.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoty.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoty.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoty.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoty.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoty.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoty.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoty.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		for (int i = 0; i < dmldlracnoout.size(); i++) {
			Boolean match = false;
			for (int j = 0; j < dist_Regn_depo_Cust_code.size(); j++) {
				if (dmldlracnoout.get(i).getRegn().equals(dist_Regn_depo_Cust_code.get(j).getRegn())
						&& dmldlracnoout.get(i).getDepot_code().equals(dist_Regn_depo_Cust_code.get(j).getDepot_code())
						&& dmldlracnoout.get(i).getCust_code().equals(dist_Regn_depo_Cust_code.get(j).getCust_code())
						&& dmldlracnoout.get(i).getCust_club().equals(dist_Regn_depo_Cust_code.get(j).getCust_club())) {
					match = true;
				}
			}
			if (match == false) {
				MISReport Regn_depo_Cust_code = new MISReport();
				Regn_depo_Cust_code.setRegn(dmldlracnoout.get(i).getRegn());
				Regn_depo_Cust_code.setDepot_code(dmldlracnoout.get(i).getDepot_code());
				Regn_depo_Cust_code.setDepot(dmldlracnoout.get(i).getDepot());
				Regn_depo_Cust_code.setCust_code(dmldlracnoout.get(i).getCust_code());
				Regn_depo_Cust_code.setCust_name(dmldlracnoout.get(i).getCust_name());
				Regn_depo_Cust_code.setCust_club(dmldlracnoout.get(i).getCust_club());
				dist_Regn_depo_Cust_code.add(Regn_depo_Cust_code);
			}
		}

		List<MISReport> dmldlracnooutflow = new ArrayList<>();

		for (int k = 0; k < dist_Regn_depo_Cust_code.size(); k++) {
			MISReport repo = new MISReport();
			repo.setRegn(dist_Regn_depo_Cust_code.get(k).getRegn());
			repo.setDepot_code(dist_Regn_depo_Cust_code.get(k).getDepot_code());
			repo.setDepot(dist_Regn_depo_Cust_code.get(k).getDepot());
			repo.setCust_code(dist_Regn_depo_Cust_code.get(k).getCust_code());
			repo.setCust_name(dist_Regn_depo_Cust_code.get(k).getCust_name());
			repo.setCust_club(dist_Regn_depo_Cust_code.get(k).getCust_club());
			for (int i = 0; i < dmldlracnoly.size(); i++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoly.get(i).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoly.get(i).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoly.get(i).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoly.get(i).getCust_club())) {
					repo.setLy_vol(dmldlracnoly.get(i).getLy_vol());
					repo.setLy_val(dmldlracnoly.get(i).getLy_val());
				}
			}
			for (int j = 0; j < dmldlracnoty.size(); j++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoty.get(j).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoty.get(j).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoty.get(j).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoty.get(j).getCust_club())) {

					repo.setTy_vol(dmldlracnoty.get(j).getTy_vol());
					repo.setTy_val(dmldlracnoty.get(j).getTy_val());
//								repo.setTotal_scheme_outflow(dmldlracnoty.get(j).getTotal_scheme_outflow());

				}

			}
			for (int l = 0; l < dmldlracnoout.size(); l++) {
				if (dist_Regn_depo_Cust_code.get(k).getRegn().equals(dmldlracnoout.get(l).getRegn())
						&& dist_Regn_depo_Cust_code.get(k).getDepot_code().equals(dmldlracnoout.get(l).getDepot_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_code().equals(dmldlracnoout.get(l).getCust_code())
						&& dist_Regn_depo_Cust_code.get(k).getCust_club().equals(dmldlracnoout.get(l).getCust_club())) {

					repo.setTotal_scheme_outflow(dmldlracnoout.get(l).getTotal_scheme_outflow());

				}

			}

			Double volgrdml = 0.0;
			if (repo.getLy_vol() > 0.0) {
				volgrdml = ((repo.getTy_vol() - repo.getLy_vol()) / repo.getLy_vol()) * 100;
			} else if (repo.getLy_vol() == 0.0 && repo.getTy_vol() > 0.0) {
				volgrdml = 100.0;
			}
			Double valgrdml = 0.0;
			if (repo.getLy_val() > 0.0) {
				valgrdml = ((repo.getTy_val() - repo.getLy_val()) / repo.getLy_val()) * 100;
			} else if (repo.getLy_val() == 0.0 && repo.getTy_val() > 0.0) {
				valgrdml = 100.0;
			}

			repo.setVol_gr(Math.round(volgrdml * 100.0) / 100.0);
			repo.setVal_gr(Math.round(valgrdml * 100.0) / 100.0);

			dmldlracnooutflow.add(repo);
		}

		System.out.println("MIS Report");

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("MIS Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		// Scheme Outflow details
		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("TY Vol");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 2500);

		cell = row.createCell(2);
		cell.setCellValue("Vol GR%");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 6000);

		cell = row.createCell(3);
		cell.setCellValue("LY Val");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 7000);

		cell = row.createCell(4);
		cell.setCellValue("TY Val");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 4000);

		cell = row.createCell(5);
		cell.setCellValue("Val GR%");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 6000);

		cell = row.createCell(6);
		cell.setCellValue("Total Scheme Outflow");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 2000);

		int j = 1;

		Iterator<MISReport> itr = dmlmloutflow.iterator();
		while (itr.hasNext()) {
			MISReport ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getLy_vol());

			cell = row.createCell(1);
			cell.setCellValue(ex.getTy_vol());

			cell = row.createCell(2);
			cell.setCellValue(ex.getVol_gr());

			cell = row.createCell(3);
			cell.setCellValue(ex.getLy_val());

			cell = row.createCell(4);
			cell.setCellValue(ex.getTy_val());

			cell = row.createCell(5);
			cell.setCellValue(ex.getVal_gr());

			cell = row.createCell(6);
			cell.setCellValue(ex.getTotal_scheme_outflow());

			j++;
		}

		// Club Outflow details
		XSSFRow row1 = spreadsheet.createRow(j + 2);
		XSSFCell cell1;

		cell1 = row1.createCell(0);
		cell1.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell1 = row1.createCell(1);
		cell1.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell1 = row1.createCell(2);
		cell1.setCellValue("TY Vol");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 2500);

		cell1 = row1.createCell(3);
		cell1.setCellValue("Vol GR%");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 6000);

		cell1 = row1.createCell(4);
		cell1.setCellValue("LY Val");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 7000);

		cell1 = row1.createCell(5);
		cell1.setCellValue("TY Val");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 4000);

		cell1 = row1.createCell(6);
		cell1.setCellValue("Val GR%");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell1 = row1.createCell(7);
		cell1.setCellValue("Total Scheme Outflow");
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 2000);

		int j1 = j + 3;

		Iterator<MISReport> itr1 = dmlcustoutflow.iterator();
		while (itr1.hasNext()) {
			MISReport ex = itr1.next();

			row1 = spreadsheet.createRow(j1);

			cell1 = row1.createCell(0);
			cell1.setCellValue(ex.getCust_club());

			cell1 = row1.createCell(1);
			cell1.setCellValue(ex.getLy_vol());

			cell1 = row1.createCell(2);
			cell1.setCellValue(ex.getTy_vol());

			cell1 = row1.createCell(3);
			cell1.setCellValue(ex.getVol_gr());

			cell1 = row1.createCell(4);
			cell1.setCellValue(ex.getLy_val());

			cell1 = row1.createCell(5);
			cell1.setCellValue(ex.getTy_val());

			cell1 = row1.createCell(6);
			cell1.setCellValue(ex.getVal_gr());

			cell1 = row1.createCell(7);
			cell1.setCellValue(ex.getTotal_scheme_outflow());

			j1++;
		}

		// Regn Outflow details
		XSSFRow row2 = spreadsheet.createRow(j1 + 2);
		XSSFCell cell2;

		cell2 = row2.createCell(0);
		cell2.setCellValue("Regn");
		cellstyle.setLocked(true);
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell2 = row2.createCell(1);
		cell2.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell2 = row2.createCell(2);
		cell2.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 3200);

		cell2 = row2.createCell(3);
		cell2.setCellValue("TY Vol");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 2500);

		cell2 = row2.createCell(4);
		cell2.setCellValue("Vol GR%");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 6000);

		cell2 = row2.createCell(5);
		cell2.setCellValue("LY Val");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 7000);

		cell2 = row2.createCell(6);
		cell2.setCellValue("TY Val");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 4000);

		cell2 = row2.createCell(7);
		cell2.setCellValue("Val GR%");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 6000);

		cell2 = row2.createCell(8);
		cell2.setCellValue("Total Scheme Outflow");
		cell2.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 2000);

		int j2 = j1 + 3;

		Iterator<MISReport> itr2 = dmlregnoutflow.iterator();
		while (itr2.hasNext()) {
			MISReport ex = itr2.next();

			row2 = spreadsheet.createRow(j2);

			cell2 = row2.createCell(0);
			cell2.setCellValue(ex.getRegn());

			cell2 = row2.createCell(1);
			cell2.setCellValue(ex.getCust_club());

			cell2 = row2.createCell(2);
			cell2.setCellValue(ex.getLy_vol());

			cell2 = row2.createCell(3);
			cell2.setCellValue(ex.getTy_vol());

			cell2 = row2.createCell(4);
			cell2.setCellValue(ex.getVol_gr());

			cell2 = row2.createCell(5);
			cell2.setCellValue(ex.getLy_val());

			cell2 = row2.createCell(6);
			cell2.setCellValue(ex.getTy_val());

			cell2 = row2.createCell(7);
			cell2.setCellValue(ex.getVal_gr());

			cell2 = row2.createCell(8);
			cell2.setCellValue(ex.getTotal_scheme_outflow());

			j2++;
		}

		// Depot Outflow details
		XSSFRow row3 = spreadsheet.createRow(j2 + 2);
		XSSFCell cell3;

		cell3 = row3.createCell(0);
		cell3.setCellValue("Regn");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell3 = row3.createCell(1);
		cell3.setCellValue("Depot");
		cellstyle.setLocked(true);
		cell1.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell3 = row3.createCell(2);
		cell3.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 3200);

		cell3 = row3.createCell(3);
		cell3.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 3200);

		cell3 = row3.createCell(4);
		cell3.setCellValue("TY Vol");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 2500);

		cell3 = row3.createCell(5);
		cell3.setCellValue("Vol GR%");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 6000);

		cell3 = row3.createCell(6);
		cell3.setCellValue("LY Val");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 7000);

		cell3 = row3.createCell(7);
		cell3.setCellValue("TY Val");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 4000);

		cell3 = row3.createCell(8);
		cell3.setCellValue("Val GR%");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 6000);

		cell3 = row3.createCell(9);
		cell3.setCellValue("Total Scheme Outflow");
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 2000);

		int j3 = j2 + 3;

		Iterator<MISReport> itr3 = dmldepooutflow.iterator();
		while (itr3.hasNext()) {
			MISReport ex = itr3.next();

			row3 = spreadsheet.createRow(j3);

			cell3 = row3.createCell(0);
			cell3.setCellValue(ex.getRegn());

			cell3 = row3.createCell(1);
			cell3.setCellValue(ex.getDepot());

			cell3 = row3.createCell(2);
			cell3.setCellValue(ex.getCust_club());

			cell3 = row3.createCell(3);
			cell3.setCellValue(ex.getLy_vol());

			cell3 = row3.createCell(4);
			cell3.setCellValue(ex.getTy_vol());

			cell3 = row3.createCell(5);
			cell3.setCellValue(ex.getVol_gr());

			cell3 = row3.createCell(6);
			cell3.setCellValue(ex.getLy_val());

			cell3 = row3.createCell(7);
			cell3.setCellValue(ex.getTy_val());

			cell3 = row3.createCell(8);
			cell3.setCellValue(ex.getVal_gr());

			cell3 = row3.createCell(9);
			cell3.setCellValue(ex.getTotal_scheme_outflow());

			j3++;
		}

		// Cust Outflow details
		XSSFRow row4 = spreadsheet.createRow(j3 + 2);
		XSSFCell cell4;

		cell4 = row4.createCell(0);
		cell4.setCellValue("Regn");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell4 = row4.createCell(1);
		cell4.setCellValue("Depot");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3200);

		cell4 = row4.createCell(2);
		cell4.setCellValue("Cust Code");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 3200);

		cell4 = row4.createCell(3);
		cell4.setCellValue("Cust Name");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 3200);

		cell4 = row4.createCell(4);
		cell4.setCellValue("Cust Club");
		cellstyle.setLocked(true);
		cell3.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 3200);

		cell4 = row4.createCell(5);
		cell4.setCellValue("LY Vol");
		cellstyle.setLocked(true);
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 3200);

		cell4 = row4.createCell(6);
		cell4.setCellValue("TY Vol");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 2500);

		cell4 = row4.createCell(7);
		cell4.setCellValue("Vol GR%");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 6000);

		cell4 = row4.createCell(8);
		cell4.setCellValue("LY Val");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 7000);

		cell4 = row4.createCell(9);
		cell4.setCellValue("TY Val");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(9, 4000);

		cell4 = row4.createCell(10);
		cell4.setCellValue("Val GR%");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(10, 6000);

		cell4 = row4.createCell(11);
		cell4.setCellValue("Total Scheme Outflow");
		cell4.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(11, 2000);

		int j4 = j3 + 3;

		Iterator<MISReport> itr4 = dmldlracnooutflow.iterator();
		while (itr4.hasNext()) {
			MISReport ex = itr4.next();

			row4 = spreadsheet.createRow(j4);

			cell4 = row4.createCell(0);
			cell4.setCellValue(ex.getRegn());

			cell4 = row4.createCell(1);
			cell4.setCellValue(ex.getDepot());

			cell4 = row4.createCell(2);
			cell4.setCellValue(ex.getCust_code());

			cell4 = row4.createCell(3);
			cell4.setCellValue(ex.getCust_name());

			cell4 = row4.createCell(4);
			cell4.setCellValue(ex.getCust_club());

			cell4 = row4.createCell(5);
			cell4.setCellValue(ex.getLy_vol());

			cell4 = row4.createCell(6);
			cell4.setCellValue(ex.getTy_vol());

			cell4 = row4.createCell(7);
			cell4.setCellValue(ex.getVol_gr());

			cell4 = row4.createCell(8);
			cell4.setCellValue(ex.getLy_val());

			cell4 = row4.createCell(9);
			cell4.setCellValue(ex.getTy_val());

			cell4 = row4.createCell(10);
			cell4.setCellValue(ex.getVal_gr());

			cell4 = row4.createCell(11);
			cell4.setCellValue(ex.getTotal_scheme_outflow());

			j4++;
		}

		try {
			// to upload excel file
			String filename = "MIS Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//	      		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "MIS Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	                response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	                FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	                FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	                FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("ML_Group", ml_group);
		model.addAttribute("datepicker", from_date);
		model.addAttribute("datepicker1", to_date);

		return new ModelAndView("MISReport");
	}

	// Generate reward analysis report
	@RequestMapping("/generateRewardAnalysisReport")
	public ModelAndView generateRewardAnalysisReport(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request) {
//		    	  if(scheme_name != null && scheme_name != "") {
//		          int scheme_id = Integer.parseInt(scheme_name);
//		          if(bill_to_id != null && bill_to_id != "") {
//		          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//		          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//		+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//		+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//		+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//		          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//		                +"  BPIL_SCHEME_MASTER BSM,"
//		                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		               +"   BPIL_DEALER_MASTER BDM "
//		          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//		          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//		          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//		          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//		          String sql = "SELECT BORAW.* "
//		      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//		      			                +"  BPIL_SCHEME_MASTER BSM,"
//		      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		      			               +"   BPIL_DEALER_MASTER BDM "
//		      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//		      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//		      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//		      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//		          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//		          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = (select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"') "
//		          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////		          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//		        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		        		  	+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//		        		  	+" AND OPA_RW_AN_DEALER_ID = '"+dealer_name+""+depot_code+"' "
//		        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String OPA_RW_AN_DEALER_ID = "";
		if (!dealer_name.equals("")) {
			OPA_RW_AN_DEALER_ID = dealer_name + depot_code;
		}

		String sql = "   SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + "WHERE REWARD_SCHEME_ID = '" + scheme_name + "'"
				+ " AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3)) = NVL('" + depot_code + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3))"
				+ "AND OPA_RW_AN_DEALER_ID = NVL('" + OPA_RW_AN_DEALER_ID + "', OPA_RW_AN_DEALER_ID)"
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' order by OPA_RW_AN_REWARD_ID";

//		          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//		              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//		            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//		aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//		                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//		                  aContact.setRegn(rs.getString("REGN"));
//		aContact.setTerr_code(rs.getString("TERR_CODE"));
//		aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//		                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//		aContact.setDlr_type(rs.getString("DLR_TYPE"));
//		aContact.setReward_section(rs.getString("REWARD_SECTION"));
//		aContact.setReward_type(rs.getString("REWARD_TYPE"));
//		                  aContact.setProduct(rs.getString("PRODUCT"));
//
//		                  aContact.setUnit(rs.getString("UNIT"));
//		aContact.setReward_date(rs.getDate("REWARD_DATE"));
//		aContact.setReward_ly(rs.getInt("REWARD_LY"));
//		aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//		aContact.setReward_ty(rs.getInt("REWARD_TY"));
//		aContact.setAdditional(rs.getInt("ADDITIONAL"));
//		aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//		aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//		aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//		aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//		aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//		aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//		aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//		aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//		aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//			try {
//				System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				String adjustmentStatus = rs.getString("ATTRIBUTE1");
				if (adjustmentStatus != null || adjustmentStatus == "") {
					if (adjustmentStatus.equalsIgnoreCase("A")) {
						aContact.setAttribute1("Approved");
					} else if (adjustmentStatus.equalsIgnoreCase("R")) {
						aContact.setAttribute1("Rejected");
					} else if (adjustmentStatus.equalsIgnoreCase("Y")) {
						aContact.setAttribute1("Pending");
					}
				} else {
					aContact.setAttribute1("NO_EXCP");
				}

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//			try {
////				System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ scheme_name + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		model.addAttribute("Info_grid", dml);

		model.addAttribute("LastRefresh", LastRefresh);

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
//		          }
		model.addAttribute("scheme_id", scheme_name);
//		    	  }
		return new ModelAndView("RewardAnalysisReport");
	}

	// download reward analysis report
	@RequestMapping("/downloadRewardAnalysisReport")
	public ModelAndView downloadRewardAnalysisReport(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request, HttpServletResponse response) {
//		    	  if(scheme_name != null && scheme_name != "") {
//		          int scheme_id = Integer.parseInt(scheme_name);
//		          if(bill_to_id != null && bill_to_id != "") {
//		          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//		          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//		+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//		+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//		+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//		          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//		                +"  BPIL_SCHEME_MASTER BSM,"
//		                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		               +"   BPIL_DEALER_MASTER BDM "
//		          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//		          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//		          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//		          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//		          String sql = "SELECT BORAW.* "
//		      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//		      			                +"  BPIL_SCHEME_MASTER BSM,"
//		      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		      			               +"   BPIL_DEALER_MASTER BDM "
//		      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//		      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//		      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//		      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//		          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//		          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = (select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"') "
//		          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////		          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//		        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		        		  	+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//		        		  	+" AND OPA_RW_AN_DEALER_ID = '"+dealer_name+""+depot_code+"' "
//		        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String OPA_RW_AN_DEALER_ID = "";
		if (!dealer_name.equals("")) {
			OPA_RW_AN_DEALER_ID = dealer_name + depot_code;
		}

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + "WHERE REWARD_SCHEME_ID = '" + scheme_name + "'"
				+ " AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3)) = NVL('" + depot_code + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3))"
				+ "AND OPA_RW_AN_DEALER_ID = NVL('" + OPA_RW_AN_DEALER_ID + "', OPA_RW_AN_DEALER_ID)"
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' order by OPA_RW_AN_REWARD_ID";

//		          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//		              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//		            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//		aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//		                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//		                  aContact.setRegn(rs.getString("REGN"));
//		aContact.setTerr_code(rs.getString("TERR_CODE"));
//		aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//		                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//		aContact.setDlr_type(rs.getString("DLR_TYPE"));
//		aContact.setReward_section(rs.getString("REWARD_SECTION"));
//		aContact.setReward_type(rs.getString("REWARD_TYPE"));
//		                  aContact.setProduct(rs.getString("PRODUCT"));
//
//		                  aContact.setUnit(rs.getString("UNIT"));
//		aContact.setReward_date(rs.getDate("REWARD_DATE"));
//		aContact.setReward_ly(rs.getInt("REWARD_LY"));
//		aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//		aContact.setReward_ty(rs.getInt("REWARD_TY"));
//		aContact.setAdditional(rs.getInt("ADDITIONAL"));
//		aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//		aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//		aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//		aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//		aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//		aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//		aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//		aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//		aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//			try {
//				System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				String adjustmentStatus = rs.getString("ATTRIBUTE1");
				if (adjustmentStatus != null || adjustmentStatus == "") {
					if (adjustmentStatus.equalsIgnoreCase("A")) {
						aContact.setAttribute1("Approved");
					} else if (adjustmentStatus.equalsIgnoreCase("R")) {
						aContact.setAttribute1("Rejected");
					} else if (adjustmentStatus.equalsIgnoreCase("Y")) {
						aContact.setAttribute1("Pending");
					}
				} else {
					aContact.setAttribute1("NO_EXCP");
				}

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//			try {
////				System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				return aContact;
			}

		});

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Reward Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		CellStyle cellstyle1 = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
		cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

		cell = row.createCell(0);
		cell.setCellValue("DEPO");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("A/C NO");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(1, 2500);

		cell = row.createCell(2);
		cell.setCellValue("A/C NAME");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(2, 6000);

		cell = row.createCell(3);
		cell.setCellValue("REWARD SECTION");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(3, 7000);

		cell = row.createCell(4);
		cell.setCellValue("REWARD TYPE");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(4, 4000);

		cell = row.createCell(5);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(5, 6000);

		cell = row.createCell(6);
		cell.setCellValue("UNIT");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(6, 2000);

		cell = row.createCell(7);
		cell.setCellValue("REWARD DATE");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("LY");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(8, 2000);

		cell = row.createCell(9);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(9, 2200);

		cell = row.createCell(10);
		cell.setCellValue("TY");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("TGT PENDING");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(11, 3000);

		cell = row.createCell(12);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(12, 2200);

		cell = row.createCell(13);
		cell.setCellValue("REWARD DESC");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("ACTUAL");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(14, 2500);

		cell = row.createCell(15);
		cell.setCellValue("REQUESTED");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(15, 3100);

		cell = row.createCell(16);
		cell.setCellValue("ADJUSTMENT REASON");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(16, 5000);

		cell = row.createCell(17);
		cell.setCellValue("GIFT TO CN");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(17, 3000);

		cell = row.createCell(18);
		cell.setCellValue("CONVERTED CN VALUE");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(18, 3500);

		cell = row.createCell(19);
		cell.setCellValue("ADJUSTMENT FLAG");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(19, 3500);

		int j = 1;

		Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Rw_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			XSSFCellStyle style = workbook.createCellStyle();
			if (ex.getReward_color() != null && ex.getReward_color() != "") {
				int r = Integer.valueOf(ex.getReward_color().substring(1, 3), 16);
				int g = Integer.valueOf(ex.getReward_color().substring(3, 5), 16);
				int b = Integer.valueOf(ex.getReward_color().substring(5, 7), 16);

				style.setFillForegroundColor(new XSSFColor(new java.awt.Color(r, g, b)));
				style.setFillPattern(CellStyle.SOLID_FOREGROUND);
			}

			cell = row.createCell(0);
			cell.setCellValue(ex.getDepot());
			cell.setCellStyle(style);

			cell = row.createCell(1);
			cell.setCellValue(ex.getDlr_ac_no());
			cell.setCellStyle(style);

			cell = row.createCell(2);
			cell.setCellValue(ex.getDlr_name());
			cell.setCellStyle(style);

			cell = row.createCell(3);
			cell.setCellValue(ex.getReward_section());
			cell.setCellStyle(style);

			cell = row.createCell(4);
			cell.setCellValue(ex.getReward_type());
			cell.setCellStyle(style);

			cell = row.createCell(5);
			cell.setCellValue(ex.getProduct());
			cell.setCellStyle(style);

			cell = row.createCell(6);
			cell.setCellValue(ex.getUnit());
			cell.setCellStyle(style);

			cell = row.createCell(7);
			cell.setCellValue(ex.getReward_date1());
			cell.setCellStyle(style);

			cell = row.createCell(8);
			cell.setCellValue(ex.getReward_ly());
			cell.setCellStyle(style);

			cell = row.createCell(9);
			cell.setCellValue(ex.getReward_target());
			cell.setCellStyle(style);

			cell = row.createCell(10);
			cell.setCellValue(ex.getReward_ty());
			cell.setCellStyle(style);

			cell = row.createCell(11);
			cell.setCellValue(ex.getNext_tgt_pending());
			cell.setCellStyle(style);

			cell = row.createCell(12);
			cell.setCellValue(ex.getReward_status());
			cell.setCellStyle(style);

			cell = row.createCell(13);
			cell.setCellValue(ex.getReward_description());
			cell.setCellStyle(style);

			cell = row.createCell(14);
			cell.setCellValue(ex.getReward_total());
			cell.setCellStyle(style);

			cell = row.createCell(15);
			cell.setCellValue(ex.getAdjustments());
			cell.setCellStyle(style);

			cell = row.createCell(16);
			cell.setCellValue(ex.getAdjustment_reason());
			cell.setCellStyle(style);

			cell = row.createCell(17);
			cell.setCellValue(ex.getGift_to_cn_flag());
			cell.setCellStyle(style);

			cell = row.createCell(18);
			cell.setCellValue(ex.getConverted_cn_value());
			cell.setCellStyle(style);

			if (ex.getReward_section().equalsIgnoreCase("TOTAL")) {
				cell = row.createCell(19);
				cell.setCellValue(ex.getAttribute1());
				cell.setCellStyle(style);
			}

			j++;
		}

		try {
			// to upload excel file
			String filename = "Reward Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//	      		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Reward Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	                response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	                FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	                FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	                FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
		model.addAttribute("scheme_id", scheme_name);

		return new ModelAndView("RewardAnalysisReport");
	}

	// Generate Budget VS Actual report
	@RequestMapping("/generateBudgetVsActualReport")
	public ModelAndView generateBudgetVsActualReport(@RequestParam(value = "scheme_name") String scheme_name,
			ModelMap map, Model model, HttpServletRequest request) {

		System.out.println("scheme_id _____________________________________________________" + scheme_name);

		List<BudgetVsActual> dml = new ArrayList<>();
		CallableStatement cStmt;
		try {
			cStmt = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_BUDGET_VS_ACTUAL_RW(?,?)}");
			cStmt.setInt(1, Integer.parseInt(scheme_name));
			cStmt.registerOutParameter(2, OracleTypes.CURSOR);
			ResultSet result = cStmt.executeQuery();
			ResultSet rs1 = (ResultSet) cStmt.getObject(2);
			while (rs1.next()) {
				BudgetVsActual aContact = new BudgetVsActual();

				aContact.setReport_month(rs1.getString(1));
				aContact.setMl_business_line(rs1.getString(2));
				aContact.setScheme_code(rs1.getString(3));
				aContact.setScheme_name(rs1.getString(4));
				aContact.setBudget(rs1.getFloat(5));
				aContact.setExpense_before_exception(rs1.getFloat(6));
				aContact.setExpense_after_exception(rs1.getFloat(7));
				aContact.setVariance_from_budget_before_exception(rs1.getFloat(8));
				aContact.setVariance_from_budget_after_exception(rs1.getFloat(9));

				dml.add(aContact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		model.addAttribute("Info_grid", dml);

//		          }
		model.addAttribute("scheme_id", scheme_name);
//		    	  }
		return new ModelAndView("BudgetVsActualReport");
	}

	// download depo reward analysis report
	@RequestMapping("/downloadBudgetVsActualReport")
	public ModelAndView downloadBudgetVsActualReport(@RequestParam(value = "scheme_name") String scheme_name,
			ModelMap map, Model model, HttpServletRequest request, HttpServletResponse response) {

		System.out.println("scheme_id _____________________________________________________" + scheme_name);

		List<BudgetVsActual> dml = new ArrayList<>();
		CallableStatement cStmt;
		try {
			cStmt = hibernateConfiguration.dataSource().getConnection()
					.prepareCall("{call BPIL_BUDGET_VS_ACTUAL_RW(?,?)}");
			cStmt.setInt(1, Integer.parseInt(scheme_name));
			cStmt.registerOutParameter(2, OracleTypes.CURSOR);
			ResultSet result = cStmt.executeQuery();
			ResultSet rs1 = (ResultSet) cStmt.getObject(2);
			while (rs1.next()) {
				BudgetVsActual aContact = new BudgetVsActual();

				aContact.setReport_month(rs1.getString(1));
				aContact.setMl_business_line(rs1.getString(2));
				aContact.setScheme_code(rs1.getString(3));
				aContact.setScheme_name(rs1.getString(4));
				aContact.setBudget(rs1.getFloat(5));
				aContact.setExpense_before_exception(rs1.getFloat(6));
				aContact.setExpense_after_exception(rs1.getFloat(7));
				aContact.setVariance_from_budget_before_exception(rs1.getFloat(8));
				aContact.setVariance_from_budget_after_exception(rs1.getFloat(9));

				dml.add(aContact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Budget VS Actual Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cell = row.createCell(0);
		cell.setCellValue("REPORT_MONTH");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(0, 3500);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("ML_BUSINESS_LINE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(1, 3500);

		cell = row.createCell(2);
		cell.setCellValue("SCHEME_CODE");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(2, 4000);

		cell = row.createCell(3);
		cell.setCellValue("SCHEME_NAME");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(3, 4000);

		cell = row.createCell(4);
		cell.setCellValue("BUDGET");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(4, 3000);

		cell = row.createCell(5);
		cell.setCellValue("EXPENSE_BEFORE_EXCEPTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(5, 6000);

		cell = row.createCell(6);
		cell.setCellValue("EXPENSE_AFTER_EXCEPTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(6, 6000);

		cell = row.createCell(7);
		cell.setCellValue("VARIANCE_FROM_BUDGET_BEFORE_EXCEPTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(7, 6000);

		cell = row.createCell(8);
		cell.setCellValue("VARIANCE_FROM_BUDGET_AFTER_EXCEPTION");
		cell.setCellStyle(cellstyle);
		spreadsheet.setColumnWidth(8, 6100);

		int j = 1;

		Iterator<BudgetVsActual> itr = dml.iterator();
		while (itr.hasNext()) {
			BudgetVsActual ex = itr.next();

			row = spreadsheet.createRow(j);

			cell = row.createCell(0);
			cell.setCellValue(ex.getReport_month());

			cell = row.createCell(1);
			cell.setCellValue(ex.getMl_business_line());

			cell = row.createCell(2);
			cell.setCellValue(ex.getScheme_code());

			cell = row.createCell(3);
			cell.setCellValue(ex.getScheme_name());

			cell = row.createCell(4);
			cell.setCellValue(ex.getBudget());

			cell = row.createCell(5);
			cell.setCellValue(ex.getExpense_before_exception());

			cell = row.createCell(6);
			cell.setCellValue(ex.getExpense_after_exception());

			cell = row.createCell(7);
			cell.setCellValue(ex.getVariance_from_budget_before_exception());

			cell = row.createCell(8);
			cell.setCellValue(ex.getVariance_from_budget_after_exception());

			j++;
		}

		try {
			// to upload excel file
			String filename = "Budget VS Actual Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//	      		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Budget VS Actual Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	                response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	                FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	                FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	                FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("scheme_id", scheme_name);

		return new ModelAndView("BudgetVsActualReport");
	}

	// Generate depo reward analysis report
	@RequestMapping("/generateDepoRewardAnalysisReport")
	public ModelAndView generateDepoRewardAnalysisReport(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request) {
//		    	  if(scheme_name != null && scheme_name != "") {
//		          int scheme_id = Integer.parseInt(scheme_name);
//		          if(bill_to_id != null && bill_to_id != "") {
//		          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//		          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//		+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//		+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//		+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//		          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//		                +"  BPIL_SCHEME_MASTER BSM,"
//		                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		               +"   BPIL_DEALER_MASTER BDM "
//		          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//		          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//		          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//		          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//		          String sql = "SELECT BORAW.* "
//		      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//		      			                +"  BPIL_SCHEME_MASTER BSM,"
//		      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		      			               +"   BPIL_DEALER_MASTER BDM "
//		      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//		      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//		      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//		      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//		          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//		          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = (select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"') "
//		          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////		          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//		        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		        		  	+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//		        		  	+" AND OPA_RW_AN_DEALER_ID = '"+dealer_name+""+depot_code+"' "
//		        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String OPA_RW_AN_DEALER_ID = "";
		if (!dealer_name.equals("")) {
			OPA_RW_AN_DEALER_ID = dealer_name + depot_code;
		}

		String sql = "   SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + "WHERE REWARD_SCHEME_ID = '" + scheme_name + "'"
				+ " AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3)) = NVL('" + depot_code + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3))"
				+ "AND OPA_RW_AN_DEALER_ID = NVL('" + OPA_RW_AN_DEALER_ID + "', OPA_RW_AN_DEALER_ID)"
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' order by OPA_RW_AN_REWARD_ID";

//		          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//		              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//		            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//		aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//		                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//		                  aContact.setRegn(rs.getString("REGN"));
//		aContact.setTerr_code(rs.getString("TERR_CODE"));
//		aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//		                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//		aContact.setDlr_type(rs.getString("DLR_TYPE"));
//		aContact.setReward_section(rs.getString("REWARD_SECTION"));
//		aContact.setReward_type(rs.getString("REWARD_TYPE"));
//		                  aContact.setProduct(rs.getString("PRODUCT"));
//
//		                  aContact.setUnit(rs.getString("UNIT"));
//		aContact.setReward_date(rs.getDate("REWARD_DATE"));
//		aContact.setReward_ly(rs.getInt("REWARD_LY"));
//		aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//		aContact.setReward_ty(rs.getInt("REWARD_TY"));
//		aContact.setAdditional(rs.getInt("ADDITIONAL"));
//		aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//		aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//		aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//		aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//		aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//		aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//		aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//		aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//		aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//			try {
//				System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//			try {
////				System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ scheme_name + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		model.addAttribute("Info_grid", dml);

		model.addAttribute("LastRefresh", LastRefresh);

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
//		          }
		model.addAttribute("scheme_id", scheme_name);
//		    	  }
		return new ModelAndView("DepoRewardAnalysisReport");
	}

	// download depo reward analysis report
	@RequestMapping("/downloadDepoRewardAnalysisReport")
	public ModelAndView downloadDepoRewardAnalysisReport(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request, HttpServletResponse response) {
//		    	  if(scheme_name != null && scheme_name != "") {
//		          int scheme_id = Integer.parseInt(scheme_name);
//		          if(bill_to_id != null && bill_to_id != "") {
//		          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//		          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//		+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//		+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//		+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//		          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//		                +"  BPIL_SCHEME_MASTER BSM,"
//		                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		               +"   BPIL_DEALER_MASTER BDM "
//		          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//		          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//		          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//		          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//		          String sql = "SELECT BORAW.* "
//		      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//		      			                +"  BPIL_SCHEME_MASTER BSM,"
//		      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		      			               +"   BPIL_DEALER_MASTER BDM "
//		      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//		      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//		      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//		      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//		          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//		          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = (select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"') "
//		          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////		          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//		        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		        		  	+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//		        		  	+" AND OPA_RW_AN_DEALER_ID = '"+dealer_name+""+depot_code+"' "
//		        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String OPA_RW_AN_DEALER_ID = "";
		if (!dealer_name.equals("")) {
			OPA_RW_AN_DEALER_ID = dealer_name + depot_code;
		}

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + "WHERE REWARD_SCHEME_ID = '" + scheme_name + "'"
				+ " AND ( SUBSTR(OPA_RW_AN_DEALER_ID,-3)) = NVL('" + depot_code + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3))"
				+ "AND OPA_RW_AN_DEALER_ID = NVL('" + OPA_RW_AN_DEALER_ID + "', OPA_RW_AN_DEALER_ID)"
				+ "AND REWARD_SECTION <> 'FNL_SCH_EXCP' order by OPA_RW_AN_REWARD_ID";

//		          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//		              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//		            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//		aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//		                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//		                  aContact.setRegn(rs.getString("REGN"));
//		aContact.setTerr_code(rs.getString("TERR_CODE"));
//		aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//		                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//		aContact.setDlr_type(rs.getString("DLR_TYPE"));
//		aContact.setReward_section(rs.getString("REWARD_SECTION"));
//		aContact.setReward_type(rs.getString("REWARD_TYPE"));
//		                  aContact.setProduct(rs.getString("PRODUCT"));
//
//		                  aContact.setUnit(rs.getString("UNIT"));
//		aContact.setReward_date(rs.getDate("REWARD_DATE"));
//		aContact.setReward_ly(rs.getInt("REWARD_LY"));
//		aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//		aContact.setReward_ty(rs.getInt("REWARD_TY"));
//		aContact.setAdditional(rs.getInt("ADDITIONAL"));
//		aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//		aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//		aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//		aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//		aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//		aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//		aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//		aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//		aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//			try {
//				System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//			try {
////				System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				return aContact;
			}

		});

		// generate scheme analysis report in excel
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("Reward Analysis Report.xlsx");

		XSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) 12);
		font.setBold(true);

		CellStyle cellstyle = workbook.createCellStyle();
		CellStyle cellstyle1 = workbook.createCellStyle();
		cellstyle.setWrapText(true);
		cellstyle.setFont(font);

		XSSFRow row = spreadsheet.createRow(0);
		XSSFCell cell;

		cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
		cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

		cell = row.createCell(0);
		cell.setCellValue("DEPO");
		cellstyle.setLocked(true);
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(0, 3200);
		cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

		cell = row.createCell(1);
		cell.setCellValue("A/C NO");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(1, 2500);

		cell = row.createCell(2);
		cell.setCellValue("A/C NAME");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(2, 6000);

		cell = row.createCell(3);
		cell.setCellValue("REWARD SECTION");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(3, 7000);

		cell = row.createCell(4);
		cell.setCellValue("REWARD TYPE");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(4, 4000);

		cell = row.createCell(5);
		cell.setCellValue("PRODUCT");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(5, 6000);

		cell = row.createCell(6);
		cell.setCellValue("UNIT");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(6, 2000);

		cell = row.createCell(7);
		cell.setCellValue("REWARD DATE");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(7, 3000);

		cell = row.createCell(8);
		cell.setCellValue("LY");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(8, 2000);

		cell = row.createCell(9);
		cell.setCellValue("TARGET");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(9, 2200);

		cell = row.createCell(10);
		cell.setCellValue("TY");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(10, 2000);

		cell = row.createCell(11);
		cell.setCellValue("TGT PENDING");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(11, 3000);

		cell = row.createCell(12);
		cell.setCellValue("STATUS");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(12, 2200);

		cell = row.createCell(13);
		cell.setCellValue("REWARD DESC");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(13, 3000);

		cell = row.createCell(14);
		cell.setCellValue("ACTUAL");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(14, 2500);

		cell = row.createCell(15);
		cell.setCellValue("REQUESTED");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(15, 3100);

		cell = row.createCell(16);
		cell.setCellValue("ADJUSTMENT REASON");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(16, 5000);

		cell = row.createCell(17);
		cell.setCellValue("GIFT TO CN");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(17, 3000);

		cell = row.createCell(18);
		cell.setCellValue("CONVERTED CN VALUE");
		cell.setCellStyle(cellstyle);
		cell.setCellStyle(cellstyle1);
		spreadsheet.setColumnWidth(18, 3500);

		int j = 1;

		Iterator<Bpil_Opa_Rw_Analysis_Rw> itr = dml.iterator();
		while (itr.hasNext()) {
			Bpil_Opa_Rw_Analysis_Rw ex = itr.next();

			row = spreadsheet.createRow(j);

			if (ex.getReward_section().equalsIgnoreCase("TOTAL")) {
				cell = row.createCell(0);
				cell.setCellValue(ex.getDepot());

				cell = row.createCell(1);
				cell.setCellValue(ex.getDlr_ac_no());

				cell = row.createCell(2);
				cell.setCellValue(ex.getDlr_name());
			}

			XSSFCellStyle style = workbook.createCellStyle();
			if (ex.getReward_color() != null && ex.getReward_color() != "") {
				int r = Integer.valueOf(ex.getReward_color().substring(1, 3), 16);
				int g = Integer.valueOf(ex.getReward_color().substring(3, 5), 16);
				int b = Integer.valueOf(ex.getReward_color().substring(5, 7), 16);

				style.setFillForegroundColor(new XSSFColor(new java.awt.Color(r, g, b)));
				style.setFillPattern(CellStyle.SOLID_FOREGROUND);
			}

			cell = row.createCell(3);
			cell.setCellValue(ex.getReward_section());
			cell.setCellStyle(style);

			cell = row.createCell(4);
			cell.setCellValue(ex.getReward_type());
			cell.setCellStyle(style);

			cell = row.createCell(5);
			cell.setCellValue(ex.getProduct());
			cell.setCellStyle(style);

			cell = row.createCell(6);
			cell.setCellValue(ex.getUnit());
			cell.setCellStyle(style);

			cell = row.createCell(7);
			cell.setCellValue(ex.getReward_date1());
			cell.setCellStyle(style);

			cell = row.createCell(8);
			cell.setCellValue(ex.getReward_ly());
			cell.setCellStyle(style);

			cell = row.createCell(9);
			cell.setCellValue(ex.getReward_target());
			cell.setCellStyle(style);

			cell = row.createCell(10);
			cell.setCellValue(ex.getReward_ty());
			cell.setCellStyle(style);

			cell = row.createCell(11);
			cell.setCellValue(ex.getNext_tgt_pending());
			cell.setCellStyle(style);

			cell = row.createCell(12);
			cell.setCellValue(ex.getReward_status());
			cell.setCellStyle(style);

			cell = row.createCell(13);
			cell.setCellValue(ex.getReward_description());
			cell.setCellStyle(style);

			cell = row.createCell(14);
			cell.setCellValue(ex.getReward_total());
			cell.setCellStyle(style);

			cell = row.createCell(15);
			cell.setCellValue(ex.getAdjustments());
			cell.setCellStyle(style);

			cell = row.createCell(16);
			cell.setCellValue(ex.getAdjustment_reason());
			cell.setCellStyle(style);

			cell = row.createCell(17);
			cell.setCellValue(ex.getGift_to_cn_flag());
			cell.setCellStyle(style);

			cell = row.createCell(18);
			cell.setCellValue(ex.getConverted_cn_value());
			cell.setCellStyle(style);

			j++;
		}

		try {
			// to upload excel file
			String filename = "Reward Analysis Report.xlsx";
			String filepath = request.getServletContext().getRealPath("/ruledocs");
			System.out.println(filepath);

			File exportExcelfile = new File(filepath + "/" + filename);
			exportExcelfile.createNewFile();
			System.out.println(exportExcelfile.getAbsolutePath());
			String exportExcelfilepath = exportExcelfile.getAbsolutePath();
			FileInputStream in = new FileInputStream(exportExcelfile);
			FileOutputStream out = new FileOutputStream(exportExcelfilepath);

//	      		FileOutputStream out = new FileOutputStream(new File(environment.getRequiredProperty("exportFilePath") + filename));

			workbook.write(out);
			out.close();

			// to download excel file
			int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
			response.setContentType("text/html");
			PrintWriter out1 = response.getWriter();
			String fileName = "Reward Analysis Report.xlsx";
			response.setContentType("APPLICATION/OCTET-STREAM");
			response.setContentLengthLong(exportExcelfile.length());
			response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

//	                response.setHeader("Content-Disposition", "attachment;fileName=\"" + fileName + "\"");

//	                FileCopyUtils.copy(in, response.getOutputStream());

			int i;
//	                FileInputStream file = new FileInputStream(environment.getRequiredProperty("exportFilePath") + fileName);
//	                FileInputStream file = new FileInputStream(exportExcelfilepath);
			while ((i = in.read()) != -1) {
				out1.write(i);
			}

			out1.close();

			exportExcelfile.delete();

			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
		model.addAttribute("scheme_id", scheme_name);

		return new ModelAndView("DepoRewardAnalysisReport");
	}

	// autofill adjust reward
	@RequestMapping("/adjust_reward")
	public ModelAndView adjust_reward(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request) {
//			    	  if(scheme_name != null && scheme_name != "") {
//			          int scheme_id = Integer.parseInt(scheme_name);
//			          if(bill_to_id != null && bill_to_id != "") {
//			          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//			          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//			+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//			+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//			+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//			          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//			                +"  BPIL_SCHEME_MASTER BSM,"
//			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//			               +"   BPIL_DEALER_MASTER BDM "
//			          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//			          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//			          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//			          String sql = "SELECT BORAW.* "
//			      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//			      			                +"  BPIL_SCHEME_MASTER BSM,"
//			      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//			      			               +"   BPIL_DEALER_MASTER BDM "
//			      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//			      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//			      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//			      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//			      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//			      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//			      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//			      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//			          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//			          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//			          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//			          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//			          			 + " order by OPA_RW_AN_REWARD_ID";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//			          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			          			 + " AND REWARD_DLR_DEPOT = (select DEPOT_NAME " 
//			          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"') "
//			          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////			          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//			          			 + " order by OPA_RW_AN_REWARD_ID";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//			        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			        		  	+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//			        		  	+" AND OPA_RW_AN_DEALER_ID = '"+dealer_name+""+depot_code+"' "
//			        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + " WHERE REWARD_SCHEME_ID = '" + scheme_name + "'  "
				+ " AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '" + depot_code + "' " + " AND OPA_RW_AN_DEALER_ID = '"
				+ dealer_name + "" + depot_code + "' " + " AND REWARD_SECTION <> 'FNL_SCH_EXCP' "
				+ " order by OPA_RW_AN_REWARD_ID";

//			          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//			              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//			            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//			aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//			                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//			                  aContact.setRegn(rs.getString("REGN"));
//			aContact.setTerr_code(rs.getString("TERR_CODE"));
//			aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//			                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//			aContact.setDlr_type(rs.getString("DLR_TYPE"));
//			aContact.setReward_section(rs.getString("REWARD_SECTION"));
//			aContact.setReward_type(rs.getString("REWARD_TYPE"));
//			                  aContact.setProduct(rs.getString("PRODUCT"));
//
//			                  aContact.setUnit(rs.getString("UNIT"));
//			aContact.setReward_date(rs.getDate("REWARD_DATE"));
//			aContact.setReward_ly(rs.getInt("REWARD_LY"));
//			aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//			aContact.setReward_ty(rs.getInt("REWARD_TY"));
//			aContact.setAdditional(rs.getInt("ADDITIONAL"));
//			aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//			aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//			aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//			aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//			aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//			aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//			aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//			aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//			aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//				try {
//					System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//				try {
////					System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ scheme_name + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		model.addAttribute("Info_grid", dml);
		model.addAttribute("info0", dml.get(0));

		model.addAttribute("LastRefresh", LastRefresh);

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
//			          }
		model.addAttribute("scheme_id", scheme_name);
//			    	  }
		return new ModelAndView("AdjustReward");
	}

	// autofill adjust reward
	@RequestMapping("/adjust_reward_detail")
	public ModelAndView adjust_reward_detail(@RequestParam(value = "scheme_id") String scheme_id,
			@RequestParam(value = "opa_rw_an_dealer_id") String opa_rw_an_dealer_id,
//			              @RequestParam(value="scheme_name")String scheme_name,
			@RequestParam(value = "scheme_code") String scheme_code, @RequestParam(value = "depot") String depot,
//			              @RequestParam(value="dlr_name")String dlr_name,
			@RequestParam(value = "dlr_ac_no") String dlr_ac_no, ModelMap map, Model model,
			HttpServletRequest request) {

		System.out.println("scheme_id _____________________________________________________" + scheme_id);
		System.out.println(
				"opa_rw_an_dealer_id______________________________________________________" + opa_rw_an_dealer_id);
		System.out.println("scheme_code _____________________________________________________" + scheme_code);
		System.out.println("depot _____________________________________________________" + depot);
		System.out.println("dlr_ac_no _____________________________________________________" + dlr_ac_no);

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//			        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_id+"'  "
//			        		  	//+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//			        		  	+" AND OPA_RW_AN_DEALER_ID = '"+opa_rw_an_dealer_id+"' "
//			        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + " WHERE REWARD_SCHEME_ID = '" + scheme_id + "'  "
		// +" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' "
				+ " AND OPA_RW_AN_DEALER_ID = '" + opa_rw_an_dealer_id + "' " + " AND REWARD_SECTION <> 'FNL_SCH_EXCP' "
				+ " order by OPA_RW_AN_REWARD_ID";

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//				try {
//					System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//				try {
////					System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ scheme_id + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		ArrayList<New_Scheme_mstr> dml2 = (ArrayList<New_Scheme_mstr>) hibernateTemplate
				.find("from New_Scheme_mstr where scheme_id=" + scheme_id);

		model.addAttribute("Info_grid", dml);

		model.addAttribute("LastRefresh", LastRefresh);

		model.addAttribute("opa_rw_an_dealer_id", opa_rw_an_dealer_id);
		model.addAttribute("scheme_id", scheme_id);
		model.addAttribute("scheme_name", dml2.get(0).getScheme_name());
		model.addAttribute("scheme_code", scheme_code);
		model.addAttribute("depot", depot);
		model.addAttribute("dlr_name", dml.get(0).getDlr_name());
		model.addAttribute("dlr_ac_no", dlr_ac_no);

		return new ModelAndView("AdjustRewardDetails");
	}

	@RequestMapping("/adjust_depo_reward")
	public ModelAndView adjust_depo_reward(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request) {
//			    	  if(scheme_name != null && scheme_name != "") {
//			          int scheme_id = Integer.parseInt(scheme_name);
//			          if(bill_to_id != null && bill_to_id != "") {
//			          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//			          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//			+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//			+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//			+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//			          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//			                +"  BPIL_SCHEME_MASTER BSM,"
//			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//			               +"   BPIL_DEALER_MASTER BDM "
//			          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//			          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//			          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//			          String sql = "SELECT BORAW.* "
//			      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//			      			                +"  BPIL_SCHEME_MASTER BSM,"
//			      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//			      			               +"   BPIL_DEALER_MASTER BDM "
//			      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//			      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//			      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//			      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//			      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//			      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//			      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//			      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//			          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//			          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//			          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//			          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//			          			 + " order by OPA_RW_AN_REWARD_ID";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//			          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			          			 + " AND REWARD_DLR_DEPOT = (select DEPOT_NAME " 
//			          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"') "
//			          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////			          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//			          			 + " order by OPA_RW_AN_REWARD_ID";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//			        		  	+" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			        		  	+" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '"+depot_code+"' " 
//			        		  	+" AND OPA_RW_AN_DEALER_ID = '"+dealer_name+""+depot_code+"' "
//			        		  	+ " order by OPA_RW_AN_REWARD_ID";

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + " WHERE REWARD_SCHEME_ID = '" + scheme_name + "'  "
				+ " AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = '" + depot_code + "' " + " AND OPA_RW_AN_DEALER_ID = '"
				+ dealer_name + "" + depot_code + "' " + " AND REWARD_SECTION <> 'FNL_SCH_EXCP' "
				+ " order by OPA_RW_AN_REWARD_ID";

//			          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//			              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//			            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//			aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//			                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//			                  aContact.setRegn(rs.getString("REGN"));
//			aContact.setTerr_code(rs.getString("TERR_CODE"));
//			aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//			                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//			aContact.setDlr_type(rs.getString("DLR_TYPE"));
//			aContact.setReward_section(rs.getString("REWARD_SECTION"));
//			aContact.setReward_type(rs.getString("REWARD_TYPE"));
//			                  aContact.setProduct(rs.getString("PRODUCT"));
//
//			                  aContact.setUnit(rs.getString("UNIT"));
//			aContact.setReward_date(rs.getDate("REWARD_DATE"));
//			aContact.setReward_ly(rs.getInt("REWARD_LY"));
//			aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//			aContact.setReward_ty(rs.getInt("REWARD_TY"));
//			aContact.setAdditional(rs.getInt("ADDITIONAL"));
//			aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//			aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//			aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//			aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//			aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//			aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//			aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//			aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//			aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//				try {
//					System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));
				aContact.setReward_color(rs.getString("REWARD_COLOR"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//				try {
////					System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ scheme_name + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		model.addAttribute("Info_grid", dml);
		model.addAttribute("info0", dml.get(0));

		model.addAttribute("LastRefresh", LastRefresh);

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
//			          }
		model.addAttribute("scheme_id", scheme_name);
//			    	  }
		return new ModelAndView("AdjustDepoReward");
	}

	@RequestMapping(value = "/getgifttocn", method = RequestMethod.GET)
	public void getgifttocn(@RequestParam(value = "reward_gift_id") String reward_gift_id, HttpServletRequest request,
			Model model, HttpServletResponse response) {

		try {

			System.out.println("reward_gift_id :" + reward_gift_id);
			int reward_giftid = 0;
			if (reward_gift_id.equals("")) {
				reward_giftid = 0;
			} else {
				reward_giftid = Integer.parseInt(reward_gift_id);
			}

			ArrayList<Bpil_Gift_Master> rwgift = (ArrayList<Bpil_Gift_Master>) hibernateTemplate
					.find("from Bpil_Gift_Master where gift_id=?", reward_giftid);

			int gifttocn = Integer.parseInt(rwgift.get(0).getAttribute1());
			String json = null;

			json = new Gson().toJson(gifttocn);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@RequestMapping("/adjust_reward_apr")
	public ModelAndView adjust_reward_apr(@RequestParam(value = "scheme_name") String scheme_name,
			@RequestParam(value = "depot_code") String depot_code,
			@RequestParam(value = "dealer_name") String dealer_name,
			@RequestParam(value = "bill_to_id") String bill_to_id, ModelMap map, Model model,
			HttpServletRequest request) {
//			    	  if(scheme_name != null && scheme_name != "") {
//			          int scheme_id = Integer.parseInt(scheme_name);
//			          if(bill_to_id != null && bill_to_id != "") {
//			          int billto_id = Integer.parseInt(bill_to_id);

		System.out.println("scheme_id _____________________________________________________" + scheme_name);
		System.out.println("bil to id______________________________________________________" + bill_to_id);
		System.out.println("depot_code_______________________________________________________" + depot_code);
		System.out.println("dealer name _____________________________________________________" + dealer_name);

//			          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//			+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//			+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//			+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//			          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//			                +"  BPIL_SCHEME_MASTER BSM,"
//			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//			               +"   BPIL_DEALER_MASTER BDM "
//			          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//			          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//			          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//			          String sql = "SELECT BORAW.* "
//			      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//			      			                +"  BPIL_SCHEME_MASTER BSM,"
//			      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//			      			               +"   BPIL_DEALER_MASTER BDM "
//			      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//			      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//			      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//			      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//			      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//			      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//			      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//			      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//			          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//			          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//			          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//			          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//			          			 + " order by OPA_RW_AN_REWARD_ID";

//			          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//			          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//			          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//			          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'), REWARD_DLR_DEPOT) "
//			          			 + " and REWARD_I_STATUS = 'P' "
//			          			 + " and ATTRIBUTE1 = 'Y' "
////			          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////			          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//			          			 + " order by OPA_RW_AN_REWARD_ID";

		String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW " + " WHERE REWARD_SCHEME_ID = '" + scheme_name + "'  "
				+ " AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = NVL('" + depot_code + "', SUBSTR(OPA_RW_AN_DEALER_ID,-3)) "
				+ " and REWARD_I_STATUS = 'P' " + " and ATTRIBUTE1 = 'Y' " + " order by OPA_RW_AN_REWARD_ID";

//			          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//			              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//			            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//			aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//			                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//			                  aContact.setRegn(rs.getString("REGN"));
//			aContact.setTerr_code(rs.getString("TERR_CODE"));
//			aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//			                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//			aContact.setDlr_type(rs.getString("DLR_TYPE"));
//			aContact.setReward_section(rs.getString("REWARD_SECTION"));
//			aContact.setReward_type(rs.getString("REWARD_TYPE"));
//			                  aContact.setProduct(rs.getString("PRODUCT"));
//
//			                  aContact.setUnit(rs.getString("UNIT"));
//			aContact.setReward_date(rs.getDate("REWARD_DATE"));
//			aContact.setReward_ly(rs.getInt("REWARD_LY"));
//			aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//			aContact.setReward_ty(rs.getInt("REWARD_TY"));
//			aContact.setAdditional(rs.getInt("ADDITIONAL"));
//			aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//			aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//			aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//			aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//			aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//			aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//			aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//			aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//			aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//				try {
//					System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//				try {
////					System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				return aContact;
			}

		});

		String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"
				+ scheme_name + "' ";

		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {

			@Override

			public String mapRow(ResultSet rs, int rowNum) throws SQLException {

				String rw_last_update = rs.getString("RW_LAST_UPDATE");

				return rw_last_update;
			}

		});

		String LastRefresh = "";

		if (lastupadate.size() > 0) {

			LastRefresh = lastupadate.get(0);

		}

		model.addAttribute("Info_grid", dml);

		model.addAttribute("LastRefresh", LastRefresh);

		model.addAttribute("depo_code", depot_code);
		model.addAttribute("dealer_code", dealer_name);
		model.addAttribute("dealer_billto", bill_to_id);
//			          }
		model.addAttribute("scheme_id", scheme_name);
//			    	  }
		return new ModelAndView("AdjustRewardApprove");
	}

	// dealer reward
	@RequestMapping("/dealer_reward")
	public ModelAndView dealer_reward(@RequestParam(value = "region") String region,
			@RequestParam(value = "depot") String depot, ModelMap map, Model model, HttpServletRequest request) {
		System.out.println("region _____________________________________________________" + region);
		System.out.println("depot_code_______________________________________________________" + depot);

//			          String sql = "SELECT  BOSA.*"
//			          +" FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//			                +"BPIL_DEPOT_MASTER BDPM "
//			          +"WHERE BOSA.DEPOT = BDPM.DEPOT_NAME "
//			          +"AND BDPM.REGN = '"+region+"' "
//			          +"AND BDPM.DEPOT_CODE = '"+depot+"'";

		String sql = "SELECT  BOWAW.*" + " FROM    BPIL_OPA_RW_ANALYSIS_RW BOWAW," + "BPIL_DEPOT_MASTER BDPM "
				+ "WHERE BOWAW.REWARD_DLR_DEPOT = BDPM.DEPOT_NAME " + "AND BDPM.REGN = '" + region + "' "
				+ "AND BDPM.DEPOT_CODE = '" + depot + "'";

		/*
		 * String sql =
		 * "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
		 * +"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
		 * +"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
		 * +"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
		 * +" FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA," +"BPIL_DEPOT_MASTER BDPM "
		 * +"WHERE BOSA.DEPOT = BDPM.DEPOT_NAME " +"AND BDPM.REGN = '"+region+"' "
		 * +"AND BDPM.DEPOT_CODE = NVL('"+depot+"',BDPM.DEPOT_CODE)";
		 */

//			          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {

		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {

			@Override

//			              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {

//			                  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

				System.out.println("Dealer Rewards " + rs.getInt("OPA_ANALYSIS_ID"));
//			aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//			                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//			                  aContact.setRegn(rs.getString("REGN"));
//			                  aContact.setDepot(rs.getString("DEPOT"));
//			aContact.setTerr_code(rs.getString("TERR_CODE"));
//			aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//			                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//			aContact.setDlr_type(rs.getString("DLR_TYPE"));
//			aContact.setReward_section(rs.getString("REWARD_SECTION"));
//			aContact.setReward_type(rs.getString("REWARD_TYPE"));
//			                  aContact.setProduct(rs.getString("PRODUCT"));
//
//			                  aContact.setUnit(rs.getString("UNIT"));
//			aContact.setReward_date(rs.getDate("REWARD_DATE"));
//			aContact.setReward_ly(rs.getInt("REWARD_LY"));
//			aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//			aContact.setReward_ty(rs.getInt("REWARD_TY"));
//			aContact.setAdditional(rs.getInt("ADDITIONAL"));
//			aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//			aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//			aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//			aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//			aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//			aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//			aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//			aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//			aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
					try {
						System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//				try {
////					System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//				} catch (ParseException e) {
//						e.printStackTrace();
//				}
				}

				return aContact;
			}

		});
//			          for(Bpil_opa_scheme_analysis s:dml)
//			          {
//			              System.out.println("opa analysis is :"+s.getOpa_analysis_id());
//			          }

		model.addAttribute("Info_grid", dml);

		model.addAttribute("region", region);
		model.addAttribute("depot", depot);
		return new ModelAndView("DealerReward");
	}

	@RequestMapping("/adjustreward")
	public ModelAndView adjustreview(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("AdjustReward");
	}

	@RequestMapping("/BudgetVsActualReport")
	public ModelAndView BudgetVsActualReport(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("BudgetVsActualReport");
	}

	@RequestMapping("/rewardanalysisreport")
	public ModelAndView rewardanalysisreport(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("RewardAnalysisReport");
	}

	@RequestMapping("/misreportSP")
	public ModelAndView misreportSP(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("MISReportSP");
	}

	@RequestMapping("/misreport")
	public ModelAndView misreport(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("MISReport");
	}

	@RequestMapping("/giftcountreport")
	public ModelAndView giftcountreport(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("GiftCountReport");
	}

	@RequestMapping("/deporewardanalysisreport")
	public ModelAndView deporewardanalysisreport(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("DepoRewardAnalysisReport");
	}

	@RequestMapping("/adjustdeporeward")
	public ModelAndView adjustdeporeward(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("AdjustDepoReward");
	}

	@RequestMapping("/adjustregnreward")
	public ModelAndView adjustregnreward(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("AdjustRegnReward");
	}

	@RequestMapping("/adjustrewardapprove")
	public ModelAndView adjustrewardapprove(ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {

//            	try {

		Integer userid = (Integer) request.getSession().getAttribute("userid");

		int profile_id = (Integer) request.getSession().getAttribute("profileid");
System.out.println("Profile id :-"+profile_id);
		String sql = "";

		if (profile_id == 7) {

			sql = "SELECT BORW.*, BSM.SCHEME_CODE , BSM.SCHEME_NAME "
					+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM "
					+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID " + "from BPIL_SCHEME_MASTER SM, "
					+ "BPIL_USERS BU " + "where SM.ACTIVE_FLAG = 'Freezed' " + "and SM.CREATED_BY = BU.USER_ID "
					+ "and BU.SUPERVISOR_ID = '" + userid + "') " + "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
					+ "and BORW.REWARD_I_STATUS = 'P' " + "and BORW.ATTRIBUTE1 = 'Y' "
					+ "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID";

//			 			sql = "SELECT BORW.*, BSM.SCHEME_CODE " 
//								+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM " 
//								+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID "
//				        		  + "from BPIL_SCHEME_MASTER SM, "
//				        		  + "BPIL_USERS BU "
//				        		  + "where SM.ACTIVE_FLAG = 'Freezed' "
//				        		  + "and SM.CREATED_BY = BU.USER_ID "
//				        		  + "and BU.SUPERVISOR_ID = '"+userid+"') " 
//								+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//								+ "and ( "
//								+ "(BORW.REWARD_I_STATUS = 'P' " 
//								+ "and BORW.ATTRIBUTE1 = 'Y' ) " 
//								+ "or "
//								+ "(BORW.REWARD_SECTION = 'FNL_SCH_EXCP' "
//								+ "and BORW.OPA_RW_AN_DEALER_ID IN "
//								+ "(SELECT BORW.OPA_RW_AN_DEALER_ID " 
//								+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW " 
//								+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID "
//				        		  + "from BPIL_SCHEME_MASTER SM, "
//				        		  + "BPIL_USERS BU "
//				        		  + "where SM.ACTIVE_FLAG = 'Freezed' "
//				        		  + "and SM.CREATED_BY = BU.USER_ID "
//				        		  + "and BU.SUPERVISOR_ID = '"+userid+"') " 
//								+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID " 
//								+ "and BORW.REWARD_I_STATUS = 'P' "
//								+ "and BORW.ATTRIBUTE1 = 'Y' ) "
//								+ ") "
//								+ ") "
//								+ "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID ";

//		ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("select sm from New_Scheme_mstr sm, Bpil_Users bu where sm.active_flag = 'Freezed' and sm.created_by = bu.user_id and bu.supervisor_id = "+userid);
//				
//				 
//				 String json = null;
//				 
//				 json = new Gson().toJson(dml);
//				 response.setContentType("application/json");
//				 response.getWriter().write(json);

		} else if (profile_id == 6) {

			String PMG_ML_Group = (String) request.getSession().getAttribute("PMG_ML_grp");

//							sql = "SELECT BORW.*, BSM.SCHEME_CODE "
//				 			 		  + "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM "
//				 			 		  + "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID "
//					        		  + "from BPIL_SCHEME_MASTER SM "
//					        		  + "where SM.ACTIVE_FLAG = 'Freezed' "
//					        		  + "and SM.CREATED_BY = '"+userid+"')  "
//					        		  + "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//					        		  + "and BORW.REWARD_I_STATUS = 'P' "
//					          		  + "and BORW.ATTRIBUTE1 = 'Y' "
//					          		  + "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID";

			sql = "SELECT BORW.*, BSM.SCHEME_CODE , BSM.SCHEME_NAME "
					+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM "
					+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID " + "from BPIL_SCHEME_MASTER SM "
					+ "where SM.ACTIVE_FLAG = 'Freezed' " + "and SM.SCHEME_BUSINESS_LINE = '" + PMG_ML_Group + "')  "
					+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID " + "and BORW.REWARD_I_STATUS = 'P' "
					+ "and BORW.ATTRIBUTE1 = 'Y' "
					+ "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID";

//							sql = "SELECT BORW.*, BSM.SCHEME_CODE " 
//									+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM " 
//									+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID "
//					        		  + "from BPIL_SCHEME_MASTER SM "
//					        		  + "where SM.ACTIVE_FLAG = 'Freezed' "
//					        		  + "and SM.SCHEME_BUSINESS_LINE = '"+ PMG_ML_Group +"') " 
//									+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//									+ "and ( "
//									+ "(BORW.REWARD_I_STATUS = 'P' " 
//									+ "and BORW.ATTRIBUTE1 = 'Y' ) " 
//									+ "or "
//									+ "(BORW.REWARD_SECTION = 'FNL_SCH_EXCP' "
//									+ "and BORW.OPA_RW_AN_DEALER_ID IN "
//									+ "(SELECT BORW.OPA_RW_AN_DEALER_ID " 
//									+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW " 
//									+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID "
//					        		  + "from BPIL_SCHEME_MASTER SM "
//					        		  + "where SM.ACTIVE_FLAG = 'Freezed' "
//					        		  + "and SM.SCHEME_BUSINESS_LINE = '"+ PMG_ML_Group +"') " 
//									+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID " 
//									+ "and BORW.REWARD_I_STATUS = 'P' "
//									+ "and BORW.ATTRIBUTE1 = 'Y' ) "
//									+ ") "
//									+ ") "
//									+ "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID ";

//							ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("select sm from New_Scheme_mstr sm where sm.active_flag = 'Freezed' and sm.created_by =  "+userid);
//							
//							 
//							 String json = null;
//							 
//							 json = new Gson().toJson(dml);
//							 response.setContentType("application/json");
//							 response.getWriter().write(json);

		} else if (profile_id == 3) {
			System.out.println("In the IT profile");

			sql = "SELECT BORW.*, BSM.SCHEME_CODE , BSM.SCHEME_NAME "
					+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM "
					+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID " + "from BPIL_SCHEME_MASTER SM "
					+ "where SM.ACTIVE_FLAG = 'Freezed') " + "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
					+ "and BORW.REWARD_I_STATUS = 'P' " + "and BORW.ATTRIBUTE1 = 'Y' "
					+ "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID";

//								sql = "SELECT BORW.*, BSM.SCHEME_CODE " 
//										+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW, BPIL_SCHEME_MASTER BSM " 
//										+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID " 
//										+ "from BPIL_SCHEME_MASTER SM "
//										+ "where SM.ACTIVE_FLAG = 'Freezed') " 
//										+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//										+ "and ( "
//										+ "(BORW.REWARD_I_STATUS = 'P' " 
//										+ "and BORW.ATTRIBUTE1 = 'Y' ) " 
//										+ "or "
//										+ "(BORW.REWARD_SECTION = 'FNL_SCH_EXCP' "
//										+ "and BORW.OPA_RW_AN_DEALER_ID IN "
//										+ "(SELECT BORW.OPA_RW_AN_DEALER_ID " 
//										+ "FROM BPIL_OPA_RW_ANALYSIS_RW BORW " 
//										+ "WHERE BORW.REWARD_SCHEME_ID  IN (select SM.SCHEME_ID " 
//										+ "from BPIL_SCHEME_MASTER SM " 
//										+ "where SM.ACTIVE_FLAG = 'Freezed') " 
//										+ "and BORW.REWARD_SCHEME_ID = BSM.SCHEME_ID " 
//										+ "and BORW.REWARD_I_STATUS = 'P' "
//										+ "and BORW.ATTRIBUTE1 = 'Y' ) "
//										+ ") "
//										+ ") "
//										+ "order by BORW.REWARD_SCHEME_ID, BSM.SCHEME_CODE, BORW.OPA_RW_AN_REWARD_ID ";

//								ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate.find("select sm from New_Scheme_mstr sm where sm.active_flag = 'Freezed' ");
//								
//								 
//								 String json = null;
//								 
//								 json = new Gson().toJson(dml);
//								 response.setContentType("application/json");
//								 response.getWriter().write(json);

		}

//				 } catch (IOException e) {
//				 	e.printStackTrace();
//				 }

//		    	  if(scheme_name != null && scheme_name != "") {
//		          int scheme_id = Integer.parseInt(scheme_name);
//		          if(bill_to_id != null && bill_to_id != "") {
//		          int billto_id = Integer.parseInt(bill_to_id);

//		          System.out.println("scheme_id _____________________________________________________"+scheme_name);
//		          System.out.println("bil to id______________________________________________________"+bill_to_id);
//		          System.out.println("depot_code_______________________________________________________"+depot_code);
//		          System.out.println("dealer name _____________________________________________________"+dealer_name);

//		          String sql = "SELECT BOSA.OPA_ANALYSIS_ID,BOSA.SCHEME_ID,BOSA.REGN,BOSA.DEPOT,BOSA.TERR_CODE,BOSA.DLR_BILL_TO,BOSA.DLR_AC_NO,BOSA.DLR_NAME,"
//		+"BOSA.DLR_CAT,BOSA.DLR_TYPE,BOSA.REWARD_SECTION,BOSA.REWARD_TYPE,BOSA.PRODUCT,BOSA.UNIT,BOSA.REWARD_DATE,BOSA.REWARD_LY,"
//		+"BOSA.REWARD_TARGET,BOSA.REWARD_TY,BOSA.ADDITIONAL,BOSA.BASE_TOTAL,BOSA.NEXT_TGT_PENDING,BOSA.REWARD_STATUS,BOSA.REWARD_TOTAL,"
//		+"BOSA.ADJUSTMENTS,BOSA.ADJUSTMENT_REASON,BOSA.GIFT_TO_CN_FLAG,BOSA.CONVERTED_CN_VALUE,BOSA.INTERFACE_STATUS "
//		          +"FROM    BPIL_OPA_SCHEME_ANALYSIS BOSA,"
//		                +"  BPIL_SCHEME_MASTER BSM,"
//		                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		               +"   BPIL_DEALER_MASTER BDM "
//		          +"WHERE   BOSA.SCHEME_ID = BSM.SCHEME_ID "
//		          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		          +"AND     BOSA.DLR_BILL_TO = BDM.BILL_TO_ID "
//		          +"AND     BOSA.DLR_AC_NO = BDM.DLR_AC_NO "
//		          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"'  ";

//		          String sql = "SELECT BORAW.* "
//		      			          +"FROM    BPIL_OPA_RW_ANALYSIS_RW BORAW,"
//		      			                +"  BPIL_SCHEME_MASTER BSM,"
//		      			                +"  BPIL_SCHEME_DEPOT_DETAILS BSDD,"
//		      			               +"   BPIL_DEALER_MASTER BDM "
//		      			          +"WHERE   BORAW.REWARD_SCHEME_ID = BSM.SCHEME_ID "
//		      			          +"AND     BSM.SCHEME_ID = BSDD.SCHEME_ID "
//		      			          +"AND     BORAW.REWARD_DLR_BILL_TO = BDM.BILL_TO_ID "
//		      			          +"AND     BORAW.REWARD_DLR_CODE = BDM.DLR_AC_NO "
//		      			          +"AND     BSM.SCHEME_ID = '"+scheme_name+"' "
//		      			      +"    AND     BSDD.SCH_DEPOT_CODE = '"+depot_code+"'"
//		      			      +"    AND  BDM.BILL_TO_ID = '"+bill_to_id+"'  "
//		      			      +"    AND    BDM.DLR_AC_NO = '"+dealer_name+"' order by BORAW.OPA_RW_AN_REWARD_ID  ";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'),REWARD_DLR_DEPOT) "
//		          			 + " and REWARD_DLR_CODE = NVL('"+dealer_name+"', REWARD_DLR_CODE) "
//		          			 + " AND OPA_RW_AN_DEALER_ID = NVL('"+bill_to_id+"' ,OPA_RW_AN_DEALER_ID) "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "  
//		          			 + " WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		          			 + " AND REWARD_DLR_DEPOT = NVL((select DEPOT_NAME " 
//		          			 + " from BPIL_DEPOT_MASTER where DEPOT_CODE = '"+depot_code+"'), REWARD_DLR_DEPOT) "
//		          			 + " and REWARD_I_STATUS = 'P' "
//		          			 + " and ATTRIBUTE1 = 'Y' "
////		          			 + " and REWARD_DLR_CODE = '"+dealer_name+"' "
////		          			 + " AND OPA_RW_AN_DEALER_ID = '"+bill_to_id+"' "
//		          			 + " order by OPA_RW_AN_REWARD_ID";

//		          String sql = "SELECT * FROM BPIL_OPA_RW_ANALYSIS_RW "
//		        		  +" WHERE REWARD_SCHEME_ID = '"+scheme_name+"'  "
//		        		  +" AND SUBSTR(OPA_RW_AN_DEALER_ID,-3) = NVL('"+depot_code+"', SUBSTR(OPA_RW_AN_DEALER_ID,-3)) "
//		        		  + " and REWARD_I_STATUS = 'P' "
//		          		  + " and ATTRIBUTE1 = 'Y' "
//		          		  + " order by OPA_RW_AN_REWARD_ID";

//		          List<Bpil_opa_scheme_analysis> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_opa_scheme_analysis>() {
		System.out.println("Before the query block"+sql);
		List<Bpil_Opa_Rw_Analysis_Rw> dml = jdbcTemplate.query(sql, new RowMapper<Bpil_Opa_Rw_Analysis_Rw>() {
			
			@Override

//		              public Bpil_opa_scheme_analysis mapRow(ResultSet rs, int rowNum) throws SQLException {

			public Bpil_Opa_Rw_Analysis_Rw mapRow(ResultSet rs, int rowNum) throws SQLException {
						System.out.println("In the maprow block");
//		            	  Bpil_opa_scheme_analysis aContact = new Bpil_opa_scheme_analysis();

				Bpil_Opa_Rw_Analysis_Rw aContact = new Bpil_Opa_Rw_Analysis_Rw();

//		aContact.setOpa_analysis_id(rs.getInt("OPA_ANALYSIS_ID"));
//		                  aContact.setScheme_id(rs.getInt("SCHEME_ID"));
//		                  aContact.setRegn(rs.getString("REGN"));
//		aContact.setTerr_code(rs.getString("TERR_CODE"));
//		aContact.setDlr_ac_no(rs.getString("DLR_AC_NO"));
//		                  aContact.setDlr_cat(rs.getString("DLR_CAT"));
//		aContact.setDlr_type(rs.getString("DLR_TYPE"));
//		aContact.setReward_section(rs.getString("REWARD_SECTION"));
//		aContact.setReward_type(rs.getString("REWARD_TYPE"));
//		                  aContact.setProduct(rs.getString("PRODUCT"));
//
//		                  aContact.setUnit(rs.getString("UNIT"));
//		aContact.setReward_date(rs.getDate("REWARD_DATE"));
//		aContact.setReward_ly(rs.getInt("REWARD_LY"));
//		aContact.setReward_target(rs.getInt("REWARD_TARGET"));
//		aContact.setReward_ty(rs.getInt("REWARD_TY"));
//		aContact.setAdditional(rs.getInt("ADDITIONAL"));
//		aContact.setBase_total(rs.getInt("BASE_TOTAL"));
//		aContact.setNext_tgt_pending(rs.getInt("NEXT_TGT_PENDING"));
//		aContact.setReward_status(rs.getString("REWARD_STATUS"));
//
//		aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
//		aContact.setAdjustments(rs.getInt("ADJUSTMENTS"));
//		aContact.setAdjustment_reason(rs.getString("ADJUSTMENT_REASON"));
//		aContact.setGift_to_cn_flag(rs.getString("GIFT_TO_CN_FLAG"));
//		aContact.setConverted_cn_value(rs.getInt("CONVERTED_CN_VALUE"));
//		aContact.setInterface_status(rs.getString("INTERFACE_STATUS"));

				aContact.setOpa_analysis_id(rs.getInt("OPA_RW_AN_REWARD_ID"));
				aContact.setOpa_rw_an_dealer_id(rs.getString("OPA_RW_AN_DEALER_ID"));
				aContact.setScheme_id(rs.getInt("REWARD_SCHEME_ID"));
				aContact.setAttribute2(rs.getString("SCHEME_CODE"));
				aContact.setAttribute3(rs.getString("SCHEME_NAME"));
				aContact.setRegn(rs.getString("REWARD_DLR_REGN"));
				aContact.setState(rs.getString("REWARD_DLR_STATE"));
				aContact.setDepot(rs.getString("REWARD_DLR_DEPOT"));
				aContact.setTerr_code(rs.getString("REWARD_DLR_TERR_CODE"));
				aContact.setTerr_name(rs.getString("REWARD_DLR_TERR_NAME"));
				aContact.setDlr_ac_no(rs.getString("REWARD_DLR_CODE"));
				aContact.setDlr_cat(rs.getString("REWARD_DLR_CAT"));
				aContact.setDlr_bill_to(rs.getInt("REWARD_DLR_BILL_TO"));
				aContact.setDlr_type(rs.getString("REWARD_DLR_TYPE"));
				aContact.setDlr_name(rs.getString("REWARD_DLR_NAME"));
				aContact.setReward_section(rs.getString("REWARD_SECTION"));
				aContact.setReward_type(rs.getString("REWARD_TYPE"));
				aContact.setProduct(rs.getString("REWARD_PRODUCT"));
				aContact.setUnit(rs.getString("REWARD_UNIT"));
				aContact.setReward_date(rs.getDate("REWARD_DATE"));

				if (rs.getDate("REWARD_DATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy");
					String dateStr1 = ser1.format(rs.getDate("REWARD_DATE"));
					aContact.setReward_date1(dateStr1);
//			try {
//				System.out.println(ser1.parse(rs.getString("REWARD_DATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}

				aContact.setReward_ly(rs.getInt("REWARD_LY"));
				aContact.setReward_target(rs.getInt("REWARD_TARGET"));
				aContact.setReward_ty(rs.getInt("REWARD_TY"));
				aContact.setAdditional(rs.getInt("REWARD_ADDITIONAL"));
				aContact.setBase_total(rs.getInt("REWARD_BASE_TOTAL"));
				aContact.setReward_status(rs.getString("REWARD_Q_STATUS"));
				aContact.setReward_description(rs.getString("REWARD_DESCRIPTION"));
				aContact.setReward_total(rs.getInt("REWARD_TOTAL"));
				aContact.setAdjustments(rs.getFloat("REWARD_ADJUSTMENTS"));
				aContact.setAdjustment_reason(rs.getString("REWARD_ADJUSTMENT_REASON"));
				aContact.setAttribute1(rs.getString("ATTRIBUTE1"));
				aContact.setNext_tgt_pending(rs.getInt("REWARD_NEXT_TGT"));
				aContact.setReward_gift_id(rs.getString("REWARD_GIFT_ID"));
				aContact.setGift_to_cn_flag(rs.getString("REWARD_GIFT_TO_CN"));
				aContact.setConverted_cn_value(rs.getInt("REWARD_CONVERTED_CN"));
				aContact.setInterface_status(rs.getString("REWARD_I_STATUS"));

				aContact.setReward_last_update(rs.getDate("REWARD_LAST_UPDATE"));

				if (rs.getDate("REWARD_LAST_UPDATE") != null) {
					DateFormat ser1 = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss a");
					String dateStr1 = ser1.format(rs.getTimestamp("REWARD_LAST_UPDATE"));
					aContact.setReward_last_update1(dateStr1);
//			try {
////				System.out.println(ser1.parse(rs.getString("REWARD_LAST_UPDATE")));
//			} catch (ParseException e) {
//					e.printStackTrace();
//			}
				}
				System.out.println("reward scheme id is :- "+aContact.getScheme_id());
				return aContact;
			}

		});

//	        	  String sql2 = "SELECT TO_CHAR(MAX(REWARD_LAST_UPDATE), 'DD-MON-YY HH:MI AM') RW_LAST_UPDATE FROM BPIL_OPA_RW_ANALYSIS_RW WHERE REWARD_SCHEME_ID = '"+scheme_name+"' "; 

//	      		List<String> lastupadate = jdbcTemplate.query(sql2, new RowMapper<String>() {
//	      			
//	      		
//	      			@Override
//	      			
//	      			public String mapRow(ResultSet rs, int rowNum) throws SQLException {
//	      				
//	      			
//	      				String rw_last_update = rs.getString("RW_LAST_UPDATE");
//	      				
//	      								
//
//	      				
//	      				return rw_last_update;
//	      			}
//	      			
//	      		});

//	      		String LastRefresh = "";
//	      		
//	      		if(lastupadate.size() > 0) {
//	      		
//	      			LastRefresh = lastupadate.get(0);
//
//	      		}
		System.out.println("Size of list"+dml.size());
		model.addAttribute("Info_grid", dml);

//		          model.addAttribute("LastRefresh",LastRefresh);

//		          model.addAttribute("depo_code",depot_code);
//		          model.addAttribute("dealer_code",dealer_name);
//		          model.addAttribute("dealer_billto",bill_to_id);
//		          }
//		          model.addAttribute("scheme_id",scheme_name);
//		    	  }

		return new ModelAndView("AdjustRewardApprove");
	}

	@RequestMapping("/dealerreward")
	public ModelAndView dealerreward(ModelMap map, Model model, HttpServletRequest request) {

		return new ModelAndView("DealerReward");
	}

	// getting status for hidding process button on process reward
	@RequestMapping(value = "/getstatus", method = RequestMethod.GET)
	public void getstatus(@RequestParam(value = "scheme_id") String scheme_id, HttpServletRequest request, Model model,
			HttpServletResponse response) {

		try {

			ArrayList<New_Scheme_mstr> dml = (ArrayList<New_Scheme_mstr>) hibernateTemplate
					.find("from New_Scheme_mstr where scheme_id='" + scheme_id + "'");

			String json = null;

			json = new Gson().toJson(dml);
			response.setContentType("application/json");
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	@RequestMapping("/downloadMxLfRDCSchAnReportSoap")
	public ModelAndView downloadMxLfRDCSchAnReportSoap(ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		List<MaxLife_RDC_AGENT> maxlife_Agents = (List<MaxLife_RDC_AGENT>) session.getAttribute("agents");


			// generate scheme analysis report in excel
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbook.createSheet("RDC Scheme Analysis Report.xlsx");

			XSSFFont font = workbook.createFont();
			font.setFontHeightInPoints((short) 12);
			font.setBold(true);

			CellStyle cellstyle = workbook.createCellStyle();
			CellStyle cellstyle1 = workbook.createCellStyle();
			cellstyle.setWrapText(true);
			cellstyle.setFont(font);

			XSSFRow row = spreadsheet.createRow(0);
			XSSFCell cell;

			cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

			cell = row.createCell(0);
			cell.setCellValue("ADM ID");
			cellstyle.setLocked(true);
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(0, 3200);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

			cell = row.createCell(1);
			cell.setCellValue("Agent ID");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(1, 2500);

			cell = row.createCell(2);
			cell.setCellValue("Agent Status");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(2, 4000);

			cell = row.createCell(3);
			cell.setCellValue("ITD Vintage");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(3, 1500);

			cell = row.createCell(4);
			cell.setCellValue("YTD Vintage");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(4, 5000);

			cell = row.createCell(5);
			cell.setCellValue("MTD Target");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(5, 1500);

			cell = row.createCell(6);
			cell.setCellValue("YTD Target");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(6, 4000);

			cell = row.createCell(7);
			cell.setCellValue("MTD Actual");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(7, 3000);

			cell = row.createCell(8);
			cell.setCellValue("YTD Actual");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(8, 2000);

			cell = row.createCell(9);
			cell.setCellValue("Proactivity Status");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(9, 2200);

			cell = row.createCell(10);
			cell.setCellValue("Multiplying factor");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(10, 2000);

			cell = row.createCell(11);
			cell.setCellValue("Gross Payout");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);

			cell = row.createCell(12);
			cell.setCellValue("Already Paid Till Now");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);
			
			cell = row.createCell(13);
			cell.setCellValue("Net Payout");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(13, 6000);

			
			int j = 1;

			Iterator<MaxLife_RDC_AGENT> itr = maxlife_Agents.iterator();
			while (itr.hasNext()) {
				MaxLife_RDC_AGENT ex = itr.next();

				row = spreadsheet.createRow(j);

				XSSFCellStyle style = workbook.createCellStyle();

				cell = row.createCell(0);
				cell.setCellValue(ex.getAadm_id());
				cell.setCellStyle(style);

				cell = row.createCell(1);
				cell.setCellValue(ex.getAgent_id());
				cell.setCellStyle(style);

				cell = row.createCell(2);
				cell.setCellValue(ex.getAgent_status());
				cell.setCellStyle(style);

				cell = row.createCell(3);
				cell.setCellValue(ex.getAgent_itd_vintage());
				cell.setCellStyle(style);
				
				cell = row.createCell(4);
				cell.setCellValue(ex.getAgent_ytd_vintage());
				cell.setCellStyle(style);

				cell = row.createCell(5);
				cell.setCellValue(ex.getAgent_mtd_target());
				cell.setCellStyle(style);

				cell = row.createCell(6);
				cell.setCellValue(ex.getAgent_ytd_target());
				cell.setCellStyle(style);

				cell = row.createCell(7);
				cell.setCellValue(ex.getAgent_mtd_actual());
				cell.setCellStyle(style);

				cell = row.createCell(8);
				cell.setCellValue(ex.getAgent_ytd_actual());
				cell.setCellStyle(style);

				cell = row.createCell(9);
				cell.setCellValue(ex.getProactivity_status());
				cell.setCellStyle(style);

				cell = row.createCell(10);
				cell.setCellValue(ex.getMultiplying_factor());
				cell.setCellStyle(style);

				cell = row.createCell(11);
				cell.setCellValue(ex.getGross_payout());
				cell.setCellStyle(style);

				cell = row.createCell(12);
				cell.setCellValue(ex.getAgent_already_paid());
				cell.setCellStyle(style);
				
				cell = row.createCell(13);
				cell.setCellValue(ex.getNet_payout());
				cell.setCellStyle(style);

				j++;
			}

			try {
				// to upload excel file
				String filename = "RDC Scheme Analysis Report.xlsx";
				String filepath = request.getServletContext().getRealPath("/ruledocs");
				System.out.println(filepath);

				File exportExcelfile = new File(filepath + "/" + filename);
				exportExcelfile.createNewFile();
				System.out.println(exportExcelfile.getAbsolutePath());
				String exportExcelfilepath = exportExcelfile.getAbsolutePath();
				FileInputStream in = new FileInputStream(exportExcelfile);
				FileOutputStream out = new FileOutputStream(exportExcelfilepath);

				workbook.write(out);
				out.close();

				// to download excel file
				int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
				response.setContentType("text/html");
				PrintWriter out1 = response.getWriter();
				String fileName = "RDC Scheme Analysis Report.xlsx";
				response.setContentType("APPLICATION/OCTET-STREAM");
				response.setContentLengthLong(exportExcelfile.length());
				response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

				int i;
				while ((i = in.read()) != -1) {
					out1.write(i);
				}

				out1.close();

				exportExcelfile.delete();

				in.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

		return new ModelAndView("MaxLifeRDCSchemeAnalysis");
	}
	
	@RequestMapping("/downloadSalesSchAnReportSoap")
	public ModelAndView downloadSalesSchAnReportSoap(ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		List<Sales_Incentive> rewards = (List<Sales_Incentive>) session.getAttribute("rewards");
		Sales_Incentive final_rewards = (Sales_Incentive) session.getAttribute("Final_Incentives");


			// generate scheme analysis report in excel
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbook.createSheet("Scheme Analysis Report.xlsx");

			XSSFFont font = workbook.createFont();
			font.setFontHeightInPoints((short) 12);
			font.setBold(true);

			CellStyle cellstyle = workbook.createCellStyle();
			CellStyle cellstyle1 = workbook.createCellStyle();
			cellstyle.setWrapText(true);
			cellstyle.setFont(font);

			XSSFRow row = spreadsheet.createRow(0);
			XSSFCell cell;

			cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

			cell = row.createCell(0);
			cell.setCellValue("ID");
			cellstyle.setLocked(true);
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(0, 1000);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

			cell = row.createCell(1);
			cell.setCellValue("Actual Basic Pay");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(1, 2500);

			cell = row.createCell(2);
			cell.setCellValue("Employee Name");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(2, 4000);

			cell = row.createCell(3);
			cell.setCellValue("Department");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(3, 1500);

			cell = row.createCell(4);
			cell.setCellValue("Processed Average Basic Pay");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(4, 5000);

			cell = row.createCell(5);
			cell.setCellValue("Basic Proportion");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(5, 2500);

			cell = row.createCell(6);
			cell.setCellValue("Designation");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(6, 4000);

			cell = row.createCell(7);
			cell.setCellValue("Flat Incentive");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(7, 3000);

			cell = row.createCell(8);
			cell.setCellValue("Quarterly Performance Rating by HOD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(8, 2000);

			cell = row.createCell(9);
			cell.setCellValue("Performance Proportion");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(9, 2200);

			cell = row.createCell(10);
			cell.setCellValue("Performance Incentive");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(10, 2000);

			cell = row.createCell(11);
			cell.setCellValue("Additional Incentive");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);

			cell = row.createCell(12);
			cell.setCellValue("Total Payable");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);
			
			int j = 1;

			Iterator<Sales_Incentive> itr = rewards.iterator();
			while (itr.hasNext()) {
				Sales_Incentive ex = itr.next();

				row = spreadsheet.createRow(j);

				XSSFCellStyle style = workbook.createCellStyle();

				cell = row.createCell(0);
				cell.setCellValue(ex.getId());
				cell.setCellStyle(style);

				cell = row.createCell(1);
				cell.setCellValue(ex.getActual_basic_pay());
				cell.setCellStyle(style);

				cell = row.createCell(2);
				cell.setCellValue(ex.getEmp_name());
				cell.setCellStyle(style);

				cell = row.createCell(3);
				cell.setCellValue(ex.getDepartment());
				cell.setCellStyle(style);
				
				cell = row.createCell(4);
				cell.setCellValue(ex.getProcessed_basic_average_pay());
				cell.setCellStyle(style);

				cell = row.createCell(5);
				cell.setCellValue(ex.getBasic_proportion());
				cell.setCellStyle(style);

				cell = row.createCell(6);
				cell.setCellValue(ex.getDesignation());
				cell.setCellStyle(style);

				cell = row.createCell(7);
				cell.setCellValue(ex.getFlat_incentive());
				cell.setCellStyle(style);

				cell = row.createCell(8);
				cell.setCellValue(ex.getQuarterly_performance_rating_by_hod());
				cell.setCellStyle(style);

				cell = row.createCell(9);
				cell.setCellValue(ex.getPerformance_proportion());
				cell.setCellStyle(style);

				cell = row.createCell(10);
				cell.setCellValue(ex.getPerformance_incentive());
				cell.setCellStyle(style);

				cell = row.createCell(11);
				cell.setCellValue(ex.getAdditional_incentive());
				cell.setCellStyle(style);

				cell = row.createCell(12);
				cell.setCellValue(ex.getTotal_payable());
				cell.setCellStyle(style);

				j++;
			}
			
			XSSFRow row1 = spreadsheet.createRow(j+2);
			XSSFCell cell1;

			cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

			cell1 = row1.createCell(0);
			cell1.setCellValue("Incentive for Lead");
			cellstyle.setLocked(true);
			cell1.setCellStyle(cellstyle);
			cell1.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(0, 3000);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
			
			cell1 = row1.createCell(1);
			cell1.setCellValue("Performance Incentive");
			cellstyle.setLocked(true);
			cell1.setCellStyle(cellstyle);
			cell1.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(1, 3000);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
			
			cell1 = row1.createCell(2);
			cell1.setCellValue("Additional Incentive");
			cellstyle.setLocked(true);
			cell1.setCellStyle(cellstyle);
			cell1.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(3, 3000);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
			
			row1 = spreadsheet.createRow(j+3);
			
			XSSFCellStyle style = workbook.createCellStyle();

			cell1 = row1.createCell(0);
			cell1.setCellValue(final_rewards.getFinal_flat_incentive());
			cell1.setCellStyle(style);
			
			cell1 = row1.createCell(1);
			cell1.setCellValue(final_rewards.getFinal_performance_incentive());
			cell1.setCellStyle(style);
			
			cell1 = row1.createCell(2);
			cell1.setCellValue(final_rewards.getFinal_additional_incentive());
			cell1.setCellStyle(style);

			try {
				// to upload excel file
				String filename = "Scheme Analysis Report.xlsx";
				String filepath = request.getServletContext().getRealPath("/ruledocs");
				System.out.println(filepath);

				File exportExcelfile = new File(filepath + "/" + filename);
				exportExcelfile.createNewFile();
				System.out.println(exportExcelfile.getAbsolutePath());
				String exportExcelfilepath = exportExcelfile.getAbsolutePath();
				FileInputStream in = new FileInputStream(exportExcelfile);
				FileOutputStream out = new FileOutputStream(exportExcelfilepath);

				workbook.write(out);
				out.close();

				// to download excel file
				int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
				response.setContentType("text/html");
				PrintWriter out1 = response.getWriter();
				String fileName = "Scheme Analysis Report.xlsx";
				response.setContentType("APPLICATION/OCTET-STREAM");
				response.setContentLengthLong(exportExcelfile.length());
				response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

				int i;
				while ((i = in.read()) != -1) {
					out1.write(i);
				}

				out1.close();

				exportExcelfile.delete();

				in.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

		return new ModelAndView("SalesSchemeAnalysis");
	}
	
	@RequestMapping("/downloadVodafoneSchAnReportSoap")
	public ModelAndView downloadVodafoneSchAnReportSoap(ModelMap map, Model model, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		String sql = "select * from vodafone_reward where emp_name IN (select emp_name from vodafone_reward group by emp_name)order by emp_name,range";
		
		
		 List<Vodafone_Rewards> rewards = jdbcTemplate.query(sql, new RowMapper<Vodafone_Rewards>() {

				@Override
				public Vodafone_Rewards mapRow(ResultSet rs, int rowNum) throws SQLException {
					Vodafone_Rewards rewards = new Vodafone_Rewards();
					rewards.setRw_id(rs.getInt("RW_ID"));
					rewards.setRange(rs.getString("RANGE"));
					rewards.setCircle(rs.getString("CIRCLE"));
					rewards.setEmp_name(rs.getString("EMP_NAME"));
					rewards.setEmp_code(rs.getInt("EMP_CODE"));
					rewards.setRole(rs.getString("ROLE"));
					rewards.setEmp_status(rs.getString("EMP_STATUS"));
					rewards.setMonth(rs.getString("MONTH"));
					rewards.setTarget_payout(rs.getInt("TARGET_PAYOUT"));
					
					rewards.setP1_monthly_tgt(rs.getInt("P1_MONTHLY_TGT"));
					rewards.setP1_monthly_ach(rs.getInt("P1_MONTHLY_ACH"));
					rewards.setP1_cum_tgt(rs.getFloat("P1_CUM_TGT"));
					rewards.setP1_cum_ach(rs.getFloat("P1_CUM_ACH"));
					rewards.setP1_monthly_ach_per(rs.getFloat("P1_PER_MONTH_ACH"));
					rewards.setP1_cum_ach_per(rs.getFloat("P1_PER_CUM_ACH"));
					rewards.setP1_mtd(rs.getFloat("P1_PAYOUT_MTD"));
					rewards.setP1_ytd(rs.getFloat("P1_PAYOUT_YTD"));
					rewards.setP1_weightage(rs.getFloat("P1_WEIGHTAGE"));
					
					rewards.setP2_mb_monthly_tgt(rs.getInt("P2_MOB_MONTHLY_TGT"));
					rewards.setP2_mb_monthly_ach(rs.getInt("P2_MOB_MONTHLY_ACH"));
					rewards.setP2_mb_cum_tgt(rs.getFloat("P2_MOB_CUM_TGT"));
					rewards.setP2_mb_cum_ach(rs.getFloat("P2_MOB_CUM_ACH"));
					rewards.setP2_mb_monthly_ach_per(rs.getFloat("P2_PER_MOB_MONTH_ACH"));
					rewards.setP2_mb_cum_ach_per(rs.getFloat("P2_MOB_PER_CUM_ACH"));
					
					rewards.setP2_fld_monthly_tgt(rs.getInt("P2_FLD_MONTHLY_TGT"));
					rewards.setP2_fld_monthly_ach(rs.getInt("P2_FLD_MONTHLY_ACH"));
					rewards.setP2_fld_cum_tgt(rs.getFloat("P2_FLD_CUM_TGT"));
					rewards.setP2_fld_cum_ach(rs.getFloat("P2_FLD_CUM_ACH"));
					rewards.setP2_fld_monthly_ach_per(rs.getFloat("P2_FLD_PER_MONTH_ACH"));
					rewards.setP2_fld_cum_ach_per(rs.getFloat("P2_FLD_PER_CUM_ACH"));
					
					rewards.setP2_flv_monthly_tgt(rs.getInt("P2_FLV_MONTHLY_TGT"));
					rewards.setP2_flv_monthly_ach(rs.getInt("P2_FLV_MONTHLY_ACH"));
					rewards.setP2_flv_cum_tgt(rs.getFloat("P2_FLV_CUM_TGT"));
					rewards.setP2_flv_cum_ach(rs.getFloat("P2_FLV_CUM_ACH"));
					rewards.setP2_flv_monthly_ach_per(rs.getFloat("P2_FLV_PER_MONTH_ACH"));
					rewards.setP2_flv_cum_ach_per(rs.getFloat("P2_FLV_PER_CUM_ACH"));
					
					rewards.setP2_iot_monthly_tgt(rs.getInt("P2_IOT_MONTHLY_TGT"));
					rewards.setP2_iot_monthly_ach(rs.getInt("P2_IOT_MONTHLY_ACH"));
					rewards.setP2_iot_cum_tgt(rs.getFloat("P2_IOT_CUM_TGT"));
					rewards.setP2_iot_cum_ach(rs.getFloat("P2_IOT_CUM_ACH"));
					rewards.setP2_iot_monthly_ach_per(rs.getFloat("P2_IOT_PER_MONTH_ACH"));
					rewards.setP2_iot_cum_ach_per(rs.getFloat("P2_IOT_PER_CUM_ACH"));
					
					rewards.setP2_cloud_monthly_tgt(rs.getInt("P2_CLD_MONTHLY_TGT"));
					rewards.setP2_cloud_monthly_ach(rs.getInt("P2_CLD_MONTHLY_ACH"));
					rewards.setP2_cloud_cum_tgt(rs.getFloat("P2_CLD_CUM_TGT"));
					rewards.setP2_cloud_cum_ach(rs.getFloat("P2_CLD_CUM_ACH"));
					rewards.setP2_cloud_monthly_ach_per(rs.getFloat("P2_CLD_PER_MONTH_ACH"));
					rewards.setP2_cloud_cum_ach_per(rs.getFloat("P2_CLD_PER_CUM_ACH"));
					
					rewards.setP2_monthly_ach(rs.getFloat("P2_TOT_PER_MONTH_ACH"));
					rewards.setP2_cum_ach(rs.getFloat("P2_TOT_PER_CUM_ACH"));
					rewards.setP2_mtd(rs.getFloat("P2_TOT_PAYOUT_MTD"));
					rewards.setP2_ytd(rs.getFloat("P2_TOT_PAYOUT_YTD"));
					rewards.setP2_weightage(rs.getFloat("P2_TOT_WEIGHTAGE"));
					
					rewards.setP3_seg1_monthly_tgt(rs.getInt("P3_SEG1_MONTHLY_TGT"));
					rewards.setP3_seg1_monthly_ach(rs.getInt("P3_SEG1_MONTHLY_ACH"));
					rewards.setP3_seg1_cum_tgt(rs.getFloat("P3_SEG1_CUM_TGT"));
					rewards.setP3_seg1_cum_ach(rs.getFloat("P3_SEG1_CUM_ACH"));
					rewards.setP3_seg1_monthly_ach_per(rs.getFloat("P3_SEG1_PER_MONTH_ACH"));
					rewards.setP3_seg1_cum_ach_per(rs.getFloat("P3_SEG1_PER_CUM_ACH"));
					
					rewards.setP3_seg2_monthly_tgt(rs.getInt("P3_SEG2_MONTHLY_TGT"));
					rewards.setP3_seg2_monthly_ach(rs.getInt("P3_SEG2_MONTHLY_ACH"));
					rewards.setP3_seg2_cum_tgt(rs.getFloat("P3_SEG2_CUM_TGT"));
					rewards.setP3_seg2_cum_ach(rs.getFloat("P3_SEG2_CUM_ACH"));
					rewards.setP3_seg2_monthly_ach_per(rs.getFloat("P3_SEG2_PER_MONTH_ACH"));
					rewards.setP3_seg2_cum_ach_per(rs.getFloat("P3_SEG2_PER_CUM_ACH"));
					
					rewards.setP3_monthly_ach(rs.getFloat("P3_TOT_PER_MONTH_ACH"));
					rewards.setP3_cum_ach(rs.getFloat("P3_TOT_PER_CUM_ACH"));
					rewards.setP3_mtd(rs.getFloat("P3_TOT_PAYOUT_MTD"));
					rewards.setP3_ytd(rs.getFloat("P3_TOT_PAYOUT_YTD"));
					rewards.setP3_weightage(rs.getFloat("P3_TOT_WEIGHTAGE"));
					
					rewards.setP1_qtd_payout(rs.getInt("P1_QTD_PAYOUT"));
					rewards.setP1_ytd_payout(rs.getInt("P1_YTD_PAYOUT"));
					rewards.setP2_qtd_payout(rs.getInt("P2_QTD_PAYOUT"));
					rewards.setP2_ytd_payout(rs.getInt("P2_YTD_PAYOUT"));
					rewards.setP3_qtd_payout(rs.getInt("P3_QTD_PAYOUT"));
					rewards.setP3_ytd_payout(rs.getInt("P3_YTD_PAYOUT"));
					rewards.setOverall_ach(rs.getFloat("OVERALL_ACH"));
					
					rewards.setTotal_payout_sip(rs.getInt("TOT_PAYOUT_SIP"));
					rewards.setFinal_payout_amt(rs.getInt("FINAL_PAYOUT_AMT"));
					
					return rewards;
				}
				
			});


			// generate scheme analysis report in excel
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet spreadsheet = workbook.createSheet("Vodafone Scheme Analysis Report.xlsx");

			XSSFFont font = workbook.createFont();
			font.setFontHeightInPoints((short) 12);
			font.setBold(true);

			CellStyle cellstyle = workbook.createCellStyle();
			CellStyle cellstyle1 = workbook.createCellStyle();
			cellstyle.setWrapText(true);
			cellstyle.setFont(font);

			XSSFRow row = spreadsheet.createRow(0);
			XSSFCell cell;

			cellstyle1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			cellstyle1.setFillPattern(CellStyle.SOLID_FOREGROUND);

			cell = row.createCell(0);
			cell.setCellValue("RW_ID");
			cellstyle.setLocked(true);
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(0, 3200);
			cellstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);

			cell = row.createCell(1);
			cell.setCellValue("RANGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(1, 2500);

			cell = row.createCell(2);
			cell.setCellValue("CIRCLE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(2, 4000);

			cell = row.createCell(3);
			cell.setCellValue("EMP_NAME");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(3, 1500);

			cell = row.createCell(4);
			cell.setCellValue("EMP_CODE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(4, 5000);

			cell = row.createCell(5);
			cell.setCellValue("ROLE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(5, 1500);

			cell = row.createCell(6);
			cell.setCellValue("EMP_STATUS");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(6, 4000);

			cell = row.createCell(7);
			cell.setCellValue("MONTH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(7, 3000);

			cell = row.createCell(8);
			cell.setCellValue("TARGET_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(8, 2000);

			cell = row.createCell(9);
			cell.setCellValue("P1_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(9, 2200);

			cell = row.createCell(10);
			cell.setCellValue("P1_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(10, 2000);

			cell = row.createCell(11);
			cell.setCellValue("P1_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);

			cell = row.createCell(12);
			cell.setCellValue("P1_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(11, 5000);
			
			cell = row.createCell(13);
			cell.setCellValue("P1_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(13, 6000);
			
			cell = row.createCell(14);
			cell.setCellValue("P1_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(14, 6000);
			
			cell = row.createCell(15);
			cell.setCellValue("P1_PAYOUT_MTD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(15, 6000);
			
			cell = row.createCell(16);
			cell.setCellValue("P1_PAYOUT_YTD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(16, 6000);
			
			cell = row.createCell(17);
			cell.setCellValue("P1_WEIGHTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(17, 6000);
			
			cell = row.createCell(18);
			cell.setCellValue("P2_MOB_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(18, 6000);
			
			cell = row.createCell(19);
			cell.setCellValue("P2_MOB_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(19, 6000);
			
			cell = row.createCell(20);
			cell.setCellValue("P2_MOB_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(20, 6000);
			
			cell = row.createCell(21);
			cell.setCellValue("P2_MOB_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(21, 6000);
			
			cell = row.createCell(22);
			cell.setCellValue("P2_PER_MOB_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(22, 6000);
			
			cell = row.createCell(23);
			cell.setCellValue("P2_MOB_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(23, 6000);
			
			cell = row.createCell(24);
			cell.setCellValue("P2_FLD_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(24, 6000);
			
			cell = row.createCell(25);
			cell.setCellValue("P2_FLD_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(25, 6000);
			
			cell = row.createCell(26);
			cell.setCellValue("P2_FLD_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(26, 6000);
			
			cell = row.createCell(27);
			cell.setCellValue("P2_FLD_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(27, 6000);
			
			cell = row.createCell(28);
			cell.setCellValue("P2_FLD_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(28, 6000);
			
			cell = row.createCell(29);
			cell.setCellValue("P2_FLD_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(29, 6000);
			
			cell = row.createCell(30);
			cell.setCellValue("P2_FLV_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(30, 6000);
			
			cell = row.createCell(31);
			cell.setCellValue("P2_FLV_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(31, 6000);
			
			cell = row.createCell(32);
			cell.setCellValue("P2_FLV_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(32, 6000);
			
			cell = row.createCell(33);
			cell.setCellValue("P2_FLV_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(33, 6000);
			
			cell = row.createCell(34);
			cell.setCellValue("P2_FLV_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(34, 6000);
			
			cell = row.createCell(35);
			cell.setCellValue("P2_FLV_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(35, 6000);
			
			cell = row.createCell(36);
			cell.setCellValue("P2_IOT_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(36, 6000);
			
			cell = row.createCell(37);
			cell.setCellValue("P2_IOT_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(37, 6000);
			
			cell = row.createCell(38);
			cell.setCellValue("P2_IOT_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(38, 6000);
			
			cell = row.createCell(39);
			cell.setCellValue("P2_IOT_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(39, 6000);
			
			cell = row.createCell(40);
			cell.setCellValue("P2_IOT_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(40, 6000);
			
			cell = row.createCell(41);
			cell.setCellValue("P2_IOT_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(41, 6000);
			
			cell = row.createCell(42);
			cell.setCellValue("P2_CLD_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(42, 6000);
			
			cell = row.createCell(43);
			cell.setCellValue("P2_CLD_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(43, 6000);
			
			cell = row.createCell(44);
			cell.setCellValue("P2_CLD_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(44, 6000);
			
			cell = row.createCell(45);
			cell.setCellValue("P2_CLD_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(45, 6000);
			
			cell = row.createCell(46);
			cell.setCellValue("P2_CLD_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(46, 6000);
			
			cell = row.createCell(47);
			cell.setCellValue("P2_CLD_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(47, 6000);
			
			cell = row.createCell(48);
			cell.setCellValue("P2_TOT_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(48, 6000);
			
			cell = row.createCell(49);
			cell.setCellValue("P2_TOT_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(49, 6000);
			
			cell = row.createCell(50);
			cell.setCellValue("P2_TOT_PAYOUT_MTD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(50, 6000);
			
			cell = row.createCell(51);
			cell.setCellValue("P2_TOT_PAYOUT_YTD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(51, 6000);
			
			cell = row.createCell(52);
			cell.setCellValue("P2_TOT_WEIGHTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(52, 6000);
			
			cell = row.createCell(53);
			cell.setCellValue("P3_SEG1_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(53, 6000);
			
			cell = row.createCell(54);
			cell.setCellValue("P3_SEG1_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(54, 6000);
			
			cell = row.createCell(55);
			cell.setCellValue("P3_SEG1_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(55, 6000);
			
			cell = row.createCell(56);
			cell.setCellValue("P3_SEG1_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(56, 6000);
			
			cell = row.createCell(57);
			cell.setCellValue("P3_SEG1_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(57, 6000);
			
			cell = row.createCell(58);
			cell.setCellValue("P3_SEG1_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(58, 6000);
			
			cell = row.createCell(59);
			cell.setCellValue("P3_SEG2_MONTHLY_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(59, 6000);
			
			cell = row.createCell(60);
			cell.setCellValue("P3_SEG2_MONTHLY_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(60, 6000);
			
			cell = row.createCell(61);
			cell.setCellValue("P3_SEG2_CUM_TGT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(61, 6000);
			
			cell = row.createCell(62);
			cell.setCellValue("P3_SEG2_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(62, 6000);
			
			cell = row.createCell(63);
			cell.setCellValue("P3_SEG2_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(63, 6000);
			
			cell = row.createCell(64);
			cell.setCellValue("P3_SEG2_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(64, 6000);
			
			cell = row.createCell(65);
			cell.setCellValue("P3_TOT_PER_MONTH_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(65, 6000);
			
			cell = row.createCell(66);
			cell.setCellValue("P3_TOT_PER_CUM_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(66, 6000);
			
			cell = row.createCell(67);
			cell.setCellValue("P3_TOT_PAYOUT_MTD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(67, 6000);
			
			cell = row.createCell(68);
			cell.setCellValue("P3_TOT_PAYOUT_YTD");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(68, 6000);
			
			cell = row.createCell(69);
			cell.setCellValue("P3_TOT_WEIGHTAGE");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(69, 6000);
			
			cell = row.createCell(70);
			cell.setCellValue("OVERALL_ACH");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(70, 6000);

			cell = row.createCell(71);
			cell.setCellValue("P1_QTD_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(71, 6000);
			
			cell = row.createCell(72);
			cell.setCellValue("P1_YTD_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(72, 6000);

			cell = row.createCell(73);
			cell.setCellValue("P2_QTD_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(73, 6000);

			cell = row.createCell(74);
			cell.setCellValue("P2_YTD_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(74, 6000);

			cell = row.createCell(75);
			cell.setCellValue("P3_QTD_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(75, 6000);

			cell = row.createCell(76);
			cell.setCellValue("P3_YTD_PAYOUT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(76, 6000);

			cell = row.createCell(77);
			cell.setCellValue("TOT_PAYOUT_SIP");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(77, 6000);

			cell = row.createCell(78);
			cell.setCellValue("FINAL_PAYOUT_AMT");
			cell.setCellStyle(cellstyle);
			cell.setCellStyle(cellstyle1);
			spreadsheet.setColumnWidth(78, 6000);

			
			int j = 1;

			Iterator<Vodafone_Rewards> itr = rewards.iterator();
			while (itr.hasNext()) {
				Vodafone_Rewards ex = itr.next();

				row = spreadsheet.createRow(j);

				XSSFCellStyle style = workbook.createCellStyle();

				cell = row.createCell(0);
				cell.setCellValue(ex.getRw_id());
				cell.setCellStyle(style);

				cell = row.createCell(1);
				cell.setCellValue(ex.getRange());
				cell.setCellStyle(style);

				cell = row.createCell(2);
				cell.setCellValue(ex.getCircle());
				cell.setCellStyle(style);

				cell = row.createCell(3);
				cell.setCellValue(ex.getEmp_name());
				cell.setCellStyle(style);
				
				cell = row.createCell(4);
				cell.setCellValue(ex.getEmp_code());
				cell.setCellStyle(style);

				cell = row.createCell(5);
				cell.setCellValue(ex.getRole());
				cell.setCellStyle(style);

				cell = row.createCell(6);
				cell.setCellValue(ex.getEmp_status());
				cell.setCellStyle(style);

				cell = row.createCell(7);
				cell.setCellValue(ex.getMonth());
				cell.setCellStyle(style);

				cell = row.createCell(8);
				cell.setCellValue(ex.getTarget_payout());
				cell.setCellStyle(style);

				cell = row.createCell(9);
				cell.setCellValue(ex.getP1_monthly_tgt());
				cell.setCellStyle(style);

				cell = row.createCell(10);
				cell.setCellValue(ex.getP1_monthly_ach());
				cell.setCellStyle(style);

				cell = row.createCell(11);
				cell.setCellValue(ex.getP1_cum_tgt());
				cell.setCellStyle(style);

				cell = row.createCell(12);
				cell.setCellValue(ex.getP1_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(13);
				cell.setCellValue(ex.getP1_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(14);
				cell.setCellValue(ex.getP1_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(15);
				cell.setCellValue(ex.getP1_mtd());
				cell.setCellStyle(style);
				
				cell = row.createCell(16);
				cell.setCellValue(ex.getP1_ytd());
				cell.setCellStyle(style);
				
				cell = row.createCell(17);
				cell.setCellValue(ex.getP1_weightage());
				cell.setCellStyle(style);
				
				cell = row.createCell(18);
				cell.setCellValue(ex.getP2_mb_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(19);
				cell.setCellValue(ex.getP2_mb_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(20);
				cell.setCellValue(ex.getP2_mb_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(21);
				cell.setCellValue(ex.getP2_mb_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(22);
				cell.setCellValue(ex.getP2_mb_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(23);
				cell.setCellValue(ex.getP2_mb_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(24);
				cell.setCellValue(ex.getP2_fld_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(25);
				cell.setCellValue(ex.getP2_fld_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(26);
				cell.setCellValue(ex.getP2_fld_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(27);
				cell.setCellValue(ex.getP2_fld_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(28);
				cell.setCellValue(ex.getP2_fld_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(29);
				cell.setCellValue(ex.getP2_fld_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(30);
				cell.setCellValue(ex.getP2_flv_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(31);
				cell.setCellValue(ex.getP2_flv_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(32);
				cell.setCellValue(ex.getP2_flv_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(33);
				cell.setCellValue(ex.getP2_flv_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(34);
				cell.setCellValue(ex.getP2_flv_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(35);
				cell.setCellValue(ex.getP2_flv_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(36);
				cell.setCellValue(ex.getP2_iot_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(37);
				cell.setCellValue(ex.getP2_iot_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(38);
				cell.setCellValue(ex.getP2_iot_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(39);
				cell.setCellValue(ex.getP2_iot_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(40);
				cell.setCellValue(ex.getP2_iot_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(41);
				cell.setCellValue(ex.getP2_iot_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(42);
				cell.setCellValue(ex.getP2_cloud_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(43);
				cell.setCellValue(ex.getP2_cloud_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(44);
				cell.setCellValue(ex.getP2_cloud_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(45);
				cell.setCellValue(ex.getP2_cloud_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(46);
				cell.setCellValue(ex.getP2_cloud_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(47);
				cell.setCellValue(ex.getP2_cloud_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(48);
				cell.setCellValue(ex.getP2_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(49);
				cell.setCellValue(ex.getP2_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(50);
				cell.setCellValue(ex.getP2_mtd());
				cell.setCellStyle(style);
				
				cell = row.createCell(51);
				cell.setCellValue(ex.getP2_ytd());
				cell.setCellStyle(style);
				
				cell = row.createCell(52);
				cell.setCellValue(ex.getP2_weightage());
				cell.setCellStyle(style);
				
				cell = row.createCell(53);
				cell.setCellValue(ex.getP3_seg1_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(54);
				cell.setCellValue(ex.getP3_seg1_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(55);
				cell.setCellValue(ex.getP3_seg1_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(56);
				cell.setCellValue(ex.getP3_seg1_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(57);
				cell.setCellValue(ex.getP3_seg1_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(58);
				cell.setCellValue(ex.getP3_seg1_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(59);
				cell.setCellValue(ex.getP3_seg2_monthly_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(60);
				cell.setCellValue(ex.getP3_seg2_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(61);
				cell.setCellValue(ex.getP3_seg2_cum_tgt());
				cell.setCellStyle(style);
				
				cell = row.createCell(62);
				cell.setCellValue(ex.getP3_seg2_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(63);
				cell.setCellValue(ex.getP3_seg2_monthly_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(64);
				cell.setCellValue(ex.getP3_seg2_cum_ach_per());
				cell.setCellStyle(style);
				
				cell = row.createCell(65);
				cell.setCellValue(ex.getP3_monthly_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(66);
				cell.setCellValue(ex.getP3_cum_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(67);
				cell.setCellValue(ex.getP3_mtd());
				cell.setCellStyle(style);
				
				cell = row.createCell(68);
				cell.setCellValue(ex.getP3_ytd());
				cell.setCellStyle(style);
				
				cell = row.createCell(69);
				cell.setCellValue(ex.getP3_weightage());
				cell.setCellStyle(style);
				
				cell = row.createCell(70);
				cell.setCellValue(ex.getP1_qtd_payout());
				cell.setCellStyle(style);
				
				cell = row.createCell(71);
				cell.setCellValue(ex.getP1_ytd_payout());
				cell.setCellStyle(style);
				
				cell = row.createCell(72);
				cell.setCellValue(ex.getP2_qtd_payout());
				cell.setCellStyle(style);
				
				cell = row.createCell(73);
				cell.setCellValue(ex.getP2_ytd_payout());
				cell.setCellStyle(style);
				
				cell = row.createCell(74);
				cell.setCellValue(ex.getP3_qtd_payout());
				cell.setCellStyle(style);
				
				cell = row.createCell(75);
				cell.setCellValue(ex.getP3_ytd_payout());
				cell.setCellStyle(style);
				
				cell = row.createCell(76);
				cell.setCellValue(ex.getOverall_ach());
				cell.setCellStyle(style);
				
				cell = row.createCell(77);
				cell.setCellValue(ex.getTotal_payout_sip());
				cell.setCellStyle(style);
				
				cell = row.createCell(78);
				cell.setCellValue(ex.getFinal_payout_amt());
				cell.setCellStyle(style);

				j++;
			}

			try {
				// to upload excel file
				String filename = "Vodafone Scheme Analysis Report.xlsx";
				String filepath = request.getServletContext().getRealPath("/ruledocs");
				System.out.println(filepath);

				File exportExcelfile = new File(filepath + "/" + filename);
				exportExcelfile.createNewFile();
				System.out.println(exportExcelfile.getAbsolutePath());
				String exportExcelfilepath = exportExcelfile.getAbsolutePath();
				FileInputStream in = new FileInputStream(exportExcelfile);
				FileOutputStream out = new FileOutputStream(exportExcelfilepath);

				workbook.write(out);
				out.close();

				// to download excel file
				int filelen = Integer.parseInt(Long.toString(exportExcelfile.length()));
				response.setContentType("text/html");
				PrintWriter out1 = response.getWriter();
				String fileName = "Vodafone Scheme Analysis Report.xlsx";
				response.setContentType("APPLICATION/OCTET-STREAM");
				response.setContentLengthLong(exportExcelfile.length());
				response.setHeader("Content-Disposition", "attachment;fileName=\"" + exportExcelfile.getName() + "\"");

				int i;
				while ((i = in.read()) != -1) {
					out1.write(i);
				}

				out1.close();

				exportExcelfile.delete();

				in.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

		return new ModelAndView("VodafoneSchemeAnalysis");
	}

}
